%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: 1409.i043.009.S.m004.c11.car parts icons flat.eps
%%Creator: Adobe Illustrator(R) 17.0
%%For: IvAN
%%CreationDate: 9/8/2014
%%BoundingBox: 0 0 450 450
%%HiResBoundingBox: 0 0 450 450
%%CropBox: 0 0 450 450
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 17.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 17.0.0 x256 R agm 4.7700 ct 5.3328%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.5-c014 79.151739, 2013/04/03-12:12:15        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">blank template 450x450 RGB</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:CreatorTool>Adobe Illustrator CC (Windows)</xmp:CreatorTool>
         <xmp:CreateDate>2014-09-08T18:15:19+03:00</xmp:CreateDate>
         <xmp:ModifyDate>2014-09-08T18:15:20+03:00</xmp:ModifyDate>
         <xmp:MetadataDate>2014-09-08T18:15:20+03:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqkHnnzlp&#xA;nk7y1da7qALxwALDApAeWZ9kjWviep7Cp7ZPHAyNBhkmIiy8YP58eZET9I/4g0CWcL67eWlhu1/d&#xA;dfTW+K+n6/H348vuzK/LjlR97i/mDzse57b5O816Z5r8uWeu6aSLa7UkxvTnG6kq8b07qwp+OYk4&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:OriginalDocumentID>uuid:C1BCCE1871B8DB11993190FCD52B4E9F</xmpMM:OriginalDocumentID>
         <xmpMM:DocumentID>xmp.did:a9e69ffc-032e-c64d-8c0e-6e0146c9c88a</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:a9e69ffc-032e-c64d-8c0e-6e0146c9c88a</xmpMM:InstanceID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:d2dce510-a372-cb41-9e11-3ebd379bed96</stRef:instanceID>
            <stRef:documentID>xmp.did:d2dce510-a372-cb41-9e11-3ebd379bed96</stRef:documentID>
            <stRef:originalDocumentID>uuid:C1BCCE1871B8DB11993190FCD52B4E9F</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:aafbb1ba-3e80-0547-941e-fc66144b7d73</stEvt:instanceID>
                  <stEvt:when>2014-09-06T19:58:11+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2014 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:d2dce510-a372-cb41-9e11-3ebd379bed96</stEvt:instanceID>
                  <stEvt:when>2014-09-06T22:38:35+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2014 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:a9e69ffc-032e-c64d-8c0e-6e0146c9c88a</stEvt:instanceID>
                  <stEvt:when>2014-09-08T18:15:20+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Mobile</illustrator:StartupProfile>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>450.000000</stDim:w>
            <stDim:h>450.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -450 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 450 li
450 450 li
450 0 li
cp
clp
450 450 mo
0 450 li
0 0 li
450 0 li
450 450 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
1 1 1 rgb
f
388.386 361.379 mo
390.878 361.379 394.669 360.111 395.185 358.047 cv
395.374 357.102 395.529 355.918 395.452 355.686 cv
395.329 355.389 395.038 355.195 394.714 355.195 cv
376.957 355.195 li
374.188 355.195 372.842 356.935 372.842 360.516 cv
372.842 361.379 li
388.386 361.379 li
cp
361.196 415.895 mo
357.697 415.895 354.85 413.048 354.85 409.549 cv
354.85 371.692 li
354.85 369.112 356.391 366.809 358.776 365.826 cv
369.268 361.498 li
369.268 358.308 li
369.268 354.809 372.115 351.962 375.614 351.962 cv
397.164 351.962 li
400.663 351.962 403.51 354.809 403.51 358.308 cv
403.51 409.549 li
403.51 413.048 400.663 415.895 397.164 415.895 cv
361.196 415.895 li
cp
.368627 .619608 .654902 rgb
f
372.482 361.739 mo
372.482 360.516 li
372.482 357.21 373.651 354.834 376.957 354.834 cv
394.714 354.834 li
395.183 354.834 395.607 355.117 395.786 355.551 cv
395.966 355.985 395.535 358.134 395.535 358.134 cv
394.949 360.477 390.864 361.739 388.386 361.739 cv
372.482 361.739 li
cp
397.164 352.322 mo
375.614 352.322 li
372.308 352.322 369.628 355.002 369.628 358.308 cv
369.628 361.739 li
369.628 361.739 li
358.914 366.159 li
356.673 367.083 355.21 369.268 355.21 371.692 cv
355.21 409.549 li
355.21 412.855 357.89 415.535 361.196 415.535 cv
397.164 415.535 li
400.469 415.535 403.149 412.855 403.149 409.549 cv
403.149 361.739 li
403.149 358.308 li
403.149 355.002 400.469 352.322 397.164 352.322 cv
cp
.690196 .823529 .827451 rgb
f
377.368 392.467 mo
376.726 392.467 376.206 391.947 376.206 391.305 cv
376.206 384.437 li
376.206 383.795 376.726 383.275 377.368 383.275 cv
380.992 383.275 li
381.633 383.275 382.154 383.795 382.154 384.437 cv
382.154 391.305 li
382.154 391.947 381.633 392.467 380.992 392.467 cv
377.368 392.467 li
cp
385.758 391.305 mo
385.758 384.437 li
385.758 384.395 385.753 384.354 385.752 384.313 cv
398.794 367.07 li
398.789 367.066 398.784 367.062 398.779 367.059 cv
397.094 365.796 394.707 366.133 393.436 367.811 cv
383.773 380.575 li
382.99 380.009 382.031 379.671 380.992 379.671 cv
377.623 379.671 li
361.853 368.996 li
360.669 370.745 361.127 373.123 362.876 374.307 cv
373.582 381.554 li
372.97 382.355 372.602 383.353 372.602 384.437 cv
372.602 391.305 li
372.602 391.376 372.609 391.445 372.612 391.515 cv
360.167 408.716 li
360.219 408.751 360.271 408.785 360.323 408.819 cv
362.028 409.94 364.306 409.526 365.51 407.878 cv
374.723 395.267 li
375.48 395.774 376.39 396.071 377.368 396.071 cv
380.706 396.071 li
397.691 409.017 li
397.733 408.956 397.774 408.896 397.815 408.836 cv
398.959 407.162 398.598 404.893 396.993 403.653 cv
384.761 394.21 li
385.384 393.405 385.758 392.399 385.758 391.305 cv
cp
.368627 .619608 .654902 rgb
f
367.039 362.474 mo
359.274 365.687 li
358.492 363.797 li
366.257 360.583 li
367.039 362.474 li
cp
.956863 .603922 .133333 rgb
f
367.971 359.871 mo
356.775 364.504 li
355.163 360.608 li
354.882 359.929 355.205 359.15 355.884 358.869 cv
364.62 355.254 li
365.299 354.973 366.078 355.296 366.359 355.976 cv
367.971 359.871 li
cp
.203922 .278431 .423529 rgb
f
368.717 358.778 mo
355.475 364.258 li
354.123 360.992 li
367.366 355.513 li
368.717 358.778 li
cp
.254902 .372549 .47451 rgb
f
356.566 363.806 mo
355.986 364.046 li
354.635 360.78 li
355.215 360.541 li
356.566 363.806 li
cp
.203922 .278431 .423529 rgb
f
357.859 363.271 mo
357.279 363.511 li
355.928 360.245 li
356.508 360.005 li
357.859 363.271 li
cp
f
359.153 362.736 mo
358.573 362.975 li
357.222 359.71 li
357.801 359.47 li
359.153 362.736 li
cp
f
360.446 362.2 mo
359.866 362.44 li
358.515 359.175 li
359.095 358.935 li
360.446 362.2 li
cp
f
361.739 361.665 mo
361.159 361.905 li
359.808 358.64 li
360.388 358.4 li
361.739 361.665 li
cp
f
363.032 361.13 mo
362.452 361.37 li
361.101 358.105 li
361.681 357.865 li
363.032 361.13 li
cp
f
364.326 360.595 mo
363.746 360.835 li
362.395 357.57 li
362.974 357.33 li
364.326 360.595 li
cp
f
365.619 360.06 mo
365.039 360.3 li
363.688 357.035 li
364.268 356.795 li
365.619 360.06 li
cp
f
366.912 359.525 mo
366.332 359.765 li
364.981 356.499 li
365.561 356.259 li
366.912 359.525 li
cp
f
368.205 358.99 mo
367.625 359.229 li
366.274 355.964 li
366.854 355.724 li
368.205 358.99 li
cp
f
174.412 248.904 mo
162.121 248.904 152.158 258.868 152.158 271.158 cv
152.158 283.449 162.121 293.412 174.412 293.412 cv
186.702 293.412 196.666 283.449 196.666 271.158 cv
196.666 258.868 186.702 248.904 174.412 248.904 cv
cp
206.063 271.158 mo
206.063 288.639 191.892 302.81 174.412 302.81 cv
156.931 302.81 142.76 288.639 142.76 271.158 cv
142.76 253.678 156.931 239.507 174.412 239.507 cv
191.892 239.507 206.063 253.678 206.063 271.158 cv
cp
level3{
gsave
clp
[44.7617 -44.7617 44.7617 44.7617 152.031 293.539 ]ct
/0 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.54902 .560784 .486275 ]
/C1 [.733333 .737255 .678431 ]
/N 1 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.733333 .737255 .678431 ]
/C1 [.54902 .560784 .486275 ]
/N 1 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.54902 .560784 .486275 ]
/C1 [.733333 .737255 .678431 ]
/N 1 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.733333 .737255 .678431 ]
/C1 [.54902 .560784 .486275 ]
/N 1 
>>
]
/Bounds [.244898 .5 .75 ]
/Encode [0 1 0 1 0 1 0 1 ]
>>
>>/Gradient add_res /0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[44.7617 -44.7617 44.7617 44.7617 152.031 293.539 ]ct
clp
/0 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~N/WaVNfT9aOckomPa.Q$Q^F20R[]h<SXuIHTV8*TUSO``VPgAlWN*##XKAY/YHY:;ZEppG[C3QS\@K2^
]",>[\$i]P['R'DZ*:F8Y-"h-X/`2!W2QVkV59u_US=HTTV%gHSXc1=R[KP1Q^3r&P`q;oOcb`dNfK*X
N/WaVNfT9aOckomPa.Q$Q^F2/R[]h;SXuIGTV8*SUSO]^VPg>jWN)u!XKAV-YHP18ZEggD[C*HP\@B)\
]=PP_\@8oS[C!9GZE^X;YHG"0XK/A$WMl_mVPU)aUS=KVTV%jJSXc4>R[KS2Q^=#'Pa%ApOcb`dNfK*X
~>
<~O,oBbOckomPa.Q#Q^F2/R[]e:SXuFFTV/!QUSFW]V5C/hW2ZesX/rG*Y-5(6Z*L[A['d<M\$rlX]"5Mc
]=PP`\@8oT[C!<IZEga>Yck44XfSS(Wi;trVl-DgV50l\U7n6QT:VXFS=H(;R[KP0Q^3o%P`q;oOcb`d
O,oBbOckolPa.Q#Q^F/.R[T_9SXl@ET:hmOU8+N[V5C,fW2ZbrX/i>(Xfek3Yd(L>Za@*I[^W`U\[f;`
]Xtbc\[],X[^EKLZa-mAYct=6Xf\\*X/`.uW2HMiV50o^U7n9RT:_^GSXc1<R[KP1Q^3r&P`q;oOcb`d
~>
<~I!g?kIt*!"JqJ]/Knb>;Ll%"HMi<XTNfT9aOckomQ'IZ%R$a;1S"-">StDXJTq\<WUnsrcVl6SpWiN5&
XK/A#WMl_lVPU)`US=HTTV%gHSXc1<R[KP0Q^3o$P`q8mOcYWaNfB!UMi*@ILkg_=KnP)1Jq8H%Isufn
I!g?kIt*!"JqAW.KnY8:Ll$tGMi<USNfT6_OcklkPa.Q#Q^F2/R[]h;SXuIGTV8*TUSO``VPgAlWN*##
XfSS'WMuhoVP^2cUSFQWTV%jJSXc4>R[KS2Q^3r&P`q8nOcYWbNfB!VMi*@JLkg_=KnP)1Jq8H%Isufn
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /0 /Gradient get_res exec grestore
}if
np
174.412 248.904 mo
162.121 248.904 152.158 258.868 152.158 271.158 cv
152.158 283.449 162.121 293.412 174.412 293.412 cv
186.702 293.412 196.666 283.449 196.666 271.158 cv
196.666 258.868 186.702 248.904 174.412 248.904 cv
cp
206.063 271.158 mo
206.063 288.639 191.892 302.81 174.412 302.81 cv
156.931 302.81 142.76 288.639 142.76 271.158 cv
142.76 253.678 156.931 239.507 174.412 239.507 cv
191.892 239.507 206.063 253.678 206.063 271.158 cv
cp
.690196 .823529 .827451 rgb
f
174.412 250.424 mo
162.961 250.424 153.678 259.707 153.678 271.158 cv
153.678 282.609 162.961 291.892 174.412 291.892 cv
185.863 291.892 195.145 282.609 195.145 271.158 cv
195.145 259.707 185.863 250.424 174.412 250.424 cv
cp
196.8 271.158 mo
196.8 283.523 186.777 293.547 174.412 293.547 cv
162.047 293.547 152.023 283.523 152.023 271.158 cv
152.023 258.793 162.047 248.77 174.412 248.77 cv
186.777 248.77 196.8 258.793 196.8 271.158 cv
cp
.905882 .337255 .262745 rgb
f
174.412 256.716 mo
166.435 256.716 159.969 263.182 159.969 271.158 cv
159.969 279.135 166.435 285.601 174.412 285.601 cv
182.388 285.601 188.854 279.135 188.854 271.158 cv
188.854 263.182 182.388 256.716 174.412 256.716 cv
cp
195.79 271.158 mo
195.79 282.965 186.219 292.537 174.412 292.537 cv
162.605 292.537 153.033 282.965 153.033 271.158 cv
153.033 259.351 162.605 249.78 174.412 249.78 cv
186.219 249.78 195.79 259.351 195.79 271.158 cv
cp
.368627 .619608 .654902 rgb
f
185.766 267.438 mo
185.498 266.612 184.61 266.159 183.784 266.428 cv
182.957 266.697 182.505 267.584 182.773 268.41 cv
183.042 269.237 183.93 269.689 184.756 269.421 cv
185.582 269.152 186.035 268.264 185.766 267.438 cv
cp
181.429 280.786 mo
182.132 280.275 182.288 279.291 181.777 278.588 cv
181.266 277.885 180.283 277.73 179.58 278.24 cv
178.877 278.751 178.721 279.735 179.231 280.438 cv
179.742 281.141 180.726 281.297 181.429 280.786 cv
cp
167.394 280.786 mo
168.097 281.297 169.081 281.141 169.592 280.438 cv
170.103 279.735 169.947 278.751 169.244 278.24 cv
168.541 277.73 167.557 277.885 167.046 278.588 cv
166.536 279.291 166.691 280.275 167.394 280.786 cv
cp
163.057 267.438 mo
162.789 268.264 163.241 269.152 164.067 269.421 cv
164.894 269.689 165.781 269.237 166.05 268.41 cv
166.319 267.584 165.866 266.697 165.04 266.428 cv
164.214 266.159 163.326 266.612 163.057 267.438 cv
cp
174.412 259.189 mo
173.543 259.189 172.838 259.893 172.838 260.762 cv
172.838 261.631 173.543 262.335 174.412 262.335 cv
175.281 262.335 175.985 261.631 175.985 260.762 cv
175.985 259.893 175.281 259.189 174.412 259.189 cv
cp
174.412 264.243 mo
170.592 264.243 167.496 267.339 167.496 271.158 cv
167.496 274.978 170.592 278.074 174.412 278.074 cv
178.231 278.074 181.327 274.978 181.327 271.158 cv
181.327 267.339 178.231 264.243 174.412 264.243 cv
cp
188.824 271.158 mo
188.824 279.118 182.371 285.57 174.412 285.57 cv
166.452 285.57 160 279.118 160 271.158 cv
160 263.199 166.452 256.746 174.412 256.746 cv
182.371 256.746 188.824 263.199 188.824 271.158 cv
cp
.160784 .180392 .188235 rgb
f
150.056 270.735 mo
149.689 270.735 149.39 270.436 149.39 270.068 cv
149.39 269.701 149.689 269.402 150.056 269.402 cv
150.424 269.402 150.723 269.701 150.723 270.068 cv
150.723 270.436 150.424 270.735 150.056 270.735 cv
cp
.368627 .619608 .654902 rgb
f
148.205 272.586 mo
147.838 272.586 147.539 272.287 147.539 271.919 cv
147.539 271.552 147.838 271.253 148.205 271.253 cv
148.573 271.253 148.872 271.552 148.872 271.919 cv
148.872 272.287 148.573 272.586 148.205 272.586 cv
cp
f
146.632 274.724 mo
146.264 274.724 145.966 274.425 145.966 274.058 cv
145.966 273.691 146.264 273.392 146.632 273.392 cv
146.999 273.392 147.298 273.691 147.298 274.058 cv
147.298 274.425 146.999 274.724 146.632 274.724 cv
cp
f
145.645 277.053 mo
145.277 277.053 144.979 276.755 144.979 276.387 cv
144.979 276.02 145.277 275.721 145.645 275.721 cv
146.012 275.721 146.311 276.02 146.311 276.387 cv
146.311 276.755 146.012 277.053 145.645 277.053 cv
cp
f
145.028 279.645 mo
144.66 279.645 144.361 279.346 144.361 278.978 cv
144.361 278.611 144.66 278.312 145.028 278.312 cv
145.395 278.312 145.694 278.611 145.694 278.978 cv
145.694 279.346 145.395 279.645 145.028 279.645 cv
cp
f
151.99 280.678 mo
151.654 280.827 151.259 280.675 151.11 280.34 cv
150.96 280.004 151.112 279.609 151.448 279.46 cv
151.783 279.311 152.178 279.462 152.327 279.798 cv
152.477 280.133 152.325 280.528 151.99 280.678 cv
cp
f
151.052 283.121 mo
150.716 283.271 150.321 283.119 150.172 282.784 cv
150.022 282.448 150.174 282.053 150.509 281.904 cv
150.845 281.754 151.24 281.906 151.389 282.242 cv
151.539 282.577 151.387 282.972 151.052 283.121 cv
cp
f
150.484 285.715 mo
150.148 285.865 149.754 285.713 149.604 285.377 cv
149.455 285.042 149.606 284.647 149.942 284.498 cv
150.278 284.348 150.672 284.5 150.822 284.835 cv
150.971 285.171 150.82 285.566 150.484 285.715 cv
cp
f
150.53 288.244 mo
150.194 288.394 149.799 288.242 149.65 287.907 cv
149.501 287.571 149.652 287.177 149.988 287.027 cv
150.323 286.878 150.718 287.029 150.867 287.365 cv
151.017 287.7 150.865 288.095 150.53 288.244 cv
cp
f
151.02 290.863 mo
150.684 291.012 150.29 290.861 150.14 290.525 cv
149.991 290.189 150.142 289.795 150.478 289.645 cv
150.814 289.496 151.208 289.647 151.358 289.983 cv
151.507 290.319 151.356 290.713 151.02 290.863 cv
cp
f
157.8 288.974 mo
157.554 289.247 157.132 289.27 156.859 289.024 cv
156.586 288.778 156.564 288.356 156.81 288.083 cv
157.055 287.81 157.478 287.788 157.751 288.034 cv
158.024 288.279 158.046 288.701 157.8 288.974 cv
cp
f
157.937 291.589 mo
157.691 291.862 157.269 291.884 156.996 291.638 cv
156.723 291.392 156.701 290.97 156.947 290.697 cv
157.192 290.424 157.615 290.402 157.888 290.647 cv
158.161 290.893 158.183 291.315 157.937 291.589 cv
cp
f
158.473 294.189 mo
158.228 294.462 157.806 294.484 157.533 294.238 cv
157.26 293.992 157.237 293.57 157.483 293.297 cv
157.729 293.024 158.151 293.002 158.424 293.248 cv
158.697 293.494 158.719 293.916 158.473 294.189 cv
cp
f
159.544 296.481 mo
159.298 296.754 158.876 296.776 158.603 296.53 cv
158.33 296.284 158.308 295.862 158.554 295.589 cv
158.8 295.316 159.222 295.294 159.495 295.54 cv
159.768 295.786 159.79 296.208 159.544 296.481 cv
cp
f
161.057 298.673 mo
160.811 298.947 160.389 298.969 160.116 298.723 cv
159.843 298.477 159.821 298.055 160.066 297.782 cv
160.313 297.509 160.734 297.487 161.007 297.733 cv
161.281 297.978 161.303 298.4 161.057 298.673 cv
cp
f
166.483 294.191 mo
166.369 294.54 165.992 294.732 165.643 294.619 cv
165.294 294.505 165.102 294.129 165.215 293.779 cv
165.329 293.429 165.705 293.238 166.055 293.351 cv
166.404 293.465 166.596 293.841 166.483 294.191 cv
cp
f
167.671 296.523 mo
167.558 296.873 167.181 297.064 166.831 296.951 cv
166.482 296.837 166.29 296.461 166.404 296.111 cv
166.517 295.762 166.894 295.57 167.243 295.684 cv
167.593 295.797 167.785 296.174 167.671 296.523 cv
cp
f
169.219 298.68 mo
169.105 299.03 168.729 299.222 168.379 299.108 cv
168.03 298.995 167.838 298.618 167.952 298.269 cv
168.065 297.919 168.442 297.727 168.791 297.841 cv
169.141 297.954 169.332 298.331 169.219 298.68 cv
cp
f
171.129 300.339 mo
171.016 300.688 170.639 300.88 170.289 300.767 cv
169.94 300.653 169.748 300.277 169.862 299.927 cv
169.975 299.578 170.352 299.386 170.701 299.499 cv
171.051 299.613 171.243 299.989 171.129 300.339 cv
cp
f
173.403 301.727 mo
173.289 302.076 172.913 302.268 172.563 302.154 cv
172.214 302.041 172.022 301.664 172.136 301.315 cv
172.249 300.965 172.626 300.773 172.975 300.887 cv
173.325 301 173.516 301.377 173.403 301.727 cv
cp
f
176.536 295.424 mo
176.575 295.79 176.309 296.118 175.943 296.157 cv
175.578 296.195 175.249 295.929 175.211 295.564 cv
175.173 295.198 175.439 294.87 175.804 294.832 cv
176.169 294.793 176.498 295.059 176.536 295.424 cv
cp
f
178.571 297.072 mo
178.609 297.437 178.343 297.766 177.978 297.804 cv
177.612 297.843 177.284 297.577 177.245 297.211 cv
177.207 296.846 177.473 296.517 177.838 296.479 cv
178.204 296.44 178.532 296.706 178.571 297.072 cv
cp
f
180.862 298.413 mo
180.9 298.779 180.634 299.107 180.269 299.145 cv
179.904 299.184 179.575 298.918 179.537 298.552 cv
179.498 298.187 179.764 297.858 180.13 297.82 cv
180.495 297.782 180.824 298.047 180.862 298.413 cv
cp
f
183.282 299.151 mo
183.32 299.517 183.054 299.845 182.689 299.884 cv
182.323 299.922 181.995 299.656 181.956 299.291 cv
181.918 298.925 182.184 298.597 182.549 298.558 cv
182.915 298.52 183.243 298.786 183.282 299.151 cv
cp
f
185.923 299.494 mo
185.962 299.86 185.696 300.188 185.33 300.226 cv
184.965 300.265 184.636 299.999 184.598 299.633 cv
184.56 299.268 184.826 298.94 185.191 298.901 cv
185.556 298.863 185.885 299.129 185.923 299.494 cv
cp
f
186.223 292.462 mo
186.406 292.781 186.297 293.189 185.979 293.373 cv
185.661 293.556 185.252 293.447 185.068 293.129 cv
184.885 292.811 184.994 292.402 185.313 292.219 cv
185.631 292.035 186.039 292.144 186.223 292.462 cv
cp
f
188.751 293.14 mo
188.935 293.458 188.825 293.866 188.507 294.05 cv
188.189 294.234 187.781 294.125 187.597 293.806 cv
187.413 293.488 187.523 293.08 187.841 292.896 cv
188.159 292.712 188.567 292.822 188.751 293.14 cv
cp
f
191.39 293.433 mo
191.574 293.751 191.464 294.16 191.146 294.343 cv
190.828 294.527 190.42 294.418 190.236 294.099 cv
190.052 293.781 190.161 293.373 190.48 293.189 cv
190.798 293.005 191.206 293.115 191.39 293.433 cv
cp
f
193.901 293.123 mo
194.084 293.442 193.975 293.85 193.657 294.034 cv
193.339 294.217 192.93 294.108 192.747 293.79 cv
192.563 293.471 192.672 293.063 192.99 292.879 cv
193.309 292.696 193.717 292.805 193.901 293.123 cv
cp
f
196.453 292.362 mo
196.637 292.681 196.528 293.089 196.209 293.272 cv
195.891 293.456 195.483 293.347 195.299 293.029 cv
195.116 292.71 195.225 292.302 195.543 292.118 cv
195.861 291.935 196.27 292.044 196.453 292.362 cv
cp
f
193.867 285.817 mo
194.164 286.033 194.23 286.45 194.014 286.747 cv
193.798 287.045 193.381 287.111 193.083 286.895 cv
192.786 286.679 192.72 286.261 192.936 285.964 cv
193.152 285.667 193.569 285.601 193.867 285.817 cv
cp
f
196.452 285.407 mo
196.749 285.623 196.815 286.041 196.6 286.338 cv
196.384 286.635 195.966 286.701 195.669 286.485 cv
195.372 286.269 195.306 285.852 195.521 285.555 cv
195.737 285.257 196.155 285.191 196.452 285.407 cv
cp
f
198.982 284.602 mo
199.279 284.818 199.345 285.235 199.13 285.532 cv
198.914 285.83 198.496 285.896 198.199 285.68 cv
197.901 285.464 197.835 285.046 198.051 284.749 cv
198.268 284.452 198.685 284.386 198.982 284.602 cv
cp
f
201.15 283.298 mo
201.447 283.514 201.513 283.931 201.297 284.228 cv
201.081 284.526 200.664 284.592 200.367 284.376 cv
200.069 284.16 200.003 283.742 200.219 283.445 cv
200.435 283.148 200.853 283.082 201.15 283.298 cv
cp
f
203.172 281.564 mo
203.469 281.78 203.536 282.197 203.32 282.495 cv
203.104 282.792 202.686 282.858 202.389 282.642 cv
202.092 282.426 202.025 282.009 202.242 281.711 cv
202.457 281.414 202.875 281.348 203.172 281.564 cv
cp
f
198.147 276.636 mo
198.506 276.713 198.736 277.067 198.66 277.427 cv
198.584 277.786 198.229 278.016 197.87 277.94 cv
197.51 277.863 197.28 277.509 197.357 277.15 cv
197.433 276.79 197.788 276.56 198.147 276.636 cv
cp
f
200.342 275.211 mo
200.702 275.287 200.932 275.642 200.856 276.001 cv
200.779 276.36 200.425 276.591 200.065 276.514 cv
199.706 276.438 199.476 276.083 199.552 275.724 cv
199.628 275.365 199.983 275.134 200.342 275.211 cv
cp
f
202.326 273.446 mo
202.685 273.522 202.915 273.877 202.839 274.236 cv
202.763 274.595 202.408 274.826 202.049 274.749 cv
201.689 274.673 201.459 274.318 201.536 273.959 cv
201.612 273.6 201.966 273.37 202.326 273.446 cv
cp
f
203.776 271.373 mo
204.135 271.449 204.365 271.803 204.289 272.163 cv
204.212 272.522 203.858 272.753 203.499 272.676 cv
203.139 272.6 202.909 272.245 202.985 271.886 cv
203.062 271.526 203.416 271.296 203.776 271.373 cv
cp
f
204.918 268.966 mo
205.278 269.043 205.508 269.397 205.431 269.757 cv
205.355 270.116 205 270.346 204.641 270.27 cv
204.282 270.193 204.051 269.839 204.128 269.479 cv
204.204 269.12 204.559 268.89 204.918 268.966 cv
cp
f
198.323 266.509 mo
198.682 266.432 199.037 266.663 199.113 267.022 cv
199.19 267.381 198.96 267.736 198.6 267.812 cv
198.241 267.889 197.886 267.659 197.81 267.299 cv
197.734 266.94 197.964 266.585 198.323 266.509 cv
cp
f
199.749 264.313 mo
200.108 264.237 200.463 264.467 200.539 264.827 cv
200.615 265.186 200.385 265.541 200.026 265.617 cv
199.666 265.693 199.312 265.463 199.236 265.104 cv
199.159 264.744 199.389 264.39 199.749 264.313 cv
cp
f
200.843 261.894 mo
201.202 261.818 201.557 262.048 201.633 262.408 cv
201.71 262.767 201.479 263.121 201.12 263.198 cv
200.761 263.274 200.406 263.044 200.33 262.685 cv
200.253 262.325 200.484 261.971 200.843 261.894 cv
cp
f
201.324 259.411 mo
201.684 259.334 202.038 259.565 202.115 259.924 cv
202.191 260.283 201.961 260.638 201.601 260.714 cv
201.242 260.791 200.887 260.56 200.811 260.201 cv
200.735 259.842 200.965 259.487 201.324 259.411 cv
cp
f
201.389 256.748 mo
201.749 256.671 202.103 256.902 202.179 257.261 cv
202.256 257.62 202.026 257.975 201.666 258.051 cv
201.307 258.128 200.952 257.897 200.876 257.538 cv
200.8 257.179 201.03 256.824 201.389 256.748 cv
cp
f
194.365 257.185 mo
194.662 256.969 195.079 257.035 195.296 257.333 cv
195.511 257.63 195.445 258.047 195.148 258.263 cv
194.851 258.479 194.433 258.413 194.217 258.116 cv
194.001 257.819 194.067 257.401 194.365 257.185 cv
cp
f
194.774 254.6 mo
195.072 254.384 195.489 254.45 195.705 254.747 cv
195.921 255.044 195.855 255.462 195.558 255.678 cv
195.26 255.894 194.843 255.828 194.627 255.53 cv
194.411 255.233 194.477 254.816 194.774 254.6 cv
cp
f
194.79 251.945 mo
195.087 251.729 195.505 251.795 195.721 252.092 cv
195.937 252.389 195.87 252.807 195.573 253.023 cv
195.276 253.239 194.858 253.173 194.643 252.875 cv
194.427 252.578 194.493 252.161 194.79 251.945 cv
cp
f
194.22 249.48 mo
194.517 249.264 194.934 249.33 195.15 249.628 cv
195.366 249.925 195.3 250.342 195.003 250.558 cv
194.705 250.774 194.288 250.708 194.072 250.411 cv
193.856 250.113 193.922 249.696 194.22 249.48 cv
cp
f
193.196 247.021 mo
193.493 246.805 193.91 246.871 194.126 247.168 cv
194.342 247.466 194.276 247.883 193.979 248.099 cv
193.682 248.315 193.264 248.249 193.048 247.952 cv
192.832 247.654 192.898 247.237 193.196 247.021 cv
cp
f
186.956 250.278 mo
187.14 249.959 187.548 249.85 187.867 250.034 cv
188.185 250.217 188.294 250.626 188.11 250.944 cv
187.927 251.262 187.518 251.371 187.2 251.188 cv
186.882 251.004 186.773 250.596 186.956 250.278 cv
cp
f
186.279 247.749 mo
186.463 247.431 186.871 247.322 187.189 247.505 cv
187.507 247.689 187.617 248.097 187.433 248.415 cv
187.249 248.734 186.841 248.843 186.523 248.659 cv
186.205 248.476 186.095 248.067 186.279 247.749 cv
cp
f
185.213 245.317 mo
185.397 244.999 185.805 244.89 186.123 245.073 cv
186.442 245.257 186.551 245.665 186.367 245.984 cv
186.184 246.302 185.775 246.411 185.457 246.227 cv
185.139 246.044 185.03 245.635 185.213 245.317 cv
cp
f
183.69 243.298 mo
183.873 242.98 184.282 242.87 184.6 243.054 cv
184.918 243.238 185.027 243.646 184.844 243.964 cv
184.66 244.282 184.252 244.392 183.934 244.208 cv
183.615 244.024 183.506 243.616 183.69 243.298 cv
cp
f
181.754 241.468 mo
181.938 241.149 182.346 241.04 182.664 241.224 cv
182.982 241.408 183.092 241.816 182.908 242.134 cv
182.724 242.452 182.316 242.561 181.998 242.378 cv
181.68 242.194 181.57 241.786 181.754 241.468 cv
cp
f
177.379 246.98 mo
177.417 246.615 177.746 246.349 178.111 246.387 cv
178.477 246.426 178.743 246.754 178.704 247.12 cv
178.666 247.485 178.337 247.751 177.972 247.713 cv
177.606 247.674 177.34 247.346 177.379 246.98 cv
cp
f
175.731 244.946 mo
175.77 244.581 176.098 244.315 176.464 244.353 cv
176.829 244.391 177.095 244.72 177.057 245.085 cv
177.018 245.451 176.69 245.717 176.324 245.678 cv
175.959 245.64 175.693 245.312 175.731 244.946 cv
cp
f
173.769 243.158 mo
173.807 242.792 174.136 242.527 174.501 242.565 cv
174.867 242.603 175.133 242.932 175.094 243.297 cv
175.056 243.663 174.727 243.929 174.362 243.89 cv
173.996 243.852 173.731 243.523 173.769 243.158 cv
cp
f
171.556 241.933 mo
171.594 241.567 171.923 241.301 172.288 241.34 cv
172.653 241.378 172.919 241.706 172.881 242.072 cv
172.842 242.438 172.514 242.703 172.149 242.665 cv
171.783 242.627 171.517 242.298 171.556 241.933 cv
cp
f
169.043 241.048 mo
169.082 240.683 169.41 240.417 169.775 240.455 cv
170.141 240.494 170.407 240.822 170.368 241.187 cv
170.33 241.553 170.002 241.819 169.636 241.78 cv
169.271 241.742 169.005 241.414 169.043 241.048 cv
cp
f
167.288 247.864 mo
167.175 247.514 167.367 247.138 167.716 247.024 cv
168.066 246.911 168.442 247.103 168.556 247.452 cv
168.669 247.801 168.477 248.178 168.128 248.292 cv
167.779 248.405 167.402 248.213 167.288 247.864 cv
cp
f
164.956 246.676 mo
164.842 246.326 165.034 245.949 165.384 245.836 cv
165.733 245.722 166.11 245.914 166.223 246.264 cv
166.337 246.613 166.145 246.99 165.796 247.103 cv
165.446 247.217 165.069 247.025 164.956 246.676 cv
cp
f
162.436 245.84 mo
162.322 245.491 162.514 245.114 162.864 245.001 cv
163.213 244.887 163.59 245.079 163.703 245.428 cv
163.817 245.778 163.625 246.154 163.275 246.268 cv
162.926 246.381 162.549 246.19 162.436 245.84 cv
cp
f
159.916 245.621 mo
159.802 245.271 159.994 244.895 160.343 244.781 cv
160.693 244.668 161.069 244.86 161.183 245.209 cv
161.296 245.559 161.105 245.935 160.755 246.049 cv
160.406 246.162 160.029 245.971 159.916 245.621 cv
cp
f
157.26 245.835 mo
157.147 245.485 157.339 245.109 157.688 244.995 cv
158.038 244.882 158.414 245.074 158.528 245.423 cv
158.641 245.773 158.449 246.149 158.1 246.263 cv
157.75 246.376 157.374 246.184 157.26 245.835 cv
cp
f
158.429 252.775 mo
158.184 252.502 158.206 252.08 158.479 251.834 cv
158.752 251.588 159.174 251.61 159.42 251.883 cv
159.666 252.156 159.644 252.579 159.371 252.824 cv
159.097 253.07 158.675 253.048 158.429 252.775 cv
cp
f
155.815 252.638 mo
155.57 252.365 155.592 251.943 155.865 251.697 cv
156.138 251.451 156.56 251.473 156.806 251.746 cv
157.052 252.02 157.029 252.441 156.757 252.687 cv
156.483 252.933 156.061 252.911 155.815 252.638 cv
cp
f
153.173 252.9 mo
152.927 252.627 152.95 252.205 153.223 251.959 cv
153.496 251.713 153.918 251.735 154.164 252.008 cv
154.41 252.281 154.387 252.704 154.114 252.949 cv
153.841 253.195 153.419 253.173 153.173 252.9 cv
cp
f
150.782 253.725 mo
150.536 253.452 150.558 253.03 150.831 252.784 cv
151.104 252.538 151.526 252.56 151.772 252.833 cv
152.018 253.106 151.996 253.528 151.723 253.774 cv
151.45 254.02 151.028 253.998 150.782 253.725 cv
cp
f
148.443 255 mo
148.197 254.727 148.219 254.305 148.493 254.059 cv
148.766 253.814 149.188 253.836 149.434 254.109 cv
149.679 254.382 149.657 254.804 149.384 255.05 cv
149.111 255.296 148.689 255.273 148.443 255 cv
cp
f
152.334 260.865 mo
151.998 260.716 151.847 260.321 151.996 259.985 cv
152.146 259.65 152.541 259.498 152.876 259.647 cv
153.212 259.797 153.363 260.192 153.214 260.527 cv
153.064 260.863 152.67 261.014 152.334 260.865 cv
cp
f
149.89 261.803 mo
149.555 261.654 149.403 261.259 149.553 260.923 cv
149.702 260.588 150.097 260.436 150.432 260.586 cv
150.768 260.735 150.92 261.13 150.77 261.465 cv
150.621 261.801 150.226 261.953 149.89 261.803 cv
cp
f
147.583 263.117 mo
147.247 262.967 147.096 262.573 147.246 262.237 cv
147.395 261.902 147.789 261.75 148.125 261.9 cv
148.461 262.049 148.612 262.444 148.463 262.779 cv
148.313 263.115 147.919 263.266 147.583 263.117 cv
cp
f
145.734 264.843 mo
145.398 264.694 145.247 264.299 145.396 263.964 cv
145.546 263.628 145.94 263.477 146.276 263.626 cv
146.612 263.775 146.763 264.17 146.614 264.506 cv
146.464 264.841 146.07 264.993 145.734 264.843 cv
cp
f
144.116 266.96 mo
143.781 266.81 143.629 266.416 143.779 266.08 cv
143.928 265.744 144.323 265.593 144.658 265.742 cv
144.994 265.892 145.145 266.286 144.996 266.622 cv
144.846 266.958 144.452 267.109 144.116 266.96 cv
cp
f
202.54 250.006 mo
199.586 245.415 191.906 240.668 191.236 240.443 cv
190.341 240.142 188.504 240.269 185.215 239.084 cv
181.792 237.85 181.624 236.741 179.79 236.741 cv
177.956 236.741 174.412 236.741 174.412 236.741 cv
174.412 236.741 170.867 236.741 169.034 236.741 cv
167.2 236.741 167.031 237.85 163.608 239.084 cv
160.32 240.269 158.483 240.142 157.587 240.443 cv
156.917 240.668 149.238 245.415 146.284 250.006 cv
145.917 250.577 147.552 250.855 147.552 251.78 cv
147.552 252.706 146.777 253.214 146.5 253.492 cv
146.222 253.77 146.743 254.089 146.743 254.089 cv
161.647 254.089 li
161.647 254.089 167.131 250.191 174.412 250.191 cv
181.939 250.191 187.177 254.089 187.177 254.089 cv
202.08 254.089 li
202.08 254.089 202.601 253.77 202.324 253.492 cv
202.046 253.214 201.271 252.706 201.271 251.78 cv
201.271 250.855 202.907 250.577 202.54 250.006 cv
cp
.254902 .372549 .47451 rgb
f
188.275 251.009 mo
186.12 249.7 181.02 247.11 174.412 247.11 cv
167.957 247.11 162.744 249.727 160.578 251.009 cv
160.578 251.009 157.462 245.346 158.844 244.574 cv
158.974 244.555 159.141 244.533 159.286 244.513 cv
160.408 244.365 162.286 244.117 164.863 243.188 cv
166.835 242.477 167.979 241.768 168.736 241.299 cv
168.865 241.219 169.016 241.125 169.122 241.064 cv
179.702 241.064 li
179.807 241.125 179.959 241.219 180.088 241.299 cv
180.845 241.768 181.989 242.477 183.96 243.188 cv
186.538 244.117 188.416 244.365 189.538 244.513 cv
189.683 244.533 189.85 244.554 189.979 244.574 cv
191.362 245.346 188.275 251.009 188.275 251.009 cv
cp
.956863 .603922 .133333 rgb
f
170.226 239.142 mo
170.226 239.985 169.542 240.669 168.699 240.669 cv
167.856 240.669 167.172 239.985 167.172 239.142 cv
167.172 238.298 167.856 237.615 168.699 237.615 cv
169.542 237.615 170.226 238.298 170.226 239.142 cv
cp
.27451 .282353 .235294 rgb
f
170.116 239.142 mo
170.116 239.924 169.481 240.558 168.699 240.558 cv
167.917 240.558 167.283 239.924 167.283 239.142 cv
167.283 238.359 167.917 237.725 168.699 237.725 cv
169.481 237.725 170.116 238.359 170.116 239.142 cv
cp
.690196 .823529 .827451 rgb
f
169.472 239.142 mo
169.472 239.569 169.126 239.915 168.699 239.915 cv
168.272 239.915 167.926 239.569 167.926 239.142 cv
167.926 238.715 168.272 238.369 168.699 238.369 cv
169.126 238.369 169.472 238.715 169.472 239.142 cv
cp
.27451 .282353 .235294 rgb
f
159.786 242.624 mo
159.786 243.467 159.102 244.15 158.259 244.15 cv
157.415 244.15 156.732 243.467 156.732 242.624 cv
156.732 241.78 157.415 241.096 158.259 241.096 cv
159.102 241.096 159.786 241.78 159.786 242.624 cv
cp
f
159.675 242.624 mo
159.675 243.406 159.041 244.04 158.259 244.04 cv
157.476 244.04 156.842 243.406 156.842 242.624 cv
156.842 241.841 157.476 241.207 158.259 241.207 cv
159.041 241.207 159.675 241.841 159.675 242.624 cv
cp
.690196 .823529 .827451 rgb
f
159.032 242.624 mo
159.032 243.05 158.686 243.396 158.259 243.396 cv
157.832 243.396 157.486 243.05 157.486 242.624 cv
157.486 242.197 157.832 241.85 158.259 241.85 cv
158.686 241.85 159.032 242.197 159.032 242.624 cv
cp
.27451 .282353 .235294 rgb
f
178.597 239.142 mo
178.597 239.985 179.281 240.669 180.124 240.669 cv
180.968 240.669 181.651 239.985 181.651 239.142 cv
181.651 238.298 180.968 237.615 180.124 237.615 cv
179.281 237.615 178.597 238.298 178.597 239.142 cv
cp
f
178.708 239.142 mo
178.708 239.924 179.342 240.558 180.124 240.558 cv
180.907 240.558 181.541 239.924 181.541 239.142 cv
181.541 238.359 180.907 237.725 180.124 237.725 cv
179.342 237.725 178.708 238.359 178.708 239.142 cv
cp
.690196 .823529 .827451 rgb
f
179.352 239.142 mo
179.352 239.569 179.698 239.915 180.124 239.915 cv
180.551 239.915 180.897 239.569 180.897 239.142 cv
180.897 238.715 180.551 238.369 180.124 238.369 cv
179.698 238.369 179.352 238.715 179.352 239.142 cv
cp
.27451 .282353 .235294 rgb
f
189.038 242.624 mo
189.038 243.467 189.721 244.15 190.565 244.15 cv
191.408 244.15 192.092 243.467 192.092 242.624 cv
192.092 241.78 191.408 241.096 190.565 241.096 cv
189.721 241.096 189.038 241.78 189.038 242.624 cv
cp
f
189.148 242.624 mo
189.148 243.406 189.783 244.04 190.565 244.04 cv
191.347 244.04 191.981 243.406 191.981 242.624 cv
191.981 241.841 191.347 241.207 190.565 241.207 cv
189.783 241.207 189.148 241.841 189.148 242.624 cv
cp
.690196 .823529 .827451 rgb
f
189.792 242.624 mo
189.792 243.05 190.138 243.396 190.565 243.396 cv
190.992 243.396 191.338 243.05 191.338 242.624 cv
191.338 242.197 190.992 241.85 190.565 241.85 cv
190.138 241.85 189.792 242.197 189.792 242.624 cv
cp
.27451 .282353 .235294 rgb
f
412.769 191.115 mo
344.864 191.115 li
344.864 151.05 li
412.769 151.05 li
412.769 191.115 li
cp
.0588235 .219608 .345098 rgb
f
413.485 194.433 mo
344.148 194.433 li
344.148 191.92 li
344.148 191.475 344.508 191.115 344.953 191.115 cv
412.679 191.115 li
413.124 191.115 413.485 191.475 413.485 191.92 cv
413.485 194.433 li
cp
.254902 .372549 .47451 rgb
f
413.485 147.732 mo
344.148 147.732 li
344.148 150.244 li
344.148 150.689 344.508 151.05 344.953 151.05 cv
412.679 151.05 li
413.124 151.05 413.485 150.689 413.485 150.244 cv
413.485 147.732 li
cp
f
412.769 145.057 mo
344.864 145.057 li
344.864 147.767 li
412.769 147.767 li
412.769 145.057 li
cp
.203922 .278431 .423529 rgb
f
412.742 143.563 mo
344.891 143.563 li
344.891 145.057 li
412.742 145.057 li
412.742 143.563 li
cp
.0588235 .219608 .345098 rgb
f
395.793 143.563 mo
361.84 143.563 li
361.84 145.057 li
395.793 145.057 li
395.793 143.563 li
cp
.368627 .619608 .654902 rgb
f
409.635 144.28 mo
399.034 144.28 li
399.034 145.057 li
409.635 145.057 li
409.635 144.28 li
cp
f
376.771 162.605 mo
383.28 162.605 li
378.816 170.258 li
383.984 170.258 li
373.88 179.559 li
377.519 170.258 li
373.649 170.258 li
376.771 162.605 li
cp
.905882 .337255 .262745 rgb
f
407.862 137.547 mo
404.335 137.547 li
400.807 137.547 li
400.18 144.28 li
404.335 144.28 li
408.489 144.28 li
407.862 137.547 li
cp
.956863 .603922 .133333 rgb
f
356.826 137.547 mo
353.298 137.547 li
349.771 137.547 li
349.144 144.28 li
353.298 144.28 li
357.453 144.28 li
356.826 137.547 li
cp
.690196 .823529 .827451 rgb
f
347.998 144.28 mo
358.599 144.28 li
358.599 145.057 li
347.998 145.057 li
347.998 144.28 li
cp
.368627 .619608 .654902 rgb
f
354.147 147.767 mo
352.45 147.767 li
352.45 145.057 li
354.147 145.057 li
354.147 147.767 li
cp
.0588235 .219608 .345098 rgb
f
354.829 147.767 mo
354.147 147.767 li
354.147 145.057 li
354.829 145.057 li
354.829 147.767 li
cp
.254902 .372549 .47451 rgb
f
352.45 147.767 mo
351.767 147.767 li
351.767 145.057 li
352.45 145.057 li
352.45 147.767 li
cp
f
379.665 147.767 mo
377.968 147.767 li
377.968 145.057 li
379.665 145.057 li
379.665 147.767 li
cp
.0588235 .219608 .345098 rgb
f
380.348 147.767 mo
379.665 147.767 li
379.665 145.057 li
380.348 145.057 li
380.348 147.767 li
cp
.254902 .372549 .47451 rgb
f
377.968 147.767 mo
377.285 147.767 li
377.285 145.057 li
377.968 145.057 li
377.968 147.767 li
cp
f
405.183 147.767 mo
403.486 147.767 li
403.486 145.057 li
405.183 145.057 li
405.183 147.767 li
cp
.0588235 .219608 .345098 rgb
f
405.866 147.767 mo
405.183 147.767 li
405.183 145.057 li
405.866 145.057 li
405.866 147.767 li
cp
.254902 .372549 .47451 rgb
f
403.486 147.767 mo
402.803 147.767 li
402.803 145.057 li
403.486 145.057 li
403.486 147.767 li
cp
f
59.9746 89.3885 mo
59.9746 83.0154 li
58.993 79.655 li
58.993 71.2458 li
57.5702 69.2155 li
57.5702 51.535 li
68.5194 51.535 li
68.5194 69.2155 li
67.0962 71.2458 li
67.0962 79.655 li
66.1147 83.0154 li
66.1147 89.3885 li
63.0448 91.9563 li
59.9746 89.3885 li
cp
.368627 .619608 .654902 rgb
f
63.0447 51.7595 mo
57.794 51.7595 li
57.794 69.1451 li
59.2172 71.1754 li
59.2172 79.623 li
60.1985 82.9834 li
60.1985 89.2842 li
63.0447 91.6645 li
65.8909 89.2842 li
65.8909 82.9834 li
66.8723 79.623 li
66.8723 71.1754 li
68.2954 69.1451 li
68.2954 51.7595 li
63.0447 51.7595 li
cp
.690196 .823529 .827451 rgb
f
61.5746 80.6985 mo
61.9515 84.1886 li
61.9515 90.522 li
63.0447 91.6645 li
64.1379 90.522 li
64.1379 84.1886 li
64.5148 80.6985 li
64.5148 71.9247 li
64.5148 51.7595 li
63.0447 51.7595 li
61.5746 51.7595 li
61.5746 71.9247 li
61.5746 80.6985 li
cp
.368627 .619608 .654902 rgb
f
61.8779 80.6985 mo
62.177 84.1886 li
62.177 90.522 li
63.0447 91.6645 li
63.9123 90.522 li
63.9123 84.1886 li
64.2114 80.6985 li
64.2114 71.9247 li
64.2114 51.7595 li
63.0447 51.7595 li
61.8779 51.7595 li
61.8779 71.9247 li
61.8779 80.6985 li
cp
.690196 .823529 .827451 rgb
f
69.8265 25.2159 mo
67.061 21.5157 64.1642 21.5157 63.0447 21.5157 cv
61.9252 21.5157 59.0284 21.5157 56.2629 25.2159 cv
55.9236 25.6696 56.4229 26.1593 57.3915 26.0343 cv
58.6801 25.868 60.4346 24.9822 63.0447 24.9714 cv
65.6547 24.9822 67.4092 25.868 68.6979 26.0343 cv
69.6664 26.1593 70.1658 25.6696 69.8265 25.2159 cv
cp
77.4235 49.5197 mo
75.4443 53.1343 68.8808 55.3066 63.0447 55.3066 cv
57.2086 55.3066 50.645 53.1343 48.6658 49.5197 cv
46.1912 45.0002 49.1603 33.682 51.3725 28.3306 cv
53.783 22.4991 57.5469 18.7154 63.0447 18.7154 cv
68.5424 18.7154 72.3063 22.4991 74.7169 28.3306 cv
76.929 33.682 79.8981 45.0002 77.4235 49.5197 cv
cp
.0588235 .219608 .345098 rgb
f
74.6338 40.1639 mo
73.0386 37.2506 67.7485 35.4997 63.0447 35.4997 cv
58.3409 35.4997 53.0508 37.2506 51.4556 40.1639 cv
50.9458 41.095 50.724 42.385 50.704 43.8602 cv
50.724 45.3353 50.9458 46.6255 51.4556 47.5565 cv
53.0508 50.4698 58.3409 52.2206 63.0447 52.2206 cv
67.7485 52.2206 73.0386 50.4698 74.6338 47.5565 cv
75.1436 46.6255 75.3654 45.3353 75.3855 43.8602 cv
75.3654 42.385 75.1436 41.095 74.6338 40.1639 cv
cp
.956863 .603922 .133333 rgb
f
51.9408 40.3187 mo
51.4524 41.2107 51.2398 42.4468 51.2207 43.8602 cv
51.2398 45.2736 51.4524 46.5096 51.9408 47.4018 cv
53.408 50.0812 58.1363 51.7299 62.4996 51.8581 cv
62.4996 35.8623 li
58.1363 35.9904 53.408 37.6391 51.9408 40.3187 cv
cp
.0588235 .219608 .345098 rgb
f
74.1486 40.3187 mo
72.6815 37.6391 67.9532 35.9904 63.59 35.8623 cv
63.59 51.8581 li
67.9531 51.7299 72.6815 50.0812 74.1486 47.4018 cv
74.637 46.5096 74.8496 45.2736 74.8687 43.8602 cv
74.8496 42.4468 74.637 41.2107 74.1486 40.3187 cv
cp
f
65.9384 31.2729 mo
65.9384 32.8711 64.6428 34.1667 63.0447 34.1667 cv
61.4465 34.1667 60.151 32.8711 60.151 31.2729 cv
60.151 29.6747 61.4465 28.3792 63.0447 28.3792 cv
64.6428 28.3792 65.9384 29.6747 65.9384 31.2729 cv
cp
.956863 .603922 .133333 rgb
f
65.5883 31.2729 mo
65.5883 32.6777 64.4495 33.8165 63.0447 33.8165 cv
61.6398 33.8165 60.501 32.6777 60.501 31.2729 cv
60.501 29.8681 61.6398 28.7293 63.0447 28.7293 cv
64.4495 28.7293 65.5883 29.8681 65.5883 31.2729 cv
cp
.254902 .372549 .47451 rgb
f
70.3616 45.47 mo
70.3616 45.7477 70.1365 45.9728 69.8588 45.9728 cv
67.18 45.9728 li
66.9023 45.9728 66.6772 45.7477 66.6772 45.47 cv
66.6772 42.6487 li
70.3616 42.6487 li
70.3616 45.47 li
cp
.905882 .337255 .262745 rgb
f
68.5194 41.5909 mo
69.1037 41.5909 69.5772 42.0644 69.5772 42.6487 cv
69.943 42.6487 li
69.943 41.8625 69.3056 41.2251 68.5194 41.2251 cv
67.7332 41.2251 67.0958 41.8625 67.0958 42.6487 cv
67.4616 42.6487 li
67.4616 42.0644 67.9351 41.5909 68.5194 41.5909 cv
cp
f
59.2924 45.47 mo
59.2924 45.7477 59.0673 45.9728 58.7896 45.9728 cv
56.1107 45.9728 li
55.833 45.9728 55.6079 45.7477 55.6079 45.47 cv
55.6079 42.6487 li
59.2924 42.6487 li
59.2924 45.47 li
cp
.956863 .603922 .133333 rgb
f
59.9412 41.5909 mo
60.5255 41.5909 60.9991 42.0644 60.9991 42.6487 cv
61.3648 42.6487 li
61.3648 41.8625 60.7274 41.2251 59.9412 41.2251 cv
59.1551 41.2251 58.5177 41.8625 58.5177 42.6487 cv
58.8835 42.6487 li
58.8835 42.0644 59.357 41.5909 59.9412 41.5909 cv
cp
f
275.936 133.406 mo
260.512 133.406 248.008 145.909 248.008 161.334 cv
248.008 176.758 260.512 189.262 275.936 189.262 cv
291.36 189.262 303.864 176.758 303.864 161.334 cv
303.864 145.909 291.36 133.406 275.936 133.406 cv
cp
309.035 161.334 mo
309.035 179.614 294.216 194.433 275.936 194.433 cv
257.656 194.433 242.837 179.614 242.837 161.334 cv
242.837 143.053 257.656 128.234 275.936 128.234 cv
294.216 128.234 309.035 143.053 309.035 161.334 cv
cp
.368627 .619608 .654902 rgb
f
278.816 186.471 mo
278.959 185.344 279.185 183.913 279.539 182.339 cv
278.36 182.562 277.158 182.675 275.936 182.675 cv
274.715 182.675 273.512 182.562 272.333 182.339 cv
272.688 183.913 272.913 185.344 273.056 186.471 cv
274.017 186.581 274.98 186.637 275.936 186.637 cv
276.892 186.637 277.855 186.581 278.816 186.471 cv
cp
275.936 180.05 mo
278.646 180.05 281.212 179.396 283.504 178.231 cv
281.739 182.768 281.31 187.512 281.225 188.755 cv
279.512 189.083 277.745 189.262 275.936 189.262 cv
274.127 189.262 272.361 189.083 270.647 188.755 cv
270.562 187.512 270.133 182.768 268.368 178.231 cv
270.66 179.396 273.227 180.05 275.936 180.05 cv
cp
.0588235 .219608 .345098 rgb
f
291.744 153.137 mo
287.287 152.221 281.858 151.482 275.936 151.482 cv
270.014 151.482 264.585 152.221 260.129 153.137 cv
258.994 155.613 258.357 158.394 258.357 161.334 cv
258.357 164.163 258.948 166.846 260.004 169.251 cv
260.347 169.372 260.696 169.5 261.053 169.644 cv
264.687 171.102 266.956 174.599 268.368 178.231 cv
270.66 179.396 273.227 180.05 275.936 180.05 cv
278.646 180.05 281.212 179.396 283.504 178.231 cv
284.917 174.599 287.185 171.102 290.819 169.644 cv
291.177 169.5 291.525 169.372 291.869 169.251 cv
292.925 166.846 293.516 164.163 293.516 161.334 cv
293.516 158.394 292.878 155.613 291.744 153.137 cv
cp
.160784 .180392 .188235 rgb
f
275.936 179.787 mo
273.452 179.787 271.061 179.2 268.829 178.042 cv
267.135 173.581 264.723 170.673 261.659 169.4 cv
261.346 169.27 261.041 169.152 260.739 169.041 cv
259.727 166.616 259.214 164.023 259.214 161.333 cv
259.214 158.543 259.764 155.864 260.849 153.367 cv
265.949 152.291 271.024 151.745 275.936 151.745 cv
280.849 151.745 285.924 152.291 291.023 153.367 cv
292.108 155.864 292.658 158.543 292.658 161.333 cv
292.658 164.023 292.145 166.616 291.133 169.041 cv
290.831 169.152 290.526 169.27 290.213 169.4 cv
287.149 170.673 284.737 173.581 283.043 178.042 cv
280.811 179.2 278.42 179.787 275.936 179.787 cv
cp
.0588235 .219608 .345098 rgb
f
282.244 161.194 mo
282.244 164.678 279.42 167.502 275.936 167.502 cv
272.452 167.502 269.628 164.678 269.628 161.194 cv
269.628 157.71 272.452 154.886 275.936 154.886 cv
279.42 154.886 282.244 157.71 282.244 161.194 cv
cp
.160784 .180392 .188235 rgb
f
281.713 161.194 mo
281.713 164.384 279.126 166.971 275.936 166.971 cv
272.746 166.971 270.159 164.384 270.159 161.194 cv
270.159 158.004 272.746 155.417 275.936 155.417 cv
279.126 155.417 281.713 158.004 281.713 161.194 cv
cp
.956863 .603922 .133333 rgb
f
248.338 161.334 mo
248.338 168.149 250.823 174.395 254.932 179.215 cv
250.8 183.347 li
245.64 177.462 242.507 169.757 242.507 161.334 cv
242.507 154.408 244.624 147.967 248.245 142.624 cv
252.876 146.191 li
250.009 150.541 248.338 155.745 248.338 161.334 cv
cp
.254902 .372549 .47451 rgb
f
303.534 161.334 mo
303.534 168.149 301.049 174.395 296.94 179.215 cv
301.072 183.347 li
306.233 177.462 309.366 169.757 309.366 161.334 cv
309.366 154.408 307.248 147.967 303.627 142.624 cv
298.996 146.191 li
301.863 150.541 303.534 155.745 303.534 161.334 cv
cp
f
298.582 165.382 mo
299.31 165.382 299.971 165.425 300.561 165.494 cv
300.793 164.122 300.909 162.731 300.909 161.333 cv
300.909 160.32 300.847 159.301 300.723 158.29 cv
299.514 157.871 297.799 157.321 295.677 156.757 cv
295.985 158.247 296.14 159.776 296.14 161.333 cv
296.14 162.779 296.006 164.2 295.74 165.589 cv
296.705 165.451 297.654 165.382 298.582 165.382 cv
cp
291.869 169.251 mo
292.925 166.846 293.516 164.163 293.516 161.334 cv
293.516 158.394 292.878 155.613 291.744 153.137 cv
297.472 154.315 301.583 155.781 303.082 156.355 cv
303.377 157.971 303.534 159.634 303.534 161.334 cv
303.534 163.851 303.193 166.29 302.558 168.609 cv
301.497 168.225 297.713 167.188 291.869 169.251 cv
cp
.905882 .337255 .262745 rgb
f
255.732 161.333 mo
255.732 159.776 255.887 158.247 256.195 156.757 cv
254.071 157.321 252.357 157.871 251.149 158.29 cv
251.025 159.3 250.963 160.319 250.963 161.333 cv
250.963 162.731 251.08 164.122 251.311 165.494 cv
251.901 165.425 252.562 165.382 253.29 165.382 cv
254.219 165.382 255.167 165.451 256.132 165.589 cv
255.866 164.2 255.732 162.779 255.732 161.333 cv
cp
249.314 168.609 mo
248.679 166.29 248.338 163.851 248.338 161.334 cv
248.338 159.634 248.495 157.971 248.791 156.355 cv
250.289 155.781 254.4 154.315 260.129 153.137 cv
258.994 155.613 258.357 158.394 258.357 161.334 cv
258.357 164.163 258.948 166.846 260.004 169.251 cv
254.16 167.188 250.375 168.225 249.314 168.609 cv
cp
f
51.71 283.643 mo
48.8831 283.643 li
48.8831 284.887 li
51.71 284.887 li
51.71 283.643 li
cp
.254902 .372549 .47451 rgb
f
51.71 296.534 mo
48.8831 296.534 li
48.8831 297.778 li
51.71 297.778 li
51.71 296.534 li
cp
f
74.3818 283.643 mo
77.2086 283.643 li
77.2086 284.887 li
74.3818 284.887 li
74.3818 283.643 li
cp
f
74.3818 296.534 mo
77.2086 296.534 li
77.2086 297.778 li
74.3818 297.778 li
74.3818 296.534 li
cp
f
63.0459 281.023 mo
57.696 281.023 53.3591 285.36 53.3591 290.71 cv
53.3591 296.06 57.696 300.397 63.0459 300.397 cv
68.3957 300.397 72.7328 296.06 72.7328 290.71 cv
72.7328 285.36 68.3957 281.023 63.0459 281.023 cv
cp
71.1497 290.71 mo
71.1497 295.186 67.5214 298.814 63.0459 298.814 cv
58.5703 298.814 54.9421 295.186 54.9421 290.71 cv
54.9421 286.235 58.5703 282.607 63.0459 282.607 cv
67.5214 282.607 71.1497 286.235 71.1497 290.71 cv
cp
.690196 .823529 .827451 rgb
f
77.4631 288.129 mo
77.4631 284.887 li
77.4631 284.887 75.3429 284.887 74.3252 284.887 cv
73.3076 284.887 69.0389 278.442 67.6254 270.187 cv
66.212 261.932 66.3063 257.183 66.3063 257.183 cv
63.0459 257.183 li
59.7856 257.183 li
59.7856 257.183 59.8797 261.932 58.4663 270.187 cv
57.0529 278.442 52.7843 284.887 51.7665 284.887 cv
50.7489 284.887 48.6286 284.887 48.6286 284.887 cv
48.6286 288.129 li
48.6286 288.129 47.4979 288.882 47.4979 289.711 cv
47.4979 290.07 47.4979 290.71 47.4979 290.71 cv
47.4979 290.71 47.4979 291.351 47.4979 291.709 cv
47.4979 292.538 48.6286 293.292 48.6286 293.292 cv
48.6286 296.534 li
48.6286 296.534 50.7489 296.534 51.7665 296.534 cv
52.2822 296.534 53.0498 297.534 53.2804 297.851 cv
55.4819 300.857 59.035 302.81 63.0459 302.81 cv
67.0567 302.81 70.61 300.857 72.8113 297.851 cv
73.0419 297.534 73.8096 296.534 74.3252 296.534 cv
75.3429 296.534 77.4631 296.534 77.4631 296.534 cv
77.4631 293.292 li
77.4631 293.292 78.5939 292.538 78.5939 291.709 cv
78.5939 291.351 78.5939 290.71 78.5939 290.71 cv
78.5939 290.71 78.5939 290.07 78.5939 289.711 cv
78.5939 288.882 77.4631 288.129 77.4631 288.129 cv
cp
72.7892 290.71 mo
72.7892 296.091 68.427 300.454 63.0459 300.454 cv
57.6647 300.454 53.3025 296.091 53.3025 290.71 cv
53.3025 285.329 57.6647 280.967 63.0459 280.967 cv
68.427 280.967 72.7892 285.329 72.7892 290.71 cv
cp
.0588235 .219608 .345098 rgb
f
66.4536 280.179 mo
66.872 280.241 67.2918 280.075 67.554 279.743 cv
67.8161 279.411 67.8799 278.965 67.7228 278.572 cv
66.6547 275.902 65.8159 273.019 65.3964 270.569 cv
64.5239 265.473 64.2113 261.679 64.1013 259.445 cv
61.9904 259.445 li
61.8805 261.679 61.568 265.473 60.6954 270.569 cv
60.2755 273.021 59.4355 275.907 58.3662 278.579 cv
58.2093 278.971 58.2737 279.417 58.5351 279.749 cv
58.7965 280.08 59.2152 280.248 59.633 280.186 cv
60.9839 279.988 62.5731 279.77 63.0459 279.77 cv
63.585 279.77 65.1347 279.982 66.4536 280.179 cv
cp
.905882 .337255 .262745 rgb
f
50.2965 262.809 mo
50.2965 264.382 li
51.6404 264.382 li
51.6404 262.809 li
51.6404 259.558 53.8548 258.05 56.8702 258.05 cv
56.4041 258.05 55.9502 258.05 55.5263 258.05 cv
52.5109 258.05 50.2965 259.558 50.2965 262.809 cv
cp
.0588235 .219608 .345098 rgb
f
63.0446 234.455 mo
47.1587 234.455 li
47.1587 264.382 li
50.2965 264.382 li
50.2965 262.809 li
50.2965 259.558 52.5109 258.05 55.5263 258.05 cv
58.5417 258.05 63.0446 258.05 63.0446 258.05 cv
63.0446 258.05 67.5475 258.05 70.5629 258.05 cv
73.5783 258.05 75.7927 259.558 75.7927 262.809 cv
75.7927 264.382 li
78.9306 264.382 li
78.9306 234.455 li
63.0446 234.455 li
cp
.690196 .823529 .827451 rgb
f
75.7927 262.809 mo
75.7927 264.382 li
74.4489 264.382 li
74.4489 262.809 li
74.4489 259.558 72.2345 258.05 69.2192 258.05 cv
69.6852 258.05 70.1391 258.05 70.5629 258.05 cv
73.5783 258.05 75.7927 259.558 75.7927 262.809 cv
cp
.0588235 .219608 .345098 rgb
f
63.0446 247.04 mo
60.8148 247.04 59.0071 248.847 59.0071 251.077 cv
59.0071 253.307 60.8148 255.115 63.0446 255.115 cv
65.2745 255.115 67.0821 253.307 67.0821 251.077 cv
67.0821 248.847 65.2745 247.04 63.0446 247.04 cv
cp
67.4546 251.077 mo
67.4546 253.513 65.4802 255.487 63.0446 255.487 cv
60.609 255.487 58.6347 253.513 58.6347 251.077 cv
58.6347 248.642 60.609 246.667 63.0446 246.667 cv
65.4802 246.667 67.4546 248.642 67.4546 251.077 cv
cp
f
78.9306 237.998 mo
47.1587 237.998 li
47.1587 237.093 li
78.9306 237.093 li
78.9306 237.998 li
cp
f
78.9306 239.854 mo
47.1587 239.854 li
47.1587 238.95 li
78.9306 238.95 li
78.9306 239.854 li
cp
f
78.9306 241.711 mo
47.1587 241.711 li
47.1587 240.806 li
78.9306 240.806 li
78.9306 241.711 li
cp
f
378.816 302.81 mo
360.272 302.81 345.185 287.722 345.185 269.178 cv
345.185 250.634 360.272 235.547 378.816 235.547 cv
397.361 235.547 412.448 250.634 412.448 269.178 cv
412.448 287.722 397.361 302.81 378.816 302.81 cv
cp
.439216 .533333 .611765 rgb
f
378.816 302.515 mo
360.405 302.515 345.479 287.59 345.479 269.178 cv
345.479 250.767 360.405 235.841 378.816 235.841 cv
397.228 235.841 412.153 250.767 412.153 269.178 cv
412.153 287.59 397.228 302.515 378.816 302.515 cv
cp
.368627 .619608 .654902 rgb
f
393.778 247.282 mo
391.864 247.282 390.311 248.834 390.311 250.749 cv
390.311 265.711 li
382.283 265.711 li
382.283 250.749 li
382.283 248.834 380.731 247.282 378.816 247.282 cv
376.901 247.282 375.349 248.834 375.349 250.749 cv
375.349 265.711 li
367.321 265.711 li
367.321 250.749 li
367.321 248.834 365.769 247.282 363.854 247.282 cv
361.939 247.282 360.387 248.834 360.387 250.749 cv
360.387 265.711 li
360.387 272.645 li
360.387 287.607 li
360.387 289.522 361.939 291.074 363.854 291.074 cv
365.769 291.074 367.321 289.522 367.321 287.607 cv
367.321 272.645 li
375.349 272.645 li
375.349 287.607 li
375.349 289.522 376.901 291.074 378.816 291.074 cv
380.731 291.074 382.283 289.522 382.283 287.607 cv
382.283 272.645 li
390.311 272.645 li
390.311 287.607 li
390.311 289.522 391.864 291.074 393.778 291.074 cv
395.693 291.074 397.245 289.522 397.245 287.607 cv
397.245 272.645 li
397.245 265.711 li
397.245 250.749 li
397.245 248.834 395.693 247.282 393.778 247.282 cv
cp
.160784 .180392 .188235 rgb
f
393.778 290.78 mo
392.029 290.78 390.606 289.357 390.606 287.607 cv
390.606 272.351 li
381.989 272.351 li
381.989 287.607 li
381.989 289.357 380.566 290.78 378.816 290.78 cv
377.067 290.78 375.644 289.357 375.644 287.607 cv
375.644 272.351 li
367.027 272.351 li
367.027 287.607 li
367.027 289.357 365.603 290.78 363.854 290.78 cv
362.105 290.78 360.682 289.357 360.682 287.607 cv
360.682 250.749 li
360.682 249 362.105 247.577 363.854 247.577 cv
365.603 247.577 367.027 249 367.027 250.749 cv
367.027 266.005 li
375.644 266.005 li
375.644 250.749 li
375.644 249 377.067 247.577 378.816 247.577 cv
380.566 247.577 381.989 249 381.989 250.749 cv
381.989 266.005 li
390.606 266.005 li
390.606 250.749 li
390.606 249 392.029 247.577 393.778 247.577 cv
395.528 247.577 396.951 249 396.951 250.749 cv
396.951 287.607 li
396.951 289.357 395.528 290.78 393.778 290.78 cv
cp
.0588235 .219608 .345098 rgb
f
405.933 279.194 mo
405.933 271.496 400.404 265.256 393.585 265.256 cv
386.765 265.256 381.236 271.496 381.236 279.194 cv
381.236 281.524 381.744 283.72 382.639 285.651 cv
382.639 285.651 li
384.279 289.496 387.62 294.56 389.157 295.249 cv
390.695 295.939 393.585 295.859 393.585 295.859 cv
393.585 295.859 396.474 295.939 398.012 295.249 cv
399.549 294.56 402.89 289.496 404.53 285.651 cv
404.53 285.651 li
405.426 283.72 405.933 281.524 405.933 279.194 cv
cp
.690196 .823529 .827451 rgb
f
402.306 279.095 mo
402.306 284.532 398.401 288.939 393.585 288.939 cv
388.768 288.939 384.863 284.532 384.863 279.095 cv
384.863 273.658 388.768 269.251 393.585 269.251 cv
398.401 269.251 402.306 273.658 402.306 279.095 cv
cp
.0588235 .219608 .345098 rgb
f
396.995 282.526 mo
396.902 282.526 396.827 282.451 396.827 282.358 cv
396.827 279.654 li
396.827 279.561 396.752 279.486 396.659 279.486 cv
394.144 279.486 li
394.051 279.486 393.975 279.561 393.975 279.654 cv
393.975 282.358 li
393.975 282.451 393.9 282.526 393.807 282.526 cv
393.362 282.526 li
393.269 282.526 393.194 282.451 393.194 282.358 cv
393.194 279.654 li
393.194 279.561 393.118 279.486 393.025 279.486 cv
390.51 279.486 li
390.417 279.486 390.342 279.561 390.342 279.654 cv
390.342 282.358 li
390.342 282.451 390.267 282.526 390.174 282.526 cv
389.729 282.526 li
389.636 282.526 389.56 282.451 389.56 282.358 cv
389.56 281.368 389.56 278.643 389.56 278.704 cv
389.56 275.832 li
389.56 275.739 389.636 275.664 389.729 275.664 cv
390.174 275.664 li
390.267 275.664 390.342 275.739 390.342 275.832 cv
390.342 278.536 li
390.342 278.629 390.417 278.704 390.51 278.704 cv
393.025 278.704 li
393.118 278.704 393.194 278.629 393.194 278.536 cv
393.194 275.832 li
393.194 275.739 393.269 275.664 393.362 275.664 cv
393.807 275.664 li
393.9 275.664 393.975 275.739 393.975 275.832 cv
393.975 278.536 li
393.975 278.629 394.051 278.704 394.144 278.704 cv
396.659 278.704 li
396.752 278.704 396.827 278.629 396.827 278.536 cv
396.827 275.832 li
396.827 275.739 396.902 275.664 396.995 275.664 cv
397.441 275.664 li
397.534 275.664 397.609 275.739 397.609 275.832 cv
397.609 282.358 li
397.609 282.451 397.534 282.526 397.441 282.526 cv
396.995 282.526 li
cp
.956863 .603922 .133333 rgb
f
397.283 284.244 mo
397.524 284.244 397.66 284.147 397.66 283.902 cv
397.66 283.682 397.533 283.588 397.25 283.588 cv
397.041 283.588 li
397.041 284.244 li
397.283 284.244 li
cp
397.041 284.524 mo
397.041 285.34 li
396.652 285.34 li
396.652 283.305 li
397.259 283.305 li
397.792 283.305 398.066 283.499 398.066 283.902 cv
398.066 284.18 397.931 284.345 397.654 284.453 cv
398.186 285.34 li
397.739 285.34 li
397.289 284.524 li
397.041 284.524 li
cp
.905882 .337255 .262745 rgb
f
389.946 274.801 mo
389.946 273.198 li
389.504 273.467 li
389.339 273.214 li
389.984 272.818 li
390.317 272.818 li
390.317 274.801 li
389.946 274.801 li
cp
f
394.111 273.287 mo
394.111 273.534 393.958 273.69 393.726 273.752 cv
393.973 273.776 394.176 273.929 394.176 274.235 cv
394.176 274.574 393.911 274.845 393.457 274.845 cv
393.186 274.845 392.969 274.745 392.815 274.56 cv
393.03 274.356 li
393.151 274.491 393.281 274.551 393.436 274.551 cv
393.648 274.551 393.787 274.424 393.787 274.218 cv
393.787 273.982 393.655 273.899 393.431 273.899 cv
393.275 273.899 li
393.319 273.632 li
393.425 273.632 li
393.61 273.632 393.743 273.525 393.743 273.331 cv
393.743 273.169 393.628 273.072 393.451 273.072 cv
393.299 273.072 393.178 273.128 393.054 273.246 cv
392.862 273.037 li
393.039 272.869 393.245 272.783 393.484 272.783 cv
393.894 272.783 394.111 273.014 394.111 273.287 cv
cp
f
397.142 273.099 mo
397.142 273.591 li
397.241 273.54 397.345 273.517 397.442 273.517 cv
397.771 273.517 398.011 273.752 398.011 274.156 cv
398.011 274.563 397.719 274.845 397.271 274.845 cv
396.994 274.845 396.8 274.733 396.646 274.565 cv
396.864 274.362 li
396.971 274.485 397.098 274.554 397.263 274.554 cv
397.483 274.554 397.621 274.412 397.621 274.156 cv
397.621 273.882 397.486 273.788 397.304 273.788 cv
397.212 273.788 397.139 273.809 397.047 273.855 cv
396.779 273.855 li
396.779 272.818 li
397.928 272.818 li
397.884 273.099 li
397.142 273.099 li
cp
f
390.602 283.879 mo
390.602 284.215 390.411 284.459 389.799 285.042 cv
390.646 285.042 li
390.605 285.34 li
389.372 285.34 li
389.372 285.064 li
390.049 284.374 390.214 284.189 390.214 283.908 cv
390.214 283.726 390.099 283.62 389.928 283.62 cv
389.772 283.62 389.669 283.685 389.548 283.829 cv
389.315 283.647 li
389.475 283.44 389.684 283.322 389.958 283.322 cv
390.367 283.322 390.602 283.57 390.602 283.879 cv
cp
f
394.108 284.887 mo
394.108 285.34 li
393.74 285.34 li
393.74 284.887 li
392.898 284.887 li
392.898 284.627 li
393.476 283.319 li
393.796 283.44 li
393.29 284.598 li
393.743 284.598 li
393.781 284.1 li
394.108 284.1 li
394.108 284.598 li
394.347 284.598 li
394.347 284.887 li
394.108 284.887 li
cp
f
202.519 410.767 mo
146.304 410.767 li
146.304 365.318 li
146.304 362.898 148.266 360.935 150.687 360.935 cv
198.137 360.935 li
200.557 360.935 202.519 362.898 202.519 365.318 cv
202.519 410.767 li
cp
.0588235 .219608 .345098 rgb
f
151.782 360.935 mo
150.687 360.935 li
148.266 360.935 146.304 362.898 146.304 365.318 cv
146.304 410.746 li
151.782 410.746 li
151.782 360.935 li
cp
.160784 .180392 .188235 rgb
f
198.137 360.935 mo
197.042 360.935 li
197.042 410.746 li
202.519 410.746 li
202.519 365.318 li
202.519 362.898 200.557 360.935 198.137 360.935 cv
cp
f
164.617 410.746 mo
163.449 410.746 li
163.449 360.935 li
164.617 360.935 li
164.617 410.746 li
cp
.368627 .619608 .654902 rgb
f
189.303 410.746 mo
171.077 410.746 li
171.077 360.935 li
189.303 360.935 li
189.303 410.746 li
cp
f
198.586 414.602 mo
150.238 414.602 li
150.238 410.767 li
198.586 410.767 li
198.586 414.602 li
cp
.690196 .823529 .827451 rgb
f
198.586 415.895 mo
150.238 415.895 li
150.238 414.602 li
198.586 414.602 li
198.586 415.895 li
cp
.254902 .372549 .47451 rgb
f
155.623 384.779 mo
155.623 386.426 156.181 387.072 157.074 387.072 cv
157.986 387.072 158.517 386.426 158.517 384.771 cv
158.517 383.134 157.995 382.478 157.074 382.478 cv
156.163 382.478 155.623 383.134 155.623 384.779 cv
cp
159.747 384.771 mo
159.747 386.789 158.711 387.966 157.074 387.966 cv
155.437 387.966 154.393 386.824 154.393 384.779 cv
154.393 382.771 155.437 381.585 157.074 381.585 cv
158.711 381.585 159.747 382.727 159.747 384.771 cv
cp
.956863 .603922 .133333 rgb
f
160.84 387.833 mo
160.84 381.718 li
162.017 381.718 li
162.017 387.833 li
160.84 387.833 li
cp
f
167.068 386.877 mo
166.936 387.833 li
163.449 387.833 li
163.449 381.718 li
164.617 381.718 li
164.617 386.877 li
167.068 386.877 li
cp
f
171.303 382.585 mo
171.303 384.417 li
173.188 384.417 li
173.188 385.284 li
171.303 385.284 li
171.303 387.833 li
170.135 387.833 li
170.135 381.718 li
173.595 381.718 li
173.471 382.585 li
171.303 382.585 li
cp
f
174.46 387.833 mo
174.46 381.718 li
175.637 381.718 li
175.637 387.833 li
174.46 387.833 li
cp
f
180.688 386.877 mo
180.555 387.833 li
177.068 387.833 li
177.068 381.718 li
178.237 381.718 li
178.237 386.877 li
180.688 386.877 li
cp
f
182.96 382.647 mo
182.96 387.833 li
181.783 387.833 li
181.783 382.647 li
180.137 382.647 li
180.137 381.718 li
184.677 381.718 li
184.553 382.647 li
182.96 382.647 li
cp
f
186.603 382.585 mo
186.603 384.293 li
188.567 384.293 li
188.567 385.16 li
186.603 385.16 li
186.603 386.957 li
189.019 386.957 li
189.019 387.833 li
185.435 387.833 li
185.435 381.718 li
188.983 381.718 li
188.859 382.585 li
186.603 382.585 li
cp
f
192.016 384.541 mo
192.741 384.541 193.148 384.249 193.148 383.515 cv
193.148 382.851 192.768 382.567 191.918 382.567 cv
191.29 382.567 li
191.29 384.541 li
192.016 384.541 li
cp
191.29 385.382 mo
191.29 387.833 li
190.122 387.833 li
190.122 381.718 li
191.945 381.718 li
193.547 381.718 194.37 382.302 194.37 383.515 cv
194.37 384.346 193.962 384.842 193.131 385.169 cv
194.732 387.833 li
193.387 387.833 li
192.033 385.382 li
191.29 385.382 li
cp
f
179.944 188.485 mo
168.879 188.485 li
168.879 173.773 li
179.944 173.773 li
179.944 188.485 li
cp
.0588235 .219608 .345098 rgb
f
179.944 190.315 mo
168.879 190.315 li
168.879 188.485 li
179.944 188.485 li
179.944 190.315 li
cp
f
183.691 172.912 mo
165.132 172.912 li
165.132 168.875 li
183.691 168.875 li
183.691 172.912 li
cp
.690196 .823529 .827451 rgb
f
182.588 168.014 mo
166.236 168.014 li
166.236 165.161 li
182.588 165.161 li
182.588 168.014 li
cp
.905882 .337255 .262745 rgb
f
182.588 157.032 mo
166.236 157.032 li
166.236 156.975 li
166.236 155.699 167.27 154.664 168.547 154.664 cv
180.276 154.664 li
181.553 154.664 182.588 155.699 182.588 156.975 cv
182.588 157.032 li
cp
.368627 .619608 .654902 rgb
f
177.118 191.109 mo
171.705 191.109 li
171.705 190.315 li
177.118 190.315 li
177.118 191.109 li
cp
f
175.745 192.253 mo
173.078 192.253 li
173.078 191.109 li
175.745 191.109 li
175.745 192.253 li
cp
.690196 .823529 .827451 rgb
f
182.544 168.014 mo
166.279 168.014 li
165.183 168.875 li
183.64 168.875 li
182.544 168.014 li
cp
f
182.544 173.773 mo
166.279 173.773 li
165.183 172.912 li
183.64 172.912 li
182.544 173.773 li
cp
.160784 .180392 .188235 rgb
f
180.466 187.652 mo
168.419 188.485 li
168.152 188.102 li
168.365 187.699 li
180.412 186.866 li
180.671 187.227 li
180.466 187.652 li
cp
.368627 .619608 .654902 rgb
f
180.466 186.033 mo
168.419 186.866 li
168.152 186.483 li
168.365 186.08 li
180.412 185.247 li
180.671 185.608 li
180.466 186.033 li
cp
f
180.466 184.413 mo
168.419 185.247 li
168.152 184.864 li
168.365 184.461 li
180.412 183.628 li
180.671 183.989 li
180.466 184.413 li
cp
f
180.466 182.794 mo
168.419 183.628 li
168.152 183.245 li
168.365 182.842 li
180.412 182.009 li
180.671 182.37 li
180.466 182.794 li
cp
f
180.466 181.176 mo
168.419 182.009 li
168.152 181.626 li
168.365 181.223 li
180.412 180.39 li
180.671 180.751 li
180.466 181.176 li
cp
f
180.466 179.556 mo
168.419 180.39 li
168.152 180.007 li
168.365 179.604 li
180.412 178.771 li
180.671 179.132 li
180.466 179.556 li
cp
f
180.466 177.937 mo
168.419 178.771 li
168.152 178.388 li
168.365 177.985 li
180.412 177.152 li
180.671 177.513 li
180.466 177.937 li
cp
f
180.466 176.318 mo
168.419 177.152 li
168.152 176.769 li
168.365 176.366 li
180.412 175.533 li
180.671 175.894 li
180.466 176.318 li
cp
f
180.466 174.699 mo
168.419 175.533 li
168.152 175.15 li
168.365 174.747 li
180.412 173.913 li
180.671 174.275 li
180.466 174.699 li
cp
f
172.135 193.215 mo
171.321 193.215 170.662 192.556 170.662 191.742 cv
170.662 190.315 li
169.444 190.315 li
169.444 192.122 li
169.444 193.398 170.479 194.433 171.755 194.433 cv
176.281 194.433 li
176.281 193.215 li
172.135 193.215 li
cp
f
163.143 162.442 mo
163.143 163.034 li
166.279 165.161 li
182.544 165.161 li
185.68 163.034 li
185.68 162.442 li
163.143 162.442 li
cp
.0588235 .219608 .345098 rgb
f
180.218 144.791 mo
176.347 144.75 172.476 144.75 168.605 144.791 cv
168.954 145.247 168.954 145.703 168.605 146.159 cv
172.476 146.2 176.347 146.2 180.218 146.159 cv
179.87 145.703 179.87 145.247 180.218 144.791 cv
cp
.368627 .619608 .654902 rgb
f
180.218 141.529 mo
176.347 141.488 172.476 141.488 168.605 141.529 cv
168.954 141.985 168.954 142.441 168.605 142.897 cv
172.476 142.938 176.347 142.938 180.218 142.897 cv
179.87 142.441 179.87 141.985 180.218 141.529 cv
cp
f
163.143 159.751 mo
163.143 159.159 li
166.279 157.032 li
182.544 157.032 li
185.68 159.159 li
185.68 159.751 li
163.143 159.751 li
cp
.690196 .823529 .827451 rgb
f
180.218 138.282 mo
176.347 138.241 172.476 138.241 168.605 138.282 cv
168.954 138.738 168.954 139.194 168.605 139.65 cv
172.476 139.691 176.347 139.691 180.218 139.65 cv
179.87 139.194 179.87 138.738 180.218 138.282 cv
cp
.368627 .619608 .654902 rgb
f
180.218 146.159 mo
168.605 146.159 li
168.605 154.664 li
180.218 154.664 li
180.218 146.159 li
cp
.690196 .823529 .827451 rgb
f
180.218 135.035 mo
176.347 134.994 172.476 134.994 168.605 135.035 cv
168.954 135.49 168.954 135.947 168.605 136.402 cv
172.476 136.443 176.347 136.443 180.218 136.402 cv
179.87 135.947 179.87 135.49 180.218 135.035 cv
cp
.368627 .619608 .654902 rgb
f
180.218 131.788 mo
176.347 131.747 172.476 131.747 168.605 131.788 cv
168.954 132.244 168.954 132.7 168.605 133.156 cv
172.476 133.197 176.347 133.197 180.218 133.156 cv
179.87 132.7 179.87 132.244 180.218 131.788 cv
cp
f
180.218 142.897 mo
176.347 142.803 172.476 142.803 168.605 142.897 cv
168.025 143.525 168.025 144.154 168.605 144.783 cv
172.476 144.877 176.347 144.877 180.218 144.783 cv
180.799 144.154 180.799 143.525 180.218 142.897 cv
cp
.690196 .823529 .827451 rgb
f
180.218 139.649 mo
176.347 139.555 172.476 139.555 168.605 139.649 cv
168.025 140.278 168.025 140.906 168.605 141.535 cv
172.476 141.629 176.347 141.629 180.218 141.535 cv
180.799 140.906 180.799 140.278 180.218 139.649 cv
cp
f
180.218 136.402 mo
176.347 136.308 172.476 136.308 168.605 136.402 cv
168.025 137.031 168.025 137.66 168.605 138.288 cv
172.476 138.383 176.347 138.383 180.218 138.288 cv
180.799 137.66 180.799 137.031 180.218 136.402 cv
cp
f
180.218 133.155 mo
176.347 133.06 172.476 133.06 168.605 133.155 cv
168.025 133.783 168.025 134.412 168.605 135.041 cv
172.476 135.135 176.347 135.135 180.218 135.041 cv
180.799 134.412 180.799 133.783 180.218 133.155 cv
cp
f
180.218 131.788 mo
180.218 131.788 179.73 129.88 177.861 129.88 cv
175.993 129.88 174.412 129.88 174.412 129.88 cv
174.412 129.88 li
174.412 129.88 172.83 129.88 170.962 129.88 cv
169.093 129.88 168.605 131.788 168.605 131.788 cv
174.412 131.757 li
180.218 131.788 li
cp
f
180.058 163.034 mo
176.333 163.806 172.49 163.806 168.766 163.034 cv
168.766 161.743 168.766 160.451 168.766 159.159 cv
172.49 158.387 176.333 158.387 180.058 159.159 cv
180.058 160.451 180.058 161.743 180.058 163.034 cv
cp
f
168.766 163.034 mo
166.911 163.806 164.998 163.806 163.143 163.034 cv
163.143 161.743 163.143 160.451 163.143 159.159 cv
164.998 158.387 166.911 158.387 168.766 159.159 cv
168.766 160.451 168.766 161.743 168.766 163.034 cv
cp
.368627 .619608 .654902 rgb
f
180.058 163.034 mo
181.912 163.806 183.826 163.806 185.68 163.034 cv
185.68 161.743 185.68 160.451 185.68 159.159 cv
183.826 158.387 181.912 158.387 180.058 159.159 cv
180.058 160.451 180.058 161.743 180.058 163.034 cv
cp
f
168.264 141.028 mo
180.559 141.028 li
180.683 140.737 180.683 140.447 180.559 140.156 cv
168.264 140.156 li
168.14 140.447 168.14 140.737 168.264 141.028 cv
cp
.956863 .603922 .133333 rgb
f
168.264 137.782 mo
180.559 137.782 li
180.683 137.491 180.683 137.2 180.559 136.909 cv
168.264 136.909 li
168.14 137.2 168.14 137.491 168.264 137.782 cv
cp
f
168.264 134.535 mo
180.559 134.535 li
180.683 134.244 180.683 133.953 180.559 133.663 cv
168.264 133.663 li
168.14 133.953 168.14 134.244 168.264 134.535 cv
cp
f
177.518 129.146 mo
171.306 129.146 li
171.306 125.943 li
177.518 125.943 li
177.518 129.146 li
cp
.0588235 .219608 .345098 rgb
f
177.096 125.325 mo
171.727 125.325 li
171.727 123.32 li
177.096 123.32 li
177.096 125.325 li
cp
f
177.518 120.537 mo
171.305 120.537 li
171.305 122.172 li
177.518 122.172 li
177.518 120.537 li
cp
f
177.518 125.943 mo
171.306 125.943 li
171.72 125.325 li
177.103 125.325 li
177.518 125.943 li
cp
.368627 .619608 .654902 rgb
f
177.518 122.172 mo
171.306 122.172 li
171.72 123.32 li
177.103 123.32 li
177.518 122.172 li
cp
f
177.518 120.537 mo
171.306 120.537 li
171.564 119.822 li
171.658 119.562 171.904 119.39 172.179 119.39 cv
176.644 119.39 li
176.92 119.39 177.166 119.562 177.259 119.822 cv
177.518 120.537 li
cp
f
177.826 129.88 mo
170.997 129.88 li
170.997 129.146 li
177.826 129.146 li
177.826 129.88 li
cp
f
51.1293 356.609 mo
40.6502 356.609 li
40.6502 366.525 li
51.1293 366.525 li
51.1293 356.609 li
cp
.0588235 .219608 .345098 rgb
f
79.108 361.505 mo
76.9678 358.318 67.9525 354.491 63.272 355.029 cv
62.136 355.159 59.8303 356.927 58.1299 358.355 cv
57.6854 358.728 57.4725 359.31 57.5711 359.882 cv
57.6697 360.454 58.065 360.929 58.6087 361.133 cv
74.8964 367.232 li
75.7072 367.536 76.6222 367.254 77.12 366.545 cv
78.1866 365.027 79.7632 362.481 79.108 361.505 cv
cp
79.6229 355.472 mo
84.9343 358.018 88.3246 363.398 88.3246 369.288 cv
88.3246 369.294 li
88.3246 411.172 li
88.3246 413.781 86.2099 415.895 83.6014 415.895 cv
42.4878 415.895 li
39.8793 415.895 37.7647 413.781 37.7647 411.172 cv
37.7647 373.219 li
37.7647 370.686 38.8089 368.263 40.6502 366.525 cv
46.1132 361.367 57.7732 350.79 61.7251 350.581 cv
67.3114 350.286 74.2383 352.89 79.6229 355.472 cv
cp
.368627 .619608 .654902 rgb
f
88.3246 385.28 mo
79.8103 382.526 li
78.8399 382.212 77.8455 382.936 77.8455 383.956 cv
77.8455 387.068 li
88.3246 390.458 li
88.3246 385.28 li
cp
.0588235 .219608 .345098 rgb
f
79.8103 382.526 mo
78.8399 382.212 77.8455 382.936 77.8455 383.956 cv
77.8455 384.569 li
77.8455 383.549 78.8399 382.825 79.8103 383.139 cv
88.3245 385.894 li
88.3245 385.28 li
79.8103 382.526 li
cp
.160784 .180392 .188235 rgb
f
51.1293 355.78 mo
40.6502 355.78 li
40.6502 356.609 li
51.1293 356.609 li
51.1293 355.78 li
cp
f
51.1293 352.789 mo
51.1293 352.119 50.5864 351.576 49.9168 351.576 cv
41.8627 351.576 li
41.1931 351.576 40.6502 352.119 40.6502 352.789 cv
40.6502 355.78 li
51.1293 355.78 li
51.1293 352.789 li
cp
.254902 .372549 .47451 rgb
f
88.3246 394.942 mo
79.8103 392.187 li
78.8399 391.873 77.8455 392.597 77.8455 393.617 cv
77.8455 396.729 li
88.3246 400.119 li
88.3246 394.942 li
cp
.0588235 .219608 .345098 rgb
f
88.3246 404.603 mo
79.8103 401.849 li
78.8399 401.535 77.8455 402.258 77.8455 403.278 cv
77.8455 406.391 li
88.3246 409.78 li
88.3246 404.603 li
cp
f
79.8103 392.19 mo
78.8399 391.876 77.8455 392.599 77.8455 393.619 cv
77.8455 394.232 li
77.8455 393.212 78.8399 392.489 79.8103 392.803 cv
88.3245 395.557 li
88.3245 394.944 li
79.8103 392.19 li
cp
.160784 .180392 .188235 rgb
f
79.8103 401.853 mo
78.8399 401.539 77.8455 402.263 77.8455 403.283 cv
77.8455 403.896 li
77.8455 402.876 78.8399 402.152 79.8103 402.466 cv
88.3245 405.22 li
88.3245 404.607 li
79.8103 401.853 li
cp
f
77.12 366.545 mo
76.6222 367.254 75.7072 367.536 74.8963 367.232 cv
58.6087 361.133 li
58.065 360.929 57.6697 360.454 57.5711 359.882 cv
57.4726 359.31 57.6855 358.728 58.1299 358.355 cv
59.8303 356.927 62.1359 355.159 63.272 355.029 cv
67.9525 354.491 76.9678 358.318 79.108 361.505 cv
79.7632 362.481 78.1866 365.027 77.12 366.545 cv
cp
88.3246 369.288 mo
88.3246 363.398 84.9343 358.018 79.6229 355.472 cv
74.2383 352.89 67.3114 350.286 61.7251 350.581 cv
58.5914 350.747 50.6128 357.431 44.7187 362.763 cv
88.3246 379.153 li
88.3246 369.294 li
88.3246 369.288 li
cp
.690196 .823529 .827451 rgb
f
75.0056 407.282 mo
75.0056 409.145 73.4958 410.655 71.6333 410.655 cv
47.2845 410.655 li
45.4221 410.655 43.9123 409.145 43.9123 407.282 cv
43.9123 376.761 li
43.9123 374.898 45.4221 373.388 47.2845 373.388 cv
71.6333 373.388 li
73.4958 373.388 75.0056 374.898 75.0056 376.761 cv
75.0056 407.282 li
cp
f
59.4589 377.243 mo
59.4589 377.243 48.503 389.063 48.503 396.859 cv
48.503 402.91 53.4081 407.815 59.4589 407.815 cv
65.5097 407.815 70.4147 402.91 70.4147 396.859 cv
70.4147 389.063 59.4589 377.243 59.4589 377.243 cv
cp
.956863 .603922 .133333 rgb
f
50.9766 393.246 mo
50.8267 390.838 li
50.7764 389.988 50.7349 389.097 50.7515 388.489 cv
49.7017 392.621 li
48.6606 392.621 li
47.5439 388.48 li
47.5771 389.256 47.5605 390.047 47.5107 390.872 cv
47.3691 393.246 li
46.3027 393.246 li
46.7607 387.489 li
48.1772 387.489 li
49.2021 391.522 li
50.1685 387.489 li
51.6016 387.489 li
52.0513 393.246 li
50.9766 393.246 li
cp
.0588235 .219608 .345098 rgb
f
53.9619 390.372 mo
53.9619 391.922 54.4868 392.529 55.3286 392.529 cv
56.1865 392.529 56.6865 391.922 56.6865 390.363 cv
56.6865 388.822 56.1948 388.206 55.3286 388.206 cv
54.4702 388.206 53.9619 388.822 53.9619 390.372 cv
cp
57.8442 390.363 mo
57.8442 392.263 56.8696 393.371 55.3286 393.371 cv
53.7871 393.371 52.8042 392.296 52.8042 390.372 cv
52.8042 388.48 53.7871 387.364 55.3286 387.364 cv
56.8696 387.364 57.8442 388.439 57.8442 390.363 cv
cp
f
60.7891 388.364 mo
60.7891 393.246 li
59.6807 393.246 li
59.6807 388.364 li
58.1313 388.364 li
58.1313 387.489 li
62.4053 387.489 li
62.2886 388.364 li
60.7891 388.364 li
cp
f
63.6758 390.372 mo
63.6758 391.922 64.2007 392.529 65.0425 392.529 cv
65.9004 392.529 66.4004 391.922 66.4004 390.363 cv
66.4004 388.822 65.9087 388.206 65.0425 388.206 cv
64.1841 388.206 63.6758 388.822 63.6758 390.372 cv
cp
67.5581 390.363 mo
67.5581 392.263 66.5835 393.371 65.0425 393.371 cv
63.501 393.371 62.5181 392.296 62.5181 390.372 cv
62.5181 388.48 63.501 387.364 65.0425 387.364 cv
66.5835 387.364 67.5581 388.439 67.5581 390.363 cv
cp
f
70.3691 390.147 mo
71.0527 390.147 71.4355 389.872 71.4355 389.181 cv
71.4355 388.556 71.0776 388.289 70.2778 388.289 cv
69.686 388.289 li
69.686 390.147 li
70.3691 390.147 li
cp
69.686 390.939 mo
69.686 393.246 li
68.5864 393.246 li
68.5864 387.489 li
70.3027 387.489 li
71.8105 387.489 72.5854 388.039 72.5854 389.181 cv
72.5854 389.964 72.2021 390.43 71.4189 390.738 cv
72.9272 393.246 li
71.6606 393.246 li
70.3862 390.939 li
69.686 390.939 li
cp
f
54.7651 400.361 mo
54.7651 401.911 55.29 402.519 56.1318 402.519 cv
56.9897 402.519 57.4897 401.911 57.4897 400.353 cv
57.4897 398.811 56.998 398.195 56.1318 398.195 cv
55.2734 398.195 54.7651 398.811 54.7651 400.361 cv
cp
58.6479 400.353 mo
58.6479 402.252 57.6729 403.36 56.1318 403.36 cv
54.5903 403.36 53.6074 402.285 53.6074 400.361 cv
53.6074 398.47 54.5903 397.353 56.1318 397.353 cv
57.6729 397.353 58.6479 398.428 58.6479 400.353 cv
cp
f
59.6758 403.235 mo
59.6758 397.478 li
60.7837 397.478 li
60.7837 403.235 li
59.6758 403.235 li
cp
f
65.5391 402.336 mo
65.4141 403.235 li
62.1313 403.235 li
62.1313 397.478 li
63.231 397.478 li
63.231 402.336 li
65.5391 402.336 li
cp
f
50.4057 354.606 mo
50.2257 352.031 li
50.2197 351.945 50.1484 351.879 50.0625 351.879 cv
49.733 351.879 li
49.6471 351.879 49.5758 351.945 49.5698 352.031 cv
49.3898 354.606 li
48.4017 354.606 li
48.2217 352.031 li
48.2157 351.945 48.1444 351.879 48.0584 351.879 cv
47.729 351.879 li
47.6431 351.879 47.5718 351.945 47.5658 352.031 cv
47.3858 354.606 li
46.3976 354.606 li
46.2177 352.031 li
46.2117 351.945 46.1404 351.879 46.0545 351.879 cv
45.725 351.879 li
45.6391 351.879 45.5678 351.945 45.5618 352.031 cv
45.3818 354.606 li
44.3937 354.606 li
44.2137 352.031 li
44.2077 351.945 44.1364 351.879 44.0504 351.879 cv
43.721 351.879 li
43.6351 351.879 43.5638 351.945 43.5578 352.031 cv
43.3778 354.606 li
42.3896 354.606 li
42.2097 352.031 li
42.2037 351.945 42.1324 351.879 42.0464 351.879 cv
41.717 351.879 li
41.6311 351.879 41.5597 351.945 41.5538 352.031 cv
41.3738 354.606 li
40.3075 354.606 li
40.3075 355.78 li
51.472 355.78 li
51.472 354.606 li
50.4057 354.606 li
cp
.203922 .278431 .423529 rgb
f
296.769 271.517 mo
255.103 271.517 li
255.103 267.646 li
296.769 267.646 li
296.769 271.517 li
cp
.690196 .823529 .827451 rgb
f
253.042 265.584 mo
253.042 269.582 li
253.042 273.579 li
255.103 271.517 li
255.103 269.582 li
255.103 267.646 li
253.042 265.584 li
cp
.368627 .619608 .654902 rgb
f
242.708 272.942 mo
242.708 273.294 242.993 273.579 243.345 273.579 cv
253.042 273.579 li
253.042 265.584 li
243.345 265.584 li
242.993 265.584 242.708 265.869 242.708 266.221 cv
242.708 272.942 li
cp
.690196 .823529 .827451 rgb
f
298.83 265.584 mo
298.83 269.582 li
298.83 273.579 li
296.769 271.517 li
296.769 269.582 li
296.769 267.646 li
298.83 265.584 li
cp
.368627 .619608 .654902 rgb
f
308.528 273.579 mo
298.83 273.579 li
298.83 265.584 li
308.528 265.584 li
308.879 265.584 309.164 265.869 309.164 266.221 cv
309.164 272.942 li
309.164 273.294 308.879 273.579 308.528 273.579 cv
cp
.690196 .823529 .827451 rgb
f
274 290.415 mo
274 248.749 li
277.872 248.749 li
277.872 290.415 li
274 290.415 li
cp
f
279.933 246.687 mo
275.936 246.687 li
271.939 246.687 li
274 248.749 li
275.936 248.749 li
277.872 248.749 li
279.933 246.687 li
cp
.368627 .619608 .654902 rgb
f
272.575 236.354 mo
272.224 236.354 271.939 236.639 271.939 236.99 cv
271.939 246.687 li
279.933 246.687 li
279.933 236.99 li
279.933 236.639 279.648 236.354 279.297 236.354 cv
272.575 236.354 li
cp
.690196 .823529 .827451 rgb
f
279.933 292.476 mo
275.936 292.476 li
271.939 292.476 li
274 290.415 li
275.936 290.415 li
277.872 290.415 li
279.933 292.476 li
cp
.368627 .619608 .654902 rgb
f
271.939 302.173 mo
271.939 292.476 li
279.933 292.476 li
279.933 302.173 li
279.933 302.525 279.648 302.81 279.297 302.81 cv
272.575 302.81 li
272.224 302.81 271.939 302.525 271.939 302.173 cv
cp
.690196 .823529 .827451 rgb
f
281.52 269.582 mo
281.52 272.665 279.02 275.165 275.936 275.165 cv
272.852 275.165 270.352 272.665 270.352 269.582 cv
270.352 266.498 272.852 263.998 275.936 263.998 cv
279.02 263.998 281.52 266.498 281.52 269.582 cv
cp
.368627 .619608 .654902 rgb
f
280.068 269.582 mo
280.068 271.863 278.218 273.713 275.936 273.713 cv
273.654 273.713 271.804 271.863 271.804 269.582 cv
271.804 267.3 273.654 265.45 275.936 265.45 cv
278.218 265.45 280.068 267.3 280.068 269.582 cv
cp
.0588235 .219608 .345098 rgb
f
279.669 269.582 mo
279.669 271.643 277.997 273.314 275.936 273.314 cv
273.875 273.314 272.203 271.643 272.203 269.582 cv
272.203 267.52 273.875 265.849 275.936 265.849 cv
277.997 265.849 279.669 267.52 279.669 269.582 cv
cp
.690196 .823529 .827451 rgb
f
279.056 269.582 mo
279.056 271.305 277.659 272.701 275.936 272.701 cv
274.213 272.701 272.817 271.305 272.817 269.582 cv
272.817 267.859 274.213 266.462 275.936 266.462 cv
277.659 266.462 279.056 267.859 279.056 269.582 cv
cp
.905882 .337255 .262745 rgb
f
354.2 33.9434 mo
387.294 67.0369 li
385.159 69.172 li
352.065 36.0785 li
354.2 33.9434 li
cp
.690196 .823529 .827451 rgb
f
354.342 34.0853 mo
352.457 31.3104 li
349.156 29.4332 li
348.356 30.2337 li
347.555 31.0344 li
349.432 34.3351 li
352.207 36.2203 li
352.207 36.2203 356.06 38.9697 356.576 38.4538 cv
357.091 37.9377 354.342 34.0853 354.342 34.0853 cv
cp
.368627 .619608 .654902 rgb
f
349.156 29.4332 mo
348.356 30.2337 li
347.555 31.0344 li
349.432 34.3351 li
352.457 31.3104 li
349.156 29.4332 li
cp
.207843 .247059 .282353 rgb
f
407.951 80.5413 mo
406.429 79.02 401.439 74.0293 399.117 71.7074 cv
396.795 69.3855 394.402 69.3766 389.989 65.9694 cv
385.615 62.592 384.127 59.1016 384.127 59.1016 cv
380.675 62.5534 li
377.223 66.0049 li
377.223 66.0049 380.714 67.4937 384.091 71.8675 cv
387.498 76.28 387.507 78.673 389.829 80.9949 cv
392.151 83.3169 397.142 88.3075 398.663 89.8288 cv
400.184 91.35 403.84 93.7786 407.87 89.7487 cv
411.9 85.7188 409.472 82.0624 407.951 80.5413 cv
cp
f
406.907 82.9654 mo
405.503 80.9998 391.062 68.706 388.945 70.8233 cv
388.945 70.8233 li
388.945 70.8233 li
388.945 70.8233 li
388.945 70.8233 li
386.828 72.9405 399.122 87.3814 401.087 88.7854 cv
403.08 90.2088 404.994 88.7223 405.919 87.7971 cv
406.844 86.8719 408.33 84.9581 406.907 82.9654 cv
cp
.956863 .603922 .133333 rgb
f
384.127 59.1016 mo
383.379 58.3543 li
380.248 57.8562 li
379.18 58.9237 li
376.895 56.6383 li
374.76 58.7734 li
377.046 61.0588 li
375.978 62.1263 li
376.476 65.2577 li
377.223 66.005 li
377.223 66.0049 li
377.223 66.0049 378.156 66.4061 379.519 67.3902 cv
385.512 61.3971 li
384.528 60.0341 384.127 59.1016 384.127 59.1016 cv
cp
.368627 .619608 .654902 rgb
f
351.665 80.7419 mo
353.823 78.584 357.322 78.584 359.48 80.7419 cv
361.638 82.8998 361.637 86.3985 359.48 88.5565 cv
357.322 90.7144 353.823 90.7144 351.665 88.5565 cv
349.507 86.3986 349.507 82.8998 351.665 80.7419 cv
cp
350.443 89.7787 mo
353.276 92.6117 357.869 92.6117 360.702 89.7787 cv
363.953 86.5274 363.371 81.2511 368.92 75.702 cv
390.861 53.7609 li
396.41 48.2117 401.376 48.1269 405.594 46.199 cv
409.106 43.5833 410.271 36.3066 408.169 34.0412 cv
404.045 41.3261 li
400.682 41.1385 398.547 39.7446 396.408 37.0782 cv
400.444 29.5758 li
398.26 29.2172 394.772 30.3581 391.773 35.2839 cv
390.107 39.9377 392.01 43.8115 386.461 49.3606 cv
364.52 71.3017 li
358.97 76.8509 353.694 76.2683 350.443 79.5196 cv
347.61 82.3526 347.61 86.9458 350.443 89.7787 cv
cp
.690196 .823529 .827451 rgb
f
364.719 73.7796 mo
364.366 73.4273 364.366 72.856 364.719 72.5037 cv
387.665 49.5568 li
388.018 49.2044 388.589 49.2044 388.941 49.5568 cv
390.664 51.2794 li
391.016 51.6318 391.016 52.2031 390.664 52.5554 cv
367.718 75.5023 li
367.365 75.8547 366.794 75.8547 366.442 75.5023 cv
364.719 73.7796 li
cp
.368627 .619608 .654902 rgb
f
350.609 84.8419 mo
350.604 84.7133 350.604 84.5851 350.609 84.4565 cv
351.582 83.58 li
351.175 82.3262 li
351.233 82.2156 351.3 82.1082 351.367 82.0014 cv
352.651 81.7279 li
352.924 80.4437 li
353.031 80.3764 353.139 80.3102 353.249 80.2518 cv
354.503 80.6586 li
355.38 79.6859 li
355.508 79.6809 355.637 79.6809 355.765 79.6859 cv
356.642 80.6586 li
357.895 80.2518 li
358.006 80.3102 358.113 80.3764 358.22 80.4437 cv
358.494 81.7279 li
359.778 82.0014 li
359.845 82.1082 359.911 82.2156 359.97 82.3262 cv
359.563 83.5799 li
360.536 84.4565 li
360.541 84.5851 360.541 84.7133 360.536 84.8419 cv
359.563 85.7184 li
359.97 86.9722 li
359.911 87.0828 359.845 87.1902 359.778 87.297 cv
358.494 87.5705 li
358.22 88.8546 li
358.113 88.922 358.006 88.9881 357.895 89.0466 cv
356.642 88.6397 li
355.765 89.6126 li
355.637 89.6175 355.508 89.6175 355.38 89.6126 cv
354.503 88.6397 li
353.249 89.0466 li
353.139 88.9881 353.031 88.922 352.924 88.8546 cv
352.651 87.5705 li
351.367 87.297 li
351.3 87.1902 351.233 87.0828 351.175 86.9722 cv
351.582 85.7184 li
350.609 84.8419 li
cp
359.48 88.5565 mo
361.637 86.3986 361.637 82.8998 359.48 80.7419 cv
357.322 78.584 353.823 78.584 351.665 80.7419 cv
349.507 82.8998 349.507 86.3986 351.665 88.5565 cv
353.823 90.7144 357.322 90.7144 359.48 88.5565 cv
cp
.207843 .247059 .282353 rgb
f
168.609 48.7032 mo
168.609 90.0449 li
168.609 90.5727 175.788 91.9563 184.643 91.9563 cv
193.498 91.9563 200.676 90.5727 200.676 90.0449 cv
200.676 48.7032 li
168.609 48.7032 li
cp
.254902 .372549 .47451 rgb
f
168.609 83.8145 mo
168.609 85.8449 li
179.276 86.8224 190.01 86.8224 200.676 85.8449 cv
200.676 83.8145 li
190.01 84.8034 179.276 84.8034 168.609 83.8145 cv
cp
.0588235 .219608 .345098 rgb
f
192.492 44.553 mo
190.749 43.9766 190.271 42.4027 190.271 42.4027 cv
184.643 42.4027 li
179.014 42.4027 li
179.014 42.4027 178.536 43.9766 176.793 44.553 cv
174.602 45.2774 168.609 45.022 168.609 48.7032 cv
184.643 48.7032 li
200.676 48.7032 li
200.676 45.022 194.683 45.2774 192.492 44.553 cv
cp
f
190.271 42.4027 mo
184.643 42.4027 li
179.014 42.4027 li
179.014 42.4027 178.543 43.9462 176.84 44.5353 cv
184.643 44.5353 li
192.446 44.5353 li
190.742 43.9462 190.271 42.4027 190.271 42.4027 cv
cp
.254902 .372549 .47451 rgb
f
190.258 36.5094 mo
179.014 36.5094 li
179.014 42.4027 li
190.258 42.4027 li
190.258 36.5094 li
cp
.956863 .603922 .133333 rgb
f
190.258 36.5094 mo
179.014 36.5094 li
179.014 37.6244 li
190.258 37.6244 li
190.258 36.5094 li
cp
.160784 .180392 .188235 rgb
f
179.014 37.1466 mo
176.319 37.1466 li
176.319 41.7656 li
179.014 41.7656 li
179.014 37.1466 li
cp
f
176.319 38.2349 mo
166.827 38.2349 li
166.827 40.6772 li
176.319 40.6772 li
176.319 38.2349 li
cp
.368627 .619608 .654902 rgb
f
168.408 37.1554 mo
166.827 37.1554 li
166.827 41.7568 li
168.408 41.7568 li
168.408 37.1554 li
cp
.160784 .180392 .188235 rgb
f
166.827 36.4652 mo
142.823 31.6426 li
142.823 47.2697 li
166.827 42.447 li
166.827 36.4652 li
cp
.905882 .337255 .262745 rgb
f
179.014 36.5094 mo
179.014 33.7663 li
179.014 33.7663 186.766 33.7663 189.951 33.7663 cv
197.172 33.7663 204.774 37.8222 205.673 38.7217 cv
206.573 39.6211 205.409 42.7768 204.681 42.0488 cv
203.953 41.3208 203.296 39.8543 200.11 38.7217 cv
196.924 37.589 194.21 36.5094 190.258 36.5094 cv
186.306 36.5094 179.014 36.5094 179.014 36.5094 cv
cp
.368627 .619608 .654902 rgb
f
204.658 22.776 mo
203.809 23.1477 179.67 30.774 179.086 31.3581 cv
178.502 31.9421 179.014 33.7663 179.014 33.7663 cv
183.664 35.9178 li
183.899 36.1946 184.245 36.3738 184.636 36.3738 cv
185.028 36.3738 185.373 36.1945 185.608 35.9178 cv
185.609 35.9178 li
185.609 35.9168 li
185.734 35.7691 185.827 35.5949 185.875 35.4009 cv
186.35 34.5223 187.411 32.7576 188.624 32.0142 cv
190.27 31.0054 197.862 28.2977 201.34 26.5722 cv
204.817 24.8467 205.508 22.4044 204.658 22.776 cv
cp
.690196 .823529 .827451 rgb
f
185.431 35.0936 mo
185.431 35.5326 185.075 35.8885 184.636 35.8885 cv
184.197 35.8885 183.841 35.5326 183.841 35.0936 cv
183.841 34.6546 184.197 34.2987 184.636 34.2987 cv
185.075 34.2987 185.431 34.6546 185.431 35.0936 cv
cp
.160784 .180392 .188235 rgb
f
146.19 46.5932 mo
145.057 46.8207 li
145.057 32.0915 li
146.19 32.319 li
146.19 46.5932 li
cp
f
95.9177 161.56 mo
95.9177 179.715 81.2 194.433 63.0447 194.433 cv
44.8894 194.433 30.1716 179.715 30.1716 161.56 cv
30.1716 143.404 44.8894 128.687 63.0447 128.687 cv
81.2 128.687 95.9177 143.404 95.9177 161.56 cv
cp
.0588235 .219608 .345098 rgb
f
91.9376 161.56 mo
91.9376 177.517 79.0018 190.453 63.0447 190.453 cv
47.0876 190.453 34.1518 177.517 34.1518 161.56 cv
34.1518 145.603 47.0876 132.667 63.0447 132.667 cv
79.0018 132.667 91.9376 145.603 91.9376 161.56 cv
cp
.690196 .823529 .827451 rgb
f
62.7022 138.849 mo
63.3872 138.849 li
63.3872 133.349 li
62.7022 133.349 li
62.7022 138.849 li
cp
.0588235 .219608 .345098 rgb
f
60.6659 133.938 mo
60.8434 136.193 li
61.2507 136.161 li
61.0732 133.906 li
60.6659 133.938 li
cp
f
58.5061 134.21 mo
58.8599 136.444 li
59.2635 136.38 li
58.9097 134.146 li
58.5061 134.21 li
cp
f
56.3743 134.651 mo
56.9023 136.85 li
57.2996 136.755 li
56.7716 134.555 li
56.3743 134.651 li
cp
f
54.2836 135.257 mo
54.9825 137.408 li
55.3711 137.282 li
54.6722 135.131 li
54.2836 135.257 li
cp
f
50.2768 136.951 mo
51.3036 138.967 li
51.6678 138.781 li
50.6409 136.766 li
50.2768 136.951 li
cp
f
48.3853 138.029 mo
49.5672 139.957 li
49.9155 139.744 li
48.7337 137.816 li
48.3853 138.029 li
cp
f
46.5843 139.252 mo
47.9138 141.081 li
48.2444 140.841 li
46.9149 139.012 li
46.5843 139.252 li
cp
f
46.6645 142.066 mo
45.1955 140.346 li
44.8848 140.612 li
46.3537 142.332 li
46.6645 142.066 li
cp
f
43.8167 144.869 mo
42.0967 143.4 li
41.8314 143.711 li
43.5513 145.18 li
43.8167 144.869 li
cp
f
42.5665 146.429 mo
40.7365 145.099 li
40.4963 145.43 li
42.3262 146.76 li
42.5665 146.429 li
cp
f
41.4424 148.082 mo
39.5138 146.9 li
39.3003 147.249 li
41.2289 148.431 li
41.4424 148.082 li
cp
f
40.4516 149.819 mo
38.4362 148.792 li
38.2507 149.156 li
40.2661 150.183 li
40.4516 149.819 li
cp
f
38.893 153.498 mo
36.7419 152.799 li
36.6155 153.187 li
38.7667 153.886 li
38.893 153.498 li
cp
f
38.335 155.417 mo
36.1355 154.889 li
36.0402 155.287 li
38.2395 155.815 li
38.335 155.417 li
cp
f
37.9291 157.375 mo
35.6952 157.021 li
35.6313 157.425 li
37.8652 157.779 li
37.9291 157.375 li
cp
f
37.6783 159.358 mo
35.4234 159.181 li
35.3913 159.588 li
37.6462 159.766 li
37.6783 159.358 li
cp
f
37.6462 163.354 mo
35.3913 163.531 li
35.4234 163.939 li
37.6783 163.761 li
37.6462 163.354 li
cp
f
37.8652 165.341 mo
35.6313 165.695 li
35.6952 166.098 li
37.9291 165.745 li
37.8652 165.341 li
cp
f
38.2395 167.305 mo
36.0402 167.833 li
36.1355 168.23 li
38.335 167.702 li
38.2395 167.305 li
cp
f
38.7667 169.233 mo
36.6155 169.932 li
36.7419 170.321 li
38.893 169.622 li
38.7667 169.233 li
cp
f
40.2661 172.937 mo
38.2507 173.964 li
38.4362 174.328 li
40.4516 173.301 li
40.2661 172.937 li
cp
f
41.2289 174.689 mo
39.3003 175.871 li
39.5138 176.219 li
41.4424 175.037 li
41.2289 174.689 li
cp
f
42.3262 176.36 mo
40.4963 177.69 li
40.7365 178.02 li
42.5665 176.691 li
42.3262 176.36 li
cp
f
43.5513 177.94 mo
41.8314 179.409 li
42.0967 179.72 li
43.8167 178.251 li
43.5513 177.94 li
cp
f
82.2727 178.251 mo
83.9926 179.72 li
84.258 179.409 li
82.5381 177.94 li
82.2727 178.251 li
cp
f
83.523 176.691 mo
85.3528 178.02 li
85.593 177.69 li
83.7632 176.36 li
83.523 176.691 li
cp
f
84.647 175.037 mo
86.5755 176.219 li
86.7891 175.871 li
84.8605 174.689 li
84.647 175.037 li
cp
f
85.6378 173.301 mo
87.6531 174.328 li
87.8386 173.964 li
85.8233 172.937 li
85.6378 173.301 li
cp
f
87.1964 169.622 mo
89.3475 170.321 li
89.4738 169.932 li
87.3226 169.233 li
87.1964 169.622 li
cp
f
87.7544 167.702 mo
89.9539 168.23 li
90.0492 167.833 li
87.8499 167.305 li
87.7544 167.702 li
cp
f
88.1602 165.745 mo
90.3942 166.098 li
90.4582 165.695 li
88.2242 165.341 li
88.1602 165.745 li
cp
f
88.4111 163.761 mo
90.666 163.939 li
90.6981 163.531 li
88.4432 163.354 li
88.4111 163.761 li
cp
f
88.4432 159.766 mo
90.6981 159.588 li
90.666 159.181 li
88.4111 159.358 li
88.4432 159.766 li
cp
f
88.2242 157.779 mo
90.4582 157.425 li
90.3942 157.021 li
88.1602 157.375 li
88.2242 157.779 li
cp
f
87.8499 155.815 mo
90.0492 155.287 li
89.9539 154.889 li
87.7544 155.417 li
87.8499 155.815 li
cp
f
87.3226 153.886 mo
89.4738 153.187 li
89.3475 152.799 li
87.1964 153.498 li
87.3226 153.886 li
cp
f
85.8233 150.183 mo
87.8386 149.156 li
87.6531 148.792 li
85.6378 149.819 li
85.8233 150.183 li
cp
f
84.8605 148.431 mo
86.7891 147.249 li
86.5755 146.9 li
84.647 148.082 li
84.8605 148.431 li
cp
f
83.7632 146.76 mo
85.593 145.43 li
85.3528 145.099 li
83.523 146.429 li
83.7632 146.76 li
cp
f
82.5381 145.18 mo
84.258 143.711 li
83.9926 143.4 li
82.2727 144.869 li
82.5381 145.18 li
cp
f
79.7356 142.332 mo
81.2046 140.612 li
80.8939 140.346 li
79.4249 142.066 li
79.7356 142.332 li
cp
f
79.1744 139.012 mo
77.8449 140.841 li
78.1756 141.081 li
79.5051 139.252 li
79.1744 139.012 li
cp
f
76.1738 139.744 mo
76.5223 139.957 li
77.7041 138.029 li
77.3557 137.816 li
76.1738 139.744 li
cp
f
74.4217 138.781 mo
74.7857 138.967 li
75.8127 136.951 li
75.4486 136.766 li
74.4217 138.781 li
cp
f
71.4173 135.131 mo
70.7183 137.282 li
71.1069 137.408 li
71.8058 135.257 li
71.4173 135.131 li
cp
f
68.7898 136.755 mo
69.1871 136.85 li
69.7151 134.651 li
69.3178 134.555 li
68.7898 136.755 li
cp
f
66.8258 136.38 mo
67.2295 136.444 li
67.5833 134.21 li
67.1797 134.146 li
66.8258 136.38 li
cp
f
64.8386 136.161 mo
65.2461 136.193 li
65.4235 133.938 li
65.0161 133.906 li
64.8386 136.161 li
cp
f
51.9323 135.627 mo
54.0373 140.709 li
54.6701 140.447 li
52.5652 135.365 li
51.9323 135.627 li
cp
f
42.8542 141.854 mo
46.7436 145.743 li
47.2279 145.259 li
43.3386 141.369 li
42.8542 141.854 li
cp
f
42.1937 152.552 mo
37.1121 150.447 li
36.8499 151.08 li
41.9316 153.185 li
42.1937 152.552 li
cp
f
40.3339 161.217 mo
34.8336 161.217 li
34.8336 161.902 li
40.3339 161.902 li
40.3339 161.217 li
cp
f
41.9316 169.934 mo
36.8499 172.039 li
37.1121 172.672 li
42.1937 170.567 li
41.9316 169.934 li
cp
f
42.8542 181.266 mo
43.3386 181.75 li
47.2279 177.861 li
46.7436 177.377 li
42.8542 181.266 li
cp
f
78.8615 177.861 mo
82.7508 181.75 li
83.2352 181.266 li
79.3458 177.377 li
78.8615 177.861 li
cp
f
83.8957 170.567 mo
88.9773 172.672 li
89.2395 172.039 li
84.1577 169.934 li
83.8957 170.567 li
cp
f
85.7554 161.217 mo
85.7554 161.902 li
91.2558 161.902 li
91.2558 161.217 li
85.7554 161.217 li
cp
f
84.1577 153.185 mo
89.2395 151.08 li
88.9773 150.447 li
83.8957 152.552 li
84.1577 153.185 li
cp
f
79.3458 145.743 mo
83.2352 141.854 li
82.7508 141.369 li
78.8615 145.259 li
79.3458 145.743 li
cp
f
71.4193 140.447 mo
72.0521 140.709 li
74.157 135.627 li
73.5242 135.365 li
71.4193 140.447 li
cp
f
48.812 176.247 mo
48.812 177.017 48.9097 177.247 49.1797 177.247 cv
49.4448 177.247 49.5425 177.039 49.5425 176.247 cv
49.5425 175.451 49.4448 175.251 49.1797 175.251 cv
48.9097 175.251 48.812 175.481 48.812 176.247 cv
cp
50.3477 176.247 mo
50.3477 177.256 49.936 177.822 49.1797 177.822 cv
48.4229 177.822 48.0068 177.256 48.0068 176.247 cv
48.0068 175.234 48.4229 174.676 49.1797 174.676 cv
49.936 174.676 50.3477 175.238 50.3477 176.247 cv
cp
.203922 .278431 .423529 rgb
f
45.6519 169.389 mo
45.6519 169.696 45.522 169.928 44.8618 170.511 cv
45.6982 170.511 li
45.6396 170.929 li
44.2363 170.929 li
44.2363 170.544 li
44.9302 169.873 45.0879 169.684 45.0879 169.448 cv
45.0879 169.293 44.9951 169.2 44.8433 169.2 cv
44.6978 169.2 44.5923 169.269 44.478 169.414 cv
44.1587 169.157 li
44.3262 168.934 44.5737 168.782 44.9023 168.782 cv
45.395 168.782 45.6519 169.064 45.6519 169.389 cv
cp
f
46.438 169.882 mo
46.438 170.421 46.5059 170.582 46.6948 170.582 cv
46.8809 170.582 46.9487 170.436 46.9487 169.882 cv
46.9487 169.324 46.8809 169.185 46.6948 169.185 cv
46.5059 169.185 46.438 169.346 46.438 169.882 cv
cp
47.5127 169.882 mo
47.5127 170.588 47.2246 170.984 46.6948 170.984 cv
46.165 170.984 45.874 170.588 45.874 169.882 cv
45.874 169.172 46.165 168.782 46.6948 168.782 cv
47.2246 168.782 47.5127 169.175 47.5127 169.882 cv
cp
f
43.9482 162.734 mo
43.9482 163.354 li
43.1782 163.354 li
43.1738 162.734 li
41.9126 162.734 li
41.9126 162.216 li
42.749 160.269 li
43.4219 160.513 li
42.7227 162.15 li
43.1826 162.15 li
43.2715 161.468 li
43.9482 161.468 li
43.9482 162.15 li
44.2715 162.15 li
44.2715 162.734 li
43.9482 162.734 li
cp
f
45.2964 161.858 mo
45.2964 162.628 45.394 162.858 45.6641 162.858 cv
45.9292 162.858 46.0269 162.65 46.0269 161.858 cv
46.0269 161.061 45.9292 160.862 45.6641 160.862 cv
45.394 160.862 45.2964 161.092 45.2964 161.858 cv
cp
46.832 161.858 mo
46.832 162.867 46.4204 163.433 45.6641 163.433 cv
44.9072 163.433 44.4912 162.867 44.4912 161.858 cv
44.4912 160.845 44.9072 160.287 45.6641 160.287 cv
46.4204 160.287 46.832 160.849 46.832 161.858 cv
cp
f
44.7983 155.524 mo
44.7983 155.27 44.7271 155.186 44.5752 155.186 cv
44.4917 155.186 44.3955 155.23 44.3149 155.314 cv
44.3184 155.747 44.377 155.905 44.5659 155.905 cv
44.7271 155.905 44.7983 155.753 44.7983 155.524 cv
cp
45.3496 155.518 mo
45.3496 155.936 45.0615 156.292 44.563 156.292 cv
43.9897 156.292 43.7358 155.89 43.7358 155.282 cv
43.7358 154.567 44.0981 154.09 44.6899 154.09 cv
44.8945 154.09 45.0615 154.148 45.1792 154.229 cv
44.981 154.554 li
44.8975 154.505 44.814 154.474 44.7021 154.474 cv
44.4917 154.474 44.3462 154.648 44.3149 154.982 cv
44.4419 154.864 44.5908 154.814 44.7427 154.814 cv
45.0957 154.814 45.3496 155.072 45.3496 155.518 cv
cp
f
46.0737 155.189 mo
46.0737 155.729 46.1416 155.89 46.3306 155.89 cv
46.5166 155.89 46.5845 155.744 46.5845 155.189 cv
46.5845 154.632 46.5166 154.492 46.3306 154.492 cv
46.1416 154.492 46.0737 154.653 46.0737 155.189 cv
cp
47.1484 155.189 mo
47.1484 155.895 46.8604 156.292 46.3306 156.292 cv
45.8008 156.292 45.5098 155.895 45.5098 155.189 cv
45.5098 154.48 45.8008 154.09 46.3306 154.09 cv
46.8604 154.09 47.1484 154.483 47.1484 155.189 cv
cp
f
47.519 147.635 mo
47.519 147.812 47.6118 147.927 47.8242 148.02 cv
47.9263 148.064 li
48.1162 147.922 48.1563 147.785 48.1563 147.626 cv
48.1563 147.454 48.0498 147.33 47.8423 147.33 cv
47.6475 147.33 47.519 147.427 47.519 147.635 cv
cp
48.249 149.051 mo
48.249 148.83 48.1343 148.728 47.8423 148.613 cv
47.687 148.555 li
47.5103 148.662 47.4263 148.83 47.4263 149.029 cv
47.4263 149.25 47.5898 149.4 47.8467 149.4 cv
48.1206 149.4 48.249 149.241 48.249 149.051 cv
cp
49.0322 149.06 mo
49.0322 149.538 48.603 149.954 47.8198 149.954 cv
47.0679 149.954 46.6431 149.551 46.6431 149.073 cv
46.6431 148.728 46.8462 148.484 47.187 148.338 cv
46.8774 148.144 46.7578 147.887 46.7578 147.622 cv
46.7578 147.148 47.1958 146.808 47.8374 146.808 cv
48.479 146.808 48.9175 147.1 48.9175 147.586 cv
48.9175 147.83 48.7759 148.082 48.4438 148.263 cv
48.8555 148.467 49.0322 148.728 49.0322 149.06 cv
cp
f
50.0884 148.378 mo
50.0884 149.148 50.186 149.378 50.4561 149.378 cv
50.7212 149.378 50.8188 149.17 50.8188 148.378 cv
50.8188 147.582 50.7212 147.383 50.4561 147.383 cv
50.186 147.383 50.0884 147.613 50.0884 148.378 cv
cp
51.624 148.378 mo
51.624 149.387 51.2124 149.954 50.4561 149.954 cv
49.6992 149.954 49.2832 149.387 49.2832 148.378 cv
49.2832 147.365 49.6992 146.808 50.4561 146.808 cv
51.2124 146.808 51.624 147.37 51.624 148.378 cv
cp
f
75.0771 149.874 mo
75.0771 147.63 li
74.4487 148.016 li
74.1079 147.498 li
75.1436 146.874 li
75.8428 146.874 li
75.8428 149.874 li
75.0771 149.874 li
cp
f
77.8281 148.856 mo
77.8281 148.493 77.7266 148.374 77.5098 148.374 cv
77.3901 148.374 77.2529 148.436 77.1382 148.555 cv
77.1426 149.175 77.2266 149.4 77.4966 149.4 cv
77.7266 149.4 77.8281 149.184 77.8281 148.856 cv
cp
78.6162 148.848 mo
78.6162 149.445 78.2046 149.954 77.4922 149.954 cv
76.6733 149.954 76.3105 149.378 76.3105 148.511 cv
76.3105 147.489 76.8281 146.808 77.6733 146.808 cv
77.9653 146.808 78.2046 146.892 78.3726 147.007 cv
78.0894 147.471 li
77.9697 147.4 77.8506 147.356 77.6909 147.356 cv
77.3901 147.356 77.1821 147.604 77.1382 148.082 cv
77.3193 147.914 77.5317 147.843 77.7485 147.843 cv
78.2529 147.843 78.6162 148.21 78.6162 148.848 cv
cp
f
79.6499 148.378 mo
79.6499 149.148 79.7476 149.378 80.0176 149.378 cv
80.2827 149.378 80.3804 149.17 80.3804 148.378 cv
80.3804 147.582 80.2827 147.383 80.0176 147.383 cv
79.7476 147.383 79.6499 147.613 79.6499 148.378 cv
cp
81.1855 148.378 mo
81.1855 149.387 80.7739 149.954 80.0176 149.954 cv
79.2607 149.954 78.8447 149.387 78.8447 148.378 cv
78.8447 147.365 79.2607 146.808 80.0176 146.808 cv
80.7739 146.808 81.1855 147.37 81.1855 148.378 cv
cp
f
78.4502 156.236 mo
78.4502 154.666 li
78.0103 154.936 li
77.7715 154.573 li
78.4966 154.136 li
78.9858 154.136 li
78.9858 156.236 li
78.4502 156.236 li
cp
f
79.9053 154.669 mo
79.9053 154.793 79.9702 154.874 80.1187 154.939 cv
80.1899 154.969 li
80.3232 154.87 80.3511 154.774 80.3511 154.663 cv
80.3511 154.542 80.2769 154.455 80.1313 154.455 cv
79.9951 154.455 79.9053 154.523 79.9053 154.669 cv
cp
80.416 155.66 mo
80.416 155.505 80.3354 155.434 80.1313 155.354 cv
80.0229 155.314 li
79.8989 155.388 79.8398 155.505 79.8398 155.645 cv
79.8398 155.8 79.9546 155.905 80.1343 155.905 cv
80.3262 155.905 80.416 155.794 80.416 155.66 cv
cp
80.9644 155.667 mo
80.9644 156.001 80.6641 156.292 80.1157 156.292 cv
79.5894 156.292 79.292 156.01 79.292 155.676 cv
79.292 155.434 79.4341 155.264 79.6729 155.162 cv
79.4561 155.025 79.3726 154.846 79.3726 154.66 cv
79.3726 154.328 79.6792 154.09 80.1279 154.09 cv
80.5771 154.09 80.8838 154.294 80.8838 154.635 cv
80.8838 154.805 80.7847 154.982 80.5522 155.109 cv
80.8403 155.251 80.9644 155.434 80.9644 155.667 cv
cp
f
81.7041 155.189 mo
81.7041 155.729 81.772 155.89 81.9609 155.89 cv
82.147 155.89 82.2148 155.744 82.2148 155.189 cv
82.2148 154.632 82.147 154.492 81.9609 154.492 cv
81.772 154.492 81.7041 154.653 81.7041 155.189 cv
cp
82.7788 155.189 mo
82.7788 155.895 82.4907 156.292 81.9609 156.292 cv
81.4312 156.292 81.1401 155.895 81.1401 155.189 cv
81.1401 154.48 81.4312 154.09 81.9609 154.09 cv
82.4907 154.09 82.7788 154.483 82.7788 155.189 cv
cp
f
79.7739 161.155 mo
79.7739 161.593 79.5884 161.925 78.6455 162.757 cv
79.8403 162.757 li
79.7563 163.355 li
77.752 163.355 li
77.752 162.806 li
78.7432 161.846 78.9688 161.576 78.9688 161.239 cv
78.9688 161.018 78.8359 160.885 78.6191 160.885 cv
78.4111 160.885 78.2607 160.982 78.0972 161.19 cv
77.6411 160.823 li
77.8799 160.505 78.2339 160.288 78.7031 160.288 cv
79.4067 160.288 79.7739 160.69 79.7739 161.155 cv
cp
f
80.8965 161.859 mo
80.8965 162.629 80.9941 162.859 81.2642 162.859 cv
81.5293 162.859 81.627 162.651 81.627 161.859 cv
81.627 161.063 81.5293 160.863 81.2642 160.863 cv
80.9941 160.863 80.8965 161.093 80.8965 161.859 cv
cp
82.4321 161.859 mo
82.4321 162.868 82.0205 163.434 81.2642 163.434 cv
80.5073 163.434 80.0913 162.868 80.0913 161.859 cv
80.0913 160.846 80.5073 160.288 81.2642 160.288 cv
82.0205 160.288 82.4321 160.85 82.4321 161.859 cv
cp
f
83.5234 161.859 mo
83.5234 162.629 83.6211 162.859 83.8911 162.859 cv
84.1563 162.859 84.2539 162.651 84.2539 161.859 cv
84.2539 161.063 84.1563 160.863 83.8911 160.863 cv
83.6211 160.863 83.5234 161.093 83.5234 161.859 cv
cp
85.0591 161.859 mo
85.0591 162.868 84.6475 163.434 83.8911 163.434 cv
83.1343 163.434 82.7183 162.868 82.7183 161.859 cv
82.7183 160.846 83.1343 160.288 83.8911 160.288 cv
84.6475 160.288 85.0591 160.85 85.0591 161.859 cv
cp
f
78.7559 169.389 mo
78.7559 169.696 78.626 169.928 77.9658 170.511 cv
78.8022 170.511 li
78.7437 170.929 li
77.3403 170.929 li
77.3403 170.544 li
78.0342 169.873 78.1919 169.684 78.1919 169.448 cv
78.1919 169.293 78.0991 169.2 77.9473 169.2 cv
77.8018 169.2 77.6963 169.269 77.582 169.414 cv
77.2627 169.157 li
77.4302 168.934 77.6777 168.782 78.0063 168.782 cv
78.4985 168.782 78.7559 169.064 78.7559 169.389 cv
cp
f
80.375 169.389 mo
80.375 169.696 80.2451 169.928 79.585 170.511 cv
80.4214 170.511 li
80.3628 170.929 li
78.9595 170.929 li
78.9595 170.544 li
79.6533 169.873 79.811 169.684 79.811 169.448 cv
79.811 169.293 79.7183 169.2 79.5664 169.2 cv
79.4209 169.2 79.3154 169.269 79.2012 169.414 cv
78.8818 169.157 li
79.0493 168.934 79.2969 168.782 79.6255 168.782 cv
80.1177 168.782 80.375 169.064 80.375 169.389 cv
cp
f
81.1611 169.882 mo
81.1611 170.421 81.229 170.582 81.418 170.582 cv
81.604 170.582 81.6719 170.436 81.6719 169.882 cv
81.6719 169.324 81.604 169.185 81.418 169.185 cv
81.229 169.185 81.1611 169.346 81.1611 169.882 cv
cp
82.2358 169.882 mo
82.2358 170.588 81.9478 170.984 81.418 170.984 cv
80.8882 170.984 80.5972 170.588 80.5972 169.882 cv
80.5972 169.172 80.8882 168.782 81.418 168.782 cv
81.9478 168.782 82.2358 169.175 82.2358 169.882 cv
cp
f
73.5132 175.544 mo
73.5132 175.981 73.3276 176.314 72.3848 177.145 cv
73.5796 177.145 li
73.4956 177.743 li
71.4912 177.743 li
71.4912 177.194 li
72.4824 176.234 72.708 175.964 72.708 175.627 cv
72.708 175.406 72.5752 175.273 72.3584 175.273 cv
72.1504 175.273 72 175.371 71.8364 175.579 cv
71.3804 175.211 li
71.6191 174.893 71.9731 174.676 72.4424 174.676 cv
73.146 174.676 73.5132 175.079 73.5132 175.544 cv
cp
f
75.8306 177.123 mo
75.8306 177.743 li
75.0605 177.743 li
75.0562 177.123 li
73.7954 177.123 li
73.7954 176.605 li
74.6313 174.658 li
75.3042 174.902 li
74.605 176.539 li
75.0649 176.539 li
75.1538 175.857 li
75.8306 175.857 li
75.8306 176.539 li
76.1538 176.539 li
76.1538 177.123 li
75.8306 177.123 li
cp
f
77.1787 176.247 mo
77.1787 177.017 77.2764 177.247 77.5464 177.247 cv
77.8115 177.247 77.9092 177.039 77.9092 176.247 cv
77.9092 175.451 77.8115 175.251 77.5464 175.251 cv
77.2764 175.251 77.1787 175.481 77.1787 176.247 cv
cp
78.7144 176.247 mo
78.7144 177.256 78.3027 177.822 77.5464 177.822 cv
76.7896 177.822 76.3735 177.256 76.3735 176.247 cv
76.3735 175.234 76.7896 174.676 77.5464 174.676 cv
78.3027 174.676 78.7144 175.238 78.7144 176.247 cv
cp
f
52.9561 145.512 mo
52.9561 143.941 li
52.5161 144.211 li
52.2773 143.848 li
53.0024 143.412 li
53.4917 143.412 li
53.4917 145.512 li
52.9561 145.512 li
cp
f
54.3833 144.465 mo
54.3833 145.004 54.4512 145.165 54.6401 145.165 cv
54.8262 145.165 54.894 145.019 54.894 144.465 cv
54.894 143.907 54.8262 143.768 54.6401 143.768 cv
54.4512 143.768 54.3833 143.929 54.3833 144.465 cv
cp
55.458 144.465 mo
55.458 145.171 55.1699 145.567 54.6401 145.567 cv
54.1104 145.567 53.8193 145.171 53.8193 144.465 cv
53.8193 143.755 54.1104 143.365 54.6401 143.365 cv
55.1699 143.365 55.458 143.758 55.458 144.465 cv
cp
f
56.2222 144.465 mo
56.2222 145.004 56.29 145.165 56.479 145.165 cv
56.665 145.165 56.7329 145.019 56.7329 144.465 cv
56.7329 143.907 56.665 143.768 56.479 143.768 cv
56.29 143.768 56.2222 143.929 56.2222 144.465 cv
cp
57.2969 144.465 mo
57.2969 145.171 57.0088 145.567 56.479 145.567 cv
55.9492 145.567 55.6582 145.171 55.6582 144.465 cv
55.6582 143.755 55.9492 143.365 56.479 143.365 cv
57.0088 143.365 57.2969 143.758 57.2969 144.465 cv
cp
f
60.3555 143.024 mo
60.3555 140.781 li
59.7271 141.166 li
59.3862 140.648 li
60.4219 140.024 li
61.1211 140.024 li
61.1211 143.024 li
60.3555 143.024 li
cp
f
63.5845 140.825 mo
63.5845 141.263 63.3989 141.595 62.4561 142.427 cv
63.6509 142.427 li
63.5669 143.024 li
61.5625 143.024 li
61.5625 142.476 li
62.5537 141.516 62.7793 141.246 62.7793 140.909 cv
62.7793 140.688 62.6465 140.555 62.4297 140.555 cv
62.2217 140.555 62.0713 140.652 61.9077 140.86 cv
61.4517 140.493 li
61.6904 140.175 62.0444 139.958 62.5137 139.958 cv
63.2173 139.958 63.5845 140.36 63.5845 140.825 cv
cp
f
64.707 141.529 mo
64.707 142.299 64.8047 142.529 65.0747 142.529 cv
65.3398 142.529 65.4375 142.321 65.4375 141.529 cv
65.4375 140.732 65.3398 140.533 65.0747 140.533 cv
64.8047 140.533 64.707 140.763 64.707 141.529 cv
cp
66.2427 141.529 mo
66.2427 142.538 65.8311 143.104 65.0747 143.104 cv
64.3179 143.104 63.9019 142.538 63.9019 141.529 cv
63.9019 140.516 64.3179 139.958 65.0747 139.958 cv
65.8311 139.958 66.2427 140.52 66.2427 141.529 cv
cp
f
69.1563 145.512 mo
69.1563 143.942 li
68.7163 144.211 li
68.4775 143.849 li
69.2026 143.412 li
69.6919 143.412 li
69.6919 145.512 li
69.1563 145.512 li
cp
f
71.4194 145.079 mo
71.4194 145.512 li
70.8809 145.512 li
70.8774 145.079 li
69.9946 145.079 li
69.9946 144.716 li
70.5801 143.353 li
71.0508 143.523 li
70.5615 144.67 li
70.8838 144.67 li
70.9458 144.193 li
71.4194 144.193 li
71.4194 144.67 li
71.6455 144.67 li
71.6455 145.079 li
71.4194 145.079 li
cp
f
72.3633 144.465 mo
72.3633 145.004 72.4312 145.165 72.6201 145.165 cv
72.8062 145.165 72.874 145.02 72.874 144.465 cv
72.874 143.908 72.8062 143.768 72.6201 143.768 cv
72.4312 143.768 72.3633 143.929 72.3633 144.465 cv
cp
73.438 144.465 mo
73.438 145.171 73.1499 145.568 72.6201 145.568 cv
72.0903 145.568 71.7993 145.171 71.7993 144.465 cv
71.7993 143.756 72.0903 143.366 72.6201 143.366 cv
73.1499 143.366 73.438 143.759 73.438 144.465 cv
cp
f
58.8 165.656 mo
57.4283 163.362 li
81.794 149.697 li
82.3659 150.654 li
58.8 165.656 li
cp
.956863 .603922 .133333 rgb
f
64.348 163.739 mo
63.1445 164.459 61.5853 164.067 60.8655 162.863 cv
60.1457 161.66 60.5378 160.1 61.7413 159.381 cv
62.9449 158.661 64.5041 159.053 65.2239 160.257 cv
65.9437 161.46 65.5516 163.019 64.348 163.739 cv
cp
.905882 .337255 .262745 rgb
f
60.3159 184.637 mo
60.2612 183.057 li
60.2427 182.489 60.231 181.909 60.2798 181.323 cv
59.6997 184.198 li
58.6313 184.198 li
58.0151 181.323 li
58.0698 181.988 58.0825 182.477 58.064 183.057 cv
58.0151 184.637 li
56.9043 184.637 li
57.2153 180.395 li
58.6196 180.395 li
59.187 183.209 li
59.6997 180.395 li
61.1099 180.395 li
61.4272 184.637 li
60.3159 184.637 li
cp
.0588235 .219608 .345098 rgb
f
63.3853 182.464 mo
63.7939 182.464 64.0259 182.275 64.0259 181.805 cv
64.0259 181.402 63.812 181.189 63.3608 181.189 cv
63.0552 181.189 li
63.0552 182.464 li
63.3853 182.464 li
cp
63.3789 180.395 mo
64.4956 180.395 65.1792 180.859 65.1792 181.799 cv
65.1792 182.788 64.4839 183.27 63.4888 183.27 cv
63.0552 183.27 li
63.0552 184.637 li
61.9263 184.637 li
61.9263 180.395 li
63.3789 180.395 li
cp
f
66.7515 182.873 mo
66.7515 184.637 li
65.6226 184.637 li
65.6226 180.395 li
66.7515 180.395 li
66.7515 182.001 li
67.8745 182.001 li
67.8745 180.395 li
69.0039 180.395 li
69.0039 184.637 li
67.8745 184.637 li
67.8745 182.873 li
66.7515 182.873 li
cp
f
275.936 42.7816 mo
266.955 42.7816 259.674 50.0624 259.674 59.0437 cv
259.674 68.0251 266.955 75.3059 275.936 75.3059 cv
284.917 75.3059 292.198 68.0251 292.198 59.0437 cv
292.198 50.0624 284.917 42.7816 275.936 42.7816 cv
cp
303.408 59.0437 mo
303.408 74.2157 291.108 86.5151 275.936 86.5151 cv
260.764 86.5151 248.465 74.2157 248.465 59.0437 cv
248.465 43.8718 260.764 31.5724 275.936 31.5724 cv
291.108 31.5724 303.408 43.8718 303.408 59.0437 cv
cp
f
280.286 36.4585 mo
280.286 38.8606 278.338 40.8079 275.936 40.8079 cv
273.534 40.8079 271.587 38.8606 271.587 36.4585 cv
271.587 34.0564 273.534 32.1092 275.936 32.1092 cv
278.338 32.1092 280.286 34.0564 280.286 36.4585 cv
cp
.690196 .823529 .827451 rgb
f
268.41 37.3097 mo
269.611 39.39 268.898 42.0501 266.818 43.251 cv
264.738 44.4522 262.078 43.7394 260.877 41.6591 cv
259.676 39.5788 260.389 36.9188 262.469 35.7177 cv
264.549 34.5167 267.209 35.2294 268.41 37.3097 cv
cp
f
258.552 43.9845 mo
260.632 45.1855 261.345 47.8456 260.143 49.9259 cv
258.943 52.0061 256.282 52.7189 254.202 51.5178 cv
252.122 50.3168 251.409 47.6567 252.61 45.5764 cv
253.811 43.4962 256.471 42.7834 258.552 43.9845 cv
cp
f
253.351 54.6944 mo
255.753 54.6944 257.7 56.6416 257.7 59.0437 cv
257.7 61.4458 255.753 63.3931 253.351 63.3931 cv
250.949 63.3931 249.002 61.4458 249.002 59.0437 cv
249.002 56.6416 250.949 54.6944 253.351 54.6944 cv
cp
f
254.202 66.5696 mo
256.282 65.3686 258.943 66.0814 260.143 68.1616 cv
261.345 70.2419 260.632 72.902 258.552 74.103 cv
256.471 75.3041 253.811 74.5913 252.61 72.511 cv
251.409 70.4308 252.122 67.7707 254.202 66.5696 cv
cp
f
260.877 76.4283 mo
262.078 74.3481 264.738 73.6354 266.818 74.8363 cv
268.898 76.0374 269.611 78.6975 268.41 80.7778 cv
267.209 82.858 264.549 83.5708 262.469 82.3697 cv
260.389 81.1688 259.676 78.5087 260.877 76.4283 cv
cp
f
271.587 81.6289 mo
271.587 79.2267 273.534 77.2795 275.936 77.2795 cv
278.338 77.2795 280.286 79.2267 280.286 81.6289 cv
280.286 84.031 278.338 85.9783 275.936 85.9783 cv
273.534 85.9783 271.587 84.031 271.587 81.6289 cv
cp
f
283.462 80.7778 mo
282.261 78.6975 282.974 76.0374 285.054 74.8363 cv
287.134 73.6354 289.794 74.3481 290.995 76.4283 cv
292.197 78.5087 291.484 81.1688 289.404 82.3697 cv
287.323 83.5708 284.663 82.858 283.462 80.7778 cv
cp
f
293.321 74.103 mo
291.24 72.902 290.528 70.2419 291.729 68.1616 cv
292.93 66.0814 295.59 65.3686 297.67 66.5696 cv
299.75 67.7707 300.463 70.4308 299.262 72.511 cv
298.061 74.5913 295.401 75.3041 293.321 74.103 cv
cp
f
298.521 63.3931 mo
296.119 63.3931 294.172 61.4458 294.172 59.0437 cv
294.172 56.6416 296.119 54.6944 298.521 54.6944 cv
300.923 54.6944 302.871 56.6416 302.871 59.0437 cv
302.871 61.4458 300.923 63.3931 298.521 63.3931 cv
cp
f
297.67 51.5178 mo
295.59 52.7189 292.93 52.0061 291.729 49.9259 cv
290.528 47.8456 291.24 45.1855 293.321 43.9845 cv
295.401 42.7834 298.061 43.4962 299.262 45.5764 cv
300.463 47.6567 299.75 50.3168 297.67 51.5178 cv
cp
f
290.995 41.6591 mo
289.794 43.7394 287.134 44.4522 285.054 43.251 cv
282.974 42.0501 282.261 39.39 283.462 37.3097 cv
284.663 35.2294 287.323 34.5167 289.404 35.7177 cv
291.484 36.9188 292.197 39.5788 290.995 41.6591 cv
cp
f
275.936 86.3792 mo
260.839 86.3792 248.601 74.1407 248.601 59.0437 cv
248.601 43.9467 260.839 31.7081 275.936 31.7081 cv
291.033 31.7081 303.272 43.9467 303.272 59.0437 cv
303.272 74.1407 291.033 86.3792 275.936 86.3792 cv
cp
275.936 26.5947 mo
258.015 26.5947 243.487 41.1226 243.487 59.0437 cv
243.487 76.9649 258.015 91.4927 275.936 91.4927 cv
293.857 91.4927 308.385 76.9649 308.385 59.0437 cv
308.385 41.1226 293.857 26.5947 275.936 26.5947 cv
cp
f
275.936 71.9757 mo
268.794 71.9757 263.004 66.1859 263.004 59.0437 cv
263.004 51.9015 268.794 46.1117 275.936 46.1117 cv
283.078 46.1117 288.868 51.9015 288.868 59.0437 cv
288.868 66.1859 283.078 71.9757 275.936 71.9757 cv
cp
275.936 41.3075 mo
266.141 41.3075 258.2 49.2483 258.2 59.0437 cv
258.2 68.8392 266.141 76.78 275.936 76.78 cv
285.732 76.78 293.672 68.8392 293.672 59.0437 cv
293.672 49.2483 285.732 41.3075 275.936 41.3075 cv
cp
f
275.936 46.137 mo
268.808 46.137 263.029 51.9155 263.029 59.0437 cv
263.029 66.172 268.808 71.9506 275.936 71.9506 cv
283.064 71.9506 288.843 66.172 288.843 59.0437 cv
288.843 51.9155 283.064 46.137 275.936 46.137 cv
cp
289.433 59.0437 mo
289.433 66.4977 283.39 72.5405 275.936 72.5405 cv
268.482 72.5405 262.439 66.4977 262.439 59.0437 cv
262.439 51.5898 268.482 45.547 275.936 45.547 cv
283.39 45.547 289.433 51.5898 289.433 59.0437 cv
cp
.0588235 .219608 .345098 rgb
f
275.936 26.1312 mo
257.759 26.1312 243.024 40.8666 243.024 59.0437 cv
243.024 77.2208 257.759 91.9563 275.936 91.9563 cv
294.113 91.9563 308.849 77.2208 308.849 59.0437 cv
308.849 40.8666 294.113 26.1312 275.936 26.1312 cv
cp
307.721 59.0437 mo
307.721 76.5979 293.49 90.8285 275.936 90.8285 cv
258.382 90.8285 244.151 76.5979 244.151 59.0437 cv
244.151 41.4894 258.382 27.259 275.936 27.259 cv
293.49 27.259 307.721 41.4894 307.721 59.0437 cv
cp
.905882 .337255 .262745 rgb
f
285.637 382.726 mo
285.637 388.084 281.294 392.427 275.936 392.427 cv
270.578 392.427 266.235 388.084 266.235 382.726 cv
266.235 377.369 270.578 373.025 275.936 373.025 cv
281.294 373.025 285.637 377.369 285.637 382.726 cv
cp
.956863 .603922 .133333 rgb
f
283.149 361.614 mo
281.209 365.681 277.67 370.439 275.936 370.439 cv
274.202 370.439 270.663 365.681 268.723 361.614 cv
266.884 362.072 265.932 362.552 265.932 362.552 cv
265.932 362.552 273.06 376.419 275.936 376.419 cv
278.812 376.419 285.94 362.552 285.94 362.552 cv
285.94 362.552 284.989 362.072 283.149 361.614 cv
cp
.690196 .823529 .827451 rgb
f
261.259 365.923 mo
263.811 369.637 266.162 375.081 265.295 376.583 cv
264.428 378.085 258.538 378.77 254.046 378.417 cv
253.523 380.239 253.463 381.303 253.463 381.303 cv
253.463 381.303 269.036 382.063 270.474 379.573 cv
271.912 377.082 263.467 363.975 263.467 363.975 cv
263.467 363.975 262.575 364.56 261.259 365.923 cv
cp
f
254.046 387.036 mo
258.538 386.683 264.428 387.368 265.295 388.87 cv
266.162 390.372 263.811 395.815 261.259 399.529 cv
262.575 400.893 263.467 401.477 263.467 401.477 cv
263.467 401.477 271.912 388.37 270.474 385.88 cv
269.036 383.389 253.463 384.15 253.463 384.15 cv
253.463 384.15 253.523 385.214 254.046 387.036 cv
cp
f
268.723 403.839 mo
270.663 399.772 274.202 395.014 275.936 395.014 cv
277.67 395.014 281.209 399.772 283.149 403.839 cv
284.989 403.381 285.94 402.901 285.94 402.901 cv
285.94 402.901 278.812 389.033 275.936 389.033 cv
273.06 389.033 265.932 402.901 265.932 402.901 cv
265.932 402.901 266.884 403.381 268.723 403.839 cv
cp
f
290.614 399.529 mo
288.061 395.815 285.71 390.372 286.577 388.87 cv
287.444 387.368 293.334 386.683 297.827 387.036 cv
298.35 385.214 298.409 384.15 298.409 384.15 cv
298.409 384.15 282.836 383.389 281.398 385.88 cv
279.96 388.37 288.405 401.477 288.405 401.477 cv
288.405 401.477 289.297 400.893 290.614 399.529 cv
cp
f
297.827 378.417 mo
293.334 378.77 287.444 378.085 286.577 376.583 cv
285.71 375.081 288.061 369.637 290.614 365.923 cv
289.297 364.56 288.405 363.975 288.405 363.975 cv
288.405 363.975 279.96 377.082 281.398 379.573 cv
282.836 382.063 298.409 381.303 298.409 381.303 cv
298.409 381.303 298.35 380.239 297.827 378.417 cv
cp
f
275.936 358.418 mo
262.511 358.418 251.628 369.301 251.628 382.726 cv
251.628 396.151 262.511 407.034 275.936 407.034 cv
289.361 407.034 300.244 396.151 300.244 382.726 cv
300.244 369.301 289.361 358.418 275.936 358.418 cv
cp
297.865 382.726 mo
297.865 394.837 288.047 404.655 275.936 404.655 cv
263.825 404.655 254.007 394.837 254.007 382.726 cv
254.007 370.616 263.825 360.798 275.936 360.798 cv
288.047 360.798 297.865 370.616 297.865 382.726 cv
cp
.368627 .619608 .654902 rgb
f
299.781 382.726 mo
299.781 395.895 289.105 406.571 275.936 406.571 cv
262.767 406.571 252.091 395.895 252.091 382.726 cv
252.091 369.557 262.767 358.882 275.936 358.882 cv
289.105 358.882 299.781 369.557 299.781 382.726 cv
cp
275.936 350.011 mo
257.868 350.011 243.221 364.658 243.221 382.726 cv
243.221 400.795 257.868 415.442 275.936 415.442 cv
294.004 415.442 308.651 400.795 308.651 382.726 cv
308.651 364.658 294.004 350.011 275.936 350.011 cv
cp
.160784 .180392 .188235 rgb
f
306.536 382.726 mo
306.536 399.626 292.836 413.326 275.936 413.326 cv
259.036 413.326 245.336 399.626 245.336 382.726 cv
245.336 365.827 259.036 352.126 275.936 352.126 cv
292.836 352.126 306.536 365.827 306.536 382.726 cv
cp
275.936 350.607 mo
258.197 350.607 243.816 364.987 243.816 382.726 cv
243.816 400.466 258.197 414.846 275.936 414.846 cv
293.675 414.846 308.056 400.466 308.056 382.726 cv
308.056 364.987 293.675 350.607 275.936 350.607 cv
cp
f
302.602 382.726 mo
302.602 397.453 290.663 409.392 275.936 409.392 cv
261.209 409.392 249.271 397.453 249.271 382.726 cv
249.271 368 261.209 356.061 275.936 356.061 cv
290.663 356.061 302.602 368 302.602 382.726 cv
cp
275.936 352.142 mo
259.045 352.142 245.352 365.835 245.352 382.726 cv
245.352 399.618 259.045 413.311 275.936 413.311 cv
292.827 413.311 306.52 399.618 306.52 382.726 cv
306.52 365.835 292.827 352.142 275.936 352.142 cv
cp
.0588235 .219608 .345098 rgb
f
279.781 382.726 mo
279.781 384.85 278.06 386.572 275.936 386.572 cv
273.813 386.572 272.091 384.85 272.091 382.726 cv
272.091 380.603 273.813 378.881 275.936 378.881 cv
278.06 378.881 279.781 380.603 279.781 382.726 cv
cp
.905882 .337255 .262745 rgb
f
276.777 350.66 mo
273.636 350.66 li
273.931 349.586 li
276.482 349.586 li
276.777 350.66 li
cp
.160784 .180392 .188235 rgb
f
273.421 350.748 mo
270.297 351.076 li
270.478 349.977 li
273.015 349.71 li
273.421 350.748 li
cp
f
270.091 351.186 mo
267.019 351.839 li
267.084 350.727 li
269.58 350.196 li
270.091 351.186 li
cp
f
266.827 351.97 mo
263.839 352.94 li
263.788 351.827 li
266.214 351.039 li
266.827 351.97 li
cp
f
263.662 353.09 mo
260.792 354.368 li
260.625 353.266 li
262.955 352.229 li
263.662 353.09 li
cp
f
260.631 354.536 mo
257.911 356.106 li
257.629 355.028 li
259.838 353.753 li
260.631 354.536 li
cp
f
257.768 356.29 mo
255.227 358.136 li
254.834 357.094 li
256.898 355.594 li
257.768 356.29 li
cp
f
255.104 358.334 mo
252.77 360.436 li
252.27 359.44 li
254.166 357.733 li
255.104 358.334 li
cp
f
252.669 360.645 mo
250.567 362.979 li
249.966 362.041 li
251.673 360.145 li
252.669 360.645 li
cp
f
250.488 363.198 mo
248.642 365.739 li
247.946 364.869 li
249.445 362.805 li
250.488 363.198 li
cp
f
248.586 365.965 mo
247.016 368.685 li
246.233 367.893 li
247.508 365.683 li
248.586 365.965 li
cp
f
246.984 368.916 mo
245.706 371.785 li
244.845 371.079 li
245.882 368.748 li
246.984 368.916 li
cp
f
245.699 372.018 mo
244.728 375.005 li
243.798 374.392 li
244.586 371.966 li
245.699 372.018 li
cp
f
244.745 375.237 mo
244.092 378.309 li
243.103 377.797 li
243.633 375.302 li
244.745 375.237 li
cp
f
244.133 378.538 mo
243.805 381.662 li
242.767 381.257 li
243.034 378.72 li
244.133 378.538 li
cp
f
243.87 381.886 mo
243.87 385.027 li
242.795 384.732 li
242.795 382.181 li
243.87 381.886 li
cp
f
243.957 385.242 mo
244.286 388.366 li
243.186 388.185 li
242.92 385.648 li
243.957 385.242 li
cp
f
244.396 388.571 mo
245.049 391.643 li
243.936 391.578 li
243.406 389.083 li
244.396 388.571 li
cp
f
245.179 391.836 mo
246.15 394.823 li
245.037 394.875 li
244.249 392.448 li
245.179 391.836 li
cp
f
246.3 395.001 mo
247.578 397.87 li
246.476 398.038 li
245.438 395.707 li
246.3 395.001 li
cp
f
247.745 398.031 mo
249.316 400.752 li
248.238 401.033 li
246.962 398.824 li
247.745 398.031 li
cp
f
249.5 400.894 mo
251.346 403.436 li
250.303 403.828 li
248.804 401.765 li
249.5 400.894 li
cp
f
251.544 403.558 mo
253.645 405.892 li
252.649 406.392 li
250.943 404.496 li
251.544 403.558 li
cp
f
253.855 405.994 mo
256.189 408.095 li
255.251 408.697 li
253.355 406.99 li
253.855 405.994 li
cp
f
256.408 408.174 mo
258.949 410.021 li
258.079 410.716 li
256.015 409.217 li
256.408 408.174 li
cp
f
259.175 410.076 mo
261.895 411.647 li
261.102 412.43 li
258.893 411.154 li
259.175 410.076 li
cp
f
262.126 411.679 mo
264.995 412.956 li
264.288 413.818 li
261.958 412.78 li
262.126 411.679 li
cp
f
265.228 412.964 mo
268.215 413.934 li
267.602 414.865 li
265.176 414.077 li
265.228 412.964 li
cp
f
268.447 413.917 mo
271.519 414.57 li
271.007 415.56 li
268.512 415.03 li
268.447 413.917 li
cp
f
271.748 414.529 mo
274.872 414.858 li
274.466 415.895 li
271.929 415.629 li
271.748 414.529 li
cp
f
275.095 414.793 mo
278.236 414.793 li
277.941 415.867 li
275.391 415.867 li
275.095 414.793 li
cp
f
278.452 414.705 mo
281.576 414.377 li
281.395 415.476 li
278.858 415.743 li
278.452 414.705 li
cp
f
281.781 414.267 mo
284.853 413.614 li
284.788 414.726 li
282.293 415.257 li
281.781 414.267 li
cp
f
285.046 413.483 mo
288.033 412.513 li
288.084 413.626 li
285.658 414.414 li
285.046 413.483 li
cp
f
288.211 412.362 mo
291.08 411.085 li
291.248 412.186 li
288.917 413.224 li
288.211 412.362 li
cp
f
291.241 410.917 mo
293.961 409.347 li
294.243 410.425 li
292.034 411.7 li
291.241 410.917 li
cp
f
294.104 409.163 mo
296.645 407.317 li
297.038 408.359 li
294.974 409.859 li
294.104 409.163 li
cp
f
296.768 407.119 mo
299.102 405.017 li
299.602 406.013 li
297.706 407.72 li
296.768 407.119 li
cp
f
299.204 404.808 mo
301.305 402.474 li
301.906 403.412 li
300.199 405.307 li
299.204 404.808 li
cp
f
301.384 402.255 mo
303.23 399.714 li
303.926 400.584 li
302.427 402.648 li
301.384 402.255 li
cp
f
303.286 399.488 mo
304.857 396.768 li
305.64 397.56 li
304.364 399.769 li
303.286 399.488 li
cp
f
304.888 396.537 mo
306.166 393.668 li
307.027 394.374 li
305.99 396.704 li
304.888 396.537 li
cp
f
306.173 393.435 mo
307.144 390.448 li
308.075 391.06 li
307.286 393.487 li
306.173 393.435 li
cp
f
307.127 390.216 mo
307.78 387.143 li
308.77 387.655 li
308.239 390.151 li
307.127 390.216 li
cp
f
307.739 386.914 mo
308.067 383.791 li
309.105 384.196 li
308.838 386.733 li
307.739 386.914 li
cp
f
308.003 383.567 mo
308.003 380.426 li
309.077 380.721 li
309.077 383.272 li
308.003 383.567 li
cp
f
307.915 380.211 mo
307.586 377.087 li
308.686 377.268 li
308.952 379.805 li
307.915 380.211 li
cp
f
307.477 376.882 mo
306.824 373.809 li
307.936 373.875 li
308.466 376.37 li
307.477 376.882 li
cp
f
306.693 373.617 mo
305.722 370.63 li
306.835 370.578 li
307.624 373.004 li
306.693 373.617 li
cp
f
305.572 370.452 mo
304.295 367.582 li
305.396 367.415 li
306.434 369.745 li
305.572 370.452 li
cp
f
304.127 367.421 mo
302.556 364.701 li
303.634 364.419 li
304.91 366.629 li
304.127 367.421 li
cp
f
302.373 364.558 mo
300.526 362.017 li
301.569 361.624 li
303.068 363.688 li
302.373 364.558 li
cp
f
300.329 361.895 mo
298.227 359.56 li
299.223 359.061 li
300.93 360.956 li
300.329 361.895 li
cp
f
298.018 359.459 mo
295.683 357.357 li
296.621 356.756 li
298.517 358.463 li
298.018 359.459 li
cp
f
295.464 357.278 mo
292.923 355.432 li
293.794 354.736 li
295.857 356.236 li
295.464 357.278 li
cp
f
292.697 355.376 mo
289.977 353.806 li
290.77 353.023 li
292.979 354.298 li
292.697 355.376 li
cp
f
289.747 353.774 mo
286.877 352.497 li
287.584 351.635 li
289.914 352.673 li
289.747 353.774 li
cp
f
286.645 352.489 mo
283.658 351.519 li
284.27 350.588 li
286.696 351.376 li
286.645 352.489 li
cp
f
283.426 351.535 mo
280.353 350.882 li
280.865 349.893 li
283.36 350.423 li
283.426 351.535 li
cp
f
280.124 350.923 mo
277 350.595 li
277.406 349.557 li
279.943 349.824 li
280.124 350.923 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
[/Gradient [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 17.0.0
%%For: (IvAN) ()
%%Title: (1409.i043.009.S.m004.c11.car parts icons flat.eps)
%%CreationDate: 9/8/2014 6:15 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KBj]W)oD&@UIQmWMdXr;B"A?%3$YW0C6><,iT_C`Hi]p,=k3-]t%t:_\59n9?DUYGOA%c^50H!NPdG-dq[$5ELl_R5P1>DSN
%1M*B5:!6)d+61[3QBn+B:;$:&N-qDQXa0TbEN;t/g?i.?g1[lQ;n8N<4a#sp_DcAt]iV<or^pb&DXeX:am<6pKhBlG1g2cGPN$:D
%!nk,3piROIJd1_NK\P\e2#s1nSIQ&0g6V]/lt)qtikY%rq;[<U=_W(`DPtp]IpPFjbW]*&T6a45I0#=EV?m)N_j@@8=*D4+Np8D8
%@_p+18d_%i9cZ)'d[![Kk_R;%6iX+BL_BddT65bcLM2=4n2!eDPc=L>50dX[<$?5A1ji$j"(\&,KIk;4+pZH,>-mL;4?6E+>%oLp
%Y5X:WiZl>\8AoYrn./*3R^*2$3pZhqS6t_T`VXF,ouqJM?;"((VU[]/r"#YtbCg(lFK8a6FhQ3(IW5Z-C'G.e-*I[JKo[%MY+3rH
%H1Gm5ETX\^]ab<VUY<ZnfM";[s4tk9mD/\bTst]ja\gNfT/GKHJZ]Y5#rdun[Ne\g@,.A!#@PK-bamW>[Xc^$/_`6:`uok%Xib4O
%^.F]_>%^fJdG/M;8tfeL2!([N,RnH8njiJ)oMC,.:<0F4@jgn2G8QH^,COfo?16?;\OI$@TT-]u6+ZA)psmB\r\j[CIKrShS!k*!
%3.KV3#:ak4ps202WpcJLj(]CEghSdYc2Dt!n`M";R8W(^9>0kQSOO"L[$3V_p]eL7Um@kVV9W7^&__cm".Z`&Bs(-C&EmqU.J58T
%.t<8&bP6"Gk<V,E:4s')k\g?S=)Bc=%0mHR?:qnR>Ko-e+'7:0gIfR@K!l1>5N!Is=;J=d_I>A1U=05labM-:?Pd2`,%&=Sb3`Gb
%AbG>bG0mhs[;YOA(oPL)T='SH[F22]%7VMWkEr%1Gcgg>>n+-jD-s-b)NALQ#_eqd$7EC7;:!H[-NWeB%cGO`D*6u^X-LkogUsO#
%LUBA-qk0\rcc2-BU?)0T*dbX/3ZEHUQMU-*BX^qAj#9<,a5WWgj`ZM_?sYHhDQDbkcpaJ]Ehs8[2Kd`UFM)S,)RUn]A?"$.[u"M2
%/4;20G-,h)&5`\:^Ad:;,aGK%*Q2:-/QKU$Co3M*fB[;`/H;ONV7;&1L4[7V=fH6%cTaVmq8`3$J!d\/R)7(7=Yk!aRK^m=Ld`oE
%Z7KnHQ=C4O@qDd4Q+%+Ui.P&(@GKoZkM520(HfUA4NI&@QPXo*cTc4I5La;RBj3L)D;4mXO!h4d`gFk!`gP'k-<Nb:ag)o0ZX$Tc
%%?m1/A>X'E-C:Lu8!]?K;km:O@k^4T]^YB]O_4O*,'`DMOH/.I&f./bX!k33rmBK;cIc9m.rXn1"ikQfr(r//VVd^pq*,MfTtq8'
%5<u_%#r>skL2?q*%*&qKP;0B4P;DdLY2<;=S'>J4f#cWKT!bk9Q=XcrA;s8+Z^]'LEg^_jP7\Z[@qRd*_or+=1GhHSL+%j`OV^$?
%'cA0J,Ab1"7#Snr9Me$.i=qef-h$,J^2a=h:$POI32/Y$MdrC,*rWfBN.(?>#=e)kSW"d5a0?ZQ!*tTkF$sH>%(cKqQa[]8AnpQm
%gQI!%gtFI&(<eXg3=!)`#mMj"K03d4Xp%@N%2*-$]JGWc!^DE>!#`q1/7h)D*0;]]&nZ`s&X5>_!-4M57V/Cng4;@uqXE#G_rl"(
%j`C3-/pJ03E'Q0E-Re25_$Zh_H-hm/"$+sOjFB..cmk56^TW1YOS16HYSa%bd*uYPPU\_Vb$CW7(qg3pX[aAPr[p`S:<I9?at+qH
%a=p5lP%g.u-0LuW8%#&Z^L>h1d$96/hK91P%=u'&+9NBMJdi>95VfVf+aK066H0#)TccM6874LaH#c0Q1*BpaOL*b:!JX7Q'I93"
%6sCeg2TWB.=jI;#%JDQ[+7*QL5M-A9AbGb]%J7li7;Rmh/<0lhCkF8HOQl*3h%Q^kD&T(Y?hP/FT@j+\mO*0BZ2=PE]+6("OZ&mB
%Au:No[#nJDZ9VaW#K(#(;1t=ROT0o<EY-iE346#aBc/@e4)>G.>j&TG>dfV:UGfK4,rZ0pDfTZX0T/b1P-Z&*-U685ZJYh?[MVl$
%5\&c7r`M<t/H;(glW0Eah#`Y9#u(ciFr9="G"^W%<G![dAb0=[mAJ)?l`7s#?_5!b.o`MhXI!i.T2V6KgUk@UQ]7.U5NaOcXDPSO
%T+erm8hL'KX4H7QFgoh6<A(j'YJ$*&"2mm6jn@^KY:A(#bH"8ERbHDLe33R>s6BO#!Wmb[%,/%pP1hmL7dHDS83bmE=(>N]Q-65R
%#X#1#82M07O17*sjSW",Ffo1MU[b3M9LICi,HGdI.4\%WP:J=Akj-'V(6t<do1ZQ;jdq[XjAef,W'[:o&JI\27SRBWL;.AjKV'ti
%p_hF6Bq2MA'0G%$7CVR4Mr%u>W2Cst,A;HS"OY>5e@W,`@`SH+`N^@ZjD!"pP;J]/QIkP*j#AY5EGAY^Z,pNs0&3m:BR/LI+ImFn
%YRc4e`75g)SP#e>b2l(uCeHnGTFaU'Ha$uuRo'l]E>2+?]AD3dUCeC=pj&7L'V..nXeN;&<r?Ddid)S7>b?01:oTL2NP0G\kn,\6
%dh+>R9s<Z%)Qaj`KW%i#(V-!fQKt"peE&WK6H6d(#I'?bb,MKgQ(('[P#Q<7;`QX*jcWS\(2RHjj[,\>IG(R+(F>K-Tj()D2sk-.
%7P-.4jcWk$alS[jY)eMeQV2?Z8:Je%b2m)p1FK^QA3!f]LK?XPE_DD,(1Ps3SM!19'9@sgc?GN=QV$rR3;sbo::jHIHTs"NfOh35
%1Q"@J\h:#=;4d%pVE<7c!qtDe]3TFBg!S<oG2+')ge)S17qmkF=Zk*#H-L8lbAFF=7Zuo=/.b=ciqV0Shc&/",<7u0WT@+gL%.]=
%;;NDaf@B)tV8pp[XN%4KC:lt5rt-,n&Gi=e9"sFbpLA%-BQmZl\*0@uh0>+6K0H]e/d>T8RGFmtau/JONa%Q#>D%u1NBSRNJ\-Cj
%)g1U="GVu]Bu7,m)+G#Mc$JY'c]d-rni3`[3#3D3Ma>A_VB04e2_+LG6+dQVg@$!#WE.OO*B22RckG0--DA8j:=0Md2T[GhPjHfB
%<]Od:!lT$cf:ru.k]@rqF>[WL(,fY*ce!0drHa@T*esq8LB]Y")QK'_]]*^XSB;9\rldHg32UJU)"rb&R2ufTX4"PYH(?p<lTabV
%k:m:W8[\CA:2-.1HK_ah4lk[/7Q^,lqI7ajD]M9Pb9u!)1R&lb5eDFC1FG)$NCGe[o">"A=9Y2mND*@]$(UZtF=aJSlslKZ4?jkH
%"?p-Hdu@isI)N"\1(.J;@aHefWICgu2ubOC>'\b626ZM@q\\I5#1J[PGg2]IMK=kierA9**L09Vf?>/:onD$/])WWA@M+Wf`$&UH
%G.c/k0%^=i(`uCFAmX)!"C![clS1<0cJ93=E@,:8U+RZc9V5QdOBbVD=R+:%N7uf;:R4$O&T_I4@en=&hsM+e9%n:2LeRP^a@V>u
%R,!s2YC"euY:<m3)/!Yqi/qa$Q\ht@F*%0^+.9FDa]I3@Wa#,bAYb*!F"U`nc%Y:hXPqGpVA%#Cbe3s\KM)C,&2?-C1OQ`TC>^?$
%q)FdUq(YWHm3>BZ`i6FHO#%ETD;Sf:e'+;7(kmU12[OJ!`6RJ@,r$b0G85(0:#!fFpIgc%eS;b!@+FL9X>S-o8(W%G>j7ueVF<tt
%P<nJE>23#TJo=eQ5u<@u/ZS)qH5r**`GVe>AgOj?W!Mt$aGOC,UZD6A^Q`8&VQ^kd>"#sP^YGG9PREFYa)/dPRgO4?,ZQ@;c])qe
%U$,O8LQ+9_eK_"k1Oq4._FC&kYVFU(8%I0K`Gn?[D/)(%%"5\%2seLdOAL1#bq.XrV&%6*YPkU9/AT5@lV=`!AL8%siZd_WM*j\:
%'.)=gnse0?k&l(aG+upc^2*/FU;WIfq'e?P00WW6p7b7,r@E]*?A-!?EJTu$ZPL`2cMh.7(l;>"(F@amP3bX5cgF5Yja(OqIkJTE
%PW2(TNW5NQ!@?EW1;if;Q8["#8P&QL%#s7Y@P:?DadKUNmVT,Tbi>:`=:06SX"hl0SF=Ym@Vs"UAn(c-&"0&HpoU<Yjp2afrkcnY
%H!]@bEIQ+(a*I;aMfq++S8.E'h"m5i16^@u?a=H0Z"o80f4%Ef@b27)[\.e\[fqj=>['=s[RfAGLI.G3[D]*$bc2u*g;7"#71.TY
%X-Qkq)d0T4MU;/NmnfBAitd7Ns)^,>Xqh!N27g=:fngWd?pUMVM&Q'.b^\bl8B7"1^$9UfrHZ*_7ia0+A]<:EVjMrHCQD^'G>@O4
%bH!KihYo6JQa`&9#Nh6)>Gag=K&5?>a^-5o[g]6"9`++@FqZNIR7u%6?/8DXQb7@855Mt14`f0GgeL&!/WAU_c*F7g(,]".K"m9Z
%r7Q\JnF%-?Onq51hNJmcDB\Maac.s[()edUCDSY`]o[TlKD9p>?_?<Aq(H[HTAaLPH0$\;C<]3e!e[7cN46UKc+1>'0C[6a&bD-J
%2!8X`3F;dLdL*pk)I8D-O,6U:,0blLR!FT*UEFh&8)(5FW9eM;(q#R,LB]XU@eH4nP+.6bJ*%bE*"t5Frd&+79TKCe<U!c=]M9GR
%s.=Ito=,?O6UR$,oLhsU-0r>GgA:7^>^r0CrsiI0ZMlqUOC\;K=oV4IJ+^#^DuFl'?er!&lbCklisIIt[UT+'ABf<j8PcYS4"EbJ
%ABf<$29D;*ZKAd_CVHW;\_N29(6P$:s4ER[c0@WS46>2P<Z,qne$p3OpRk;6!KW@lX3&RClAu(sj%S%>'/N=Q'!/U,eq6+;Wd]9E
%C?)M>UfAq3<ujP.0B.u(0rXDf+JrM720Z9,'scp![Rl2>h^0k>j[dO)8XV+YPMM*Lhn!WL?@<4P(iKe<X^!cmIT.4cYHudM8m@:@
%>9CBmSCGlJqUn*EU*`?<euQZ+0afiNgo6!$:(3THs&EgicDXh!of+HDF38'_HpqXG#O%YT\i1q=d^oT%,g<+;01a3`h=QR9/%-5Z
%PQ4k9C(#:XIj]**dUnLVe#!<B#1]Nc7qPpWok8RLDF/5c,6GbQP/9jiGY&5q8`:sE]Hi2tV"!re8Ad3@._OspN3'c>KpSV)nunJX
%"^((d$:m_hl%T:#eHsQ,=-.<!H:\H8o<:5sk0F/XQVG\u-!5iD-5Q!n$ZY<>eo.%66c6"_2GpSuNnqk!1?^h]Q2'*UBA]E$\^2V4
%A0Q#Rs)$p9hh]Oi?VG?GROu:a82i6Y0I*07kEt&?oH/+6o=3Y+"!`ua^6IEe1bCH\ceQ6VHKCG2J)0h!GNR:./_6p!(jB[?a4Z[:
%m'ei(0jYPsMXdQAM)<t]2=m9o.$r[p#:6A2Q"$2g\]NI_aOqtKh'6Q^:L3.Ej?3AWF+@V[d)AZ_Ao2./j-&-o9M1JAbsR4TR'AJN
%6Ee%H4,3mUBfS(\`ZaNK8h&?b/WD]s&EH'A4YO[k`TtI"+b4QAX1r;<LcC74c_QRU'A3dil53)5j56=A-`LV"MWQR6*@$T7-$>.a
%pU!L4@ogj!;TD>n(irTqq![:d*B2Q8Sjd"!0"9VFa0!'l<8q`8<mOM$8'q0581NKeDP$)(Ym=@"3;;+U]<rlF^`ThAIn,W6H"Q1c
%ni+uODWJ?IgKpT8IIDLT@[qPH%t@cieJkEW8uFYK6JYSH6+jNr23ngI@*bh*?`8m;P'_pQ&sV0-oXi7L0l1<>c-T:BQWu?=)r,[s
%(C#"#EC0E>N!CTh<hgGN,>#7V;=a0\q_Z"GcV:POqH\fIZYo*'>6XU[T1-Ru$/VarWQFfU@qh@[6XE?X1eqapYr7!K+t)(5'r8Gt
%;8`rMi;'>3g@J8rN$Ep1^?$jT$&cLUX"u1US%%L4(n2c4Y(hq"Zqsb=,:R.&)eJ@]Qhq$QP[ni,2O@rq8N&LXj<WF6b[toNU7!9r
%RgfuG4.BHim9q^Zm3h_b[.CgFPE_ka8NN36F%JEZUiT*gf:W(FMj;T,+t#tFAh0F!gLug(>AbF]2=nB63a$uL/fkU_S^/nA>=r@r
%/t[:bMNR<PpIZ_*8gO.@0'Kt]$XggeqLX[eU<csr>NI>feEY$0Rho)6GeKA?TLRB^<]WH(A(;%CSY+Fl<GILP/WkterplJd$Sgn5
%[htcgJiB$"'N_MNh/g$dD25Y*;3Q]WT>,P,;,WLIP&6]WpZ3tt@M&PcRBpeb@T,$@p+45WS9DAAG)P3kd>\rYp7P3>Xr%u<kfM%+
%lKsTnnqE)e3D]Yg1JF>PXLOJFK0:fdrjmu0b.*=%=FdV>0)UV?fDe*0T/:??5a&AXG:E&!G:@f;pap*/3.a4LKk)nHWVaG&XW)%a
%1VfN$plqsQ6[')[Fa<@u%RaLW"0K[:1cNBaod4U#:#_iGN_c4r8B;V")[(J>O%bPI(r"E?mI&lV7btZgJ`.jF*#'\R;%aQ@pL9jq
%Xi#3#']&7AnO[P]m(Q5Ph'3?FHl'D)35FiWCZ<b+5c!XZb2VbZN&)i$eGX]Ng)c$(;-+8#d(lMK6ab?&Ft4d^qg!95nJ?mkhk@tZ
%6E`o<oS=?P*Y!"fd^cB'Z/-ag36,/Y@^GJBiu>7kpPX#*Ib+I,*#]I)pofm'_h<9sI:F8?Q2&?&nW!-B5u(`E33,?kmg0inB0Le1
%.-=DO(@Vg+`HnT[6G=d`iZ0`E(hY2ibfXT\\X7%k;cIh3\JQ,pb_6M@M1M%>'>=]I\&[iTRR^jX;MP/gp*kMcVHA;+@k)lEWFpD)
%7dG#`Y0FDC=KL_";=DO"rFc)+WC(`V8&fk688mWDanU8fR]2Bi[)e#5f98iSAjPm(&BW20^0ld9[H250Xp=q@1GB&l504;H=gSDm
%e"N0g#pdeXG3:WPN_WQ4".r.MSN,2M,\ukk?E6n:rMGIu4>$tbgl".u3u?F=RYn?u,7/f4\%:+B4_8D,kgkY>F(n)Z8]]>'b"++q
%R-c2/2Jk/nMf6hF;r&E;;]In4I+E?(m;e^U.EnI/h^kdqM]b_GL&AY=D*AG'-)HZuo^N<q,.G3rWmrB4q,NWACpEn$>:b9Q#]BDM
%Unu:!1!Y"/V;PoU&nW<Nr+2XP%'@V:?IgtrlWmQVd;T$^j(2/<kG[j0X'PMt8A68Q#*^Po0"b/leSSZi%c+^Cl*XDZXV-S4d[)EU
%D9f7a/!nCUB[j@XUUlRsWFdNK3l/;pC^f=+UgV-a]h]2Llm'3b<iW.QJ0t\(\$N?&8o$J=2n`2i#*+Z[f8A@!)3Q.m8&F?el;(rS
%bP3gl@fNOEHNl^^cAg`6\Ks>X#uQ+Tn:SC\q1#K;Iq>X5qC^7^SDp+)D6R\,lA`RDni&C@bF,pm1qs/6;[*cVq%#.RIREs/?s39I
%Z/sc+>H+M78jOs[NdjFVX:9[G[,Vq*DuNk/hQh%2;XEYJe[Y=m5=FTdeYAF"?L)ZE^lq7N`%*`2YtOXlKrA,ffobsqkF[5@WTWd8
%)o2G>R6F;mr+r0$J&7O"pa,iB_Y2B'V8+-)8(n;D)g%+K/[]Tb[Q6e?b#Z3%B`]s-di_lY-%X&Z+Yr\oM:!Oi:I_Ka06Je9;'bct
%HqPZ7F8\lo#H1ePjj`ke[^Z.OWumW!m7Z+$mDq]Bd_\Yqim7hSm/HAe]/UZ#V>m"(+a,b4"_!7mr@],E=<o032DMXsZ+U<NCF7'p
%^MI_Ma>Pc]4omA8ZtUo]p:&a[T%Mf9hBqsi<p]2c@&CJCEl.q,`<<Z\"WsZf$itN&D%L,qMH5]C8iV4&)#aa^3$F+UcGe(H+Br@\
%m<0*fs":)F&`@Q9gA)^Gg8C3>ZPja!-&*k`30-9rW_d$M[Ui;-X5"KGOb.3bPbLhYK5f9U]ZcAROSE95mo&DD5Sg_Nl_R-4HZEEi
%fWBIjNi0rX^5,#Ajc:eYI(Rjj];n0"8.N<0+*+OYMa.5$0#F5s31?MdS!E.IT[B?f)'i@Yr8MGk1";Pf5AM'p.Q6u"U.]3Kcqusi
%60B3+DU#5+nnn[X@d/9X#GBl1Y<<92!/R]p&,CPD)D!!9X0DV)1UklWW5[2]o<F509BXJ/lL"0bDQCH.EMXV9nV`5ca+D^GH[hT5
%<^H(4Gs;;e<?&nmDrQ*Yj@F[J[@&0,U/EY\J0uH5#@*@Y;m5dj;A4]0./Icf`BS"Xf_kqGkODYO_6&m*1aC:>:L+NLDA5!Y`&A'[
%3u\6^F;DLU:89]Lk3od:k[rSgGRJpJk[Aj1rAXB2FRh0GIsX;9V982r?S`h^F(!,EeOjh$bd_@QicsIneM.bFH#[0B,7!2&c@kGB
%6ebt5dc;2maY@JQR@n@O>n\lI:qb0\4mR*bC>pNiEWA=:KI#Oneje)/dHEhlET!*D8$0qqj=S5h0S9n\9`-"BUY6HR`QI=Z";'MC
%Amu`;YN(okZFYb+LjqOSHR2r=M'[3TC^ICp<Sa]60&5`KfBcPmrgEeBEQV<FYB8?/^56sF6&B<F%caFgWQ;IcbtQ<%F*N[7cpr"!
%-g4QVRMkUirIAH(bq5D_DK0D/d;s6.+INERC)]KY6SR8Pi`rq)JDGapW(ft+7&26^75uDt'79QGA]B2nQG1MSHMR:%a\2NL3mNE9
%+6QCu]Me1-!XX9j.&!Tl;*$:D;F`MmZS,3oX)l[->G[R3F(gH.U'$sB*)b'6MclfP8a>:>@u0'k#[Rb^^bsp`?=sW*XHZWMb5]+<
%Kc4cHe-t)\gSJL.m<a'eJd;8;)#"p%FA&HlaiYIPh"GkTXPI]7qI+9L&d_i"ql*8udn$%>m>fd*M$VHaqh1bm/P07")o_,4[f]#W
%]$9cTQ$/qfG!+]V-gN77fHSjfRpHJi=6io)]/='Ai=2YG.Ro(ILBYbJ+Z8H6J%4mpSf*IuFPQH@?L*B53qN@=UioCrNdFX&<][rV
%Ak!p,3.RcAV[3e&)(Na#STqr/DM1>cofR?[[BCo?ZMa7>.oj0ga>]_9)CriHe:o-'lSdigpl8D\(/#i4WCR38#l$+Kgjr\Em(/Ni
%lF>6#::'s#4[0+l;O9p48ctcVeG$%dk>@5"apCk/K<_u[:*g'Ql*a)28=uM=or??n%ZD:Fj0eUPD>EkoQls1-BGB8PdbfZt`Akd%
%(VBAY:@,?MN`sEfb^Q6iXnph!j0d5o^pcZ6a,!Ot)H3cf]i84=+h.>J*!JUR'__*tl_8Kt%_NliFU7;f2;A5[oPL$1bel/oYNa0r
%!IJ4McD@_trOWa5GGC;J?MEB<,-L1r8)oBVC>p.d:S8^XB$V,B.Hp(^TJo\En?]:1,'RiV`G24U3fR.0^HqfOJa]9MgPE!5p;tXr
%)I[=%%q$@pD(kVS_h;sL_Z@Y5_JjUlfPJ"E4W.]W1f:o/Vj_K]9/TP7C;!+R8$j..c$[R[hdB#-@mR^?qc;7]&CY[$1`t:/p0FYK
%#tVNL6k((9@d4P=/15:pDmIj]D2KX@1`_8iV;3jtg)5Us_g!nmTIL4jT1S?=<,D-M5i+#DNg3KY5?%@nW(6LX>lU"M8Tgu&[RLn-
%`hILFa\pL4[gc)q^j`oslFo,.@(+dSbBh[q%`=M?b!;jX!:"JtWr.QGMoKok0cT4H[GM2u7<I9#PtoTkG<\6#XL?QbciFTJ(2U3=
%kkFr..5pHF[2f[D`mK@9JYB]S]#EuTaK8@OdAh^+S]GZ`/;&ekC:*sVjs!1?jDjK/3QY[LQg(P18H*o<0h.nZ>HNM.-6iGV5\[j_
%X;6;G0e*O0=Ds7eGpECPU?XY3PR_Q4"!Ll*"s)UT3!,P8[Hf[1OUs(.-D@i"D'YmP;kei!Ft0%BR*%0Q<@CSDTf*+[_(K5B&2g7.
%LK\LO`i5EF\\Q!u&lKAO>GYYD9YtR62Ko9IY25>(HL"jQ]W%..`l;EhU2BAj#b)3!IasY]H:V^280^U*(N-9::(BT__4((CMb2Qp
%B:It`d<l@7b+i1$]&DTX%af'0lakn2lknC6Y[\eO$4+fI::aE,p#H9$OIE:lUH[8a,$qm.d2j6X[*og+N7[u\CcG1t2kD(FK(1-T
%ZgI:k)A)5kV2LK,UuoJKeL)J>$23Z\"L@!p'bK,$DTQ[>j1'eF?3c,F3`$EoChS0DBX6ZL(B89L>HRlue/mb@!4+>A[mi3!3RH[i
%7.$-^aj%'S7muj:'/6e;QO2=>?5q/K384TRR'=_\[E#$NDlZ%+[o.EDJ-?eWDGpo(?WWMQ(F\R%C-Z,F'B5WbWR[$fdNi#,>;)##
%/;9nk[QqEYO%eQEom1-'r"a(3@m&F@Dq*W-fup8dGB98[cIZd!N:J)K#WJMEl*+k%,dc0gqRG0][\Rs&7d%p0NMjlg/_5AWO/5S5
%N65F"Qq!$V<QmR!_^9YrSm3Oq+6^N_C6s:9n$]oWUF8c&4nV<J@Da+a)?7fXU]rV()]p*kqh7;V?nNfS#T0p:0o+-iAgZ'n"LRlF
%V$Y70I9^fCGV/DVXgZiCQ^Wk'`CS&:`#YIGrGYe%Dd;WrKGJ,UM3_`=NNee6WmkV97:5U"ZP5u0RJf_=a%.orbKs>pbk,)hBJE&d
%R):CM:03!AHE'44\4=+gG1ol:1Ie(/KjH*0[ur_N1;!'G's+_>"fi^"U])`FS@\+Un`^LmL"MUAV:pmM082NV@D-n132VdHZ:qa[
%ca.;_<`knVY5IZeO1eTI$fs9M867UOf5aNOF/Rf>8QXL?c!aDm?9NF],\:0E.9YpX?aSEP^N!oOYo(11\3N:#<\AmWY?&7jjanq<
%S4`QHM%pNh3+"Wu^k>)+p86jJ29tC[ki(N6N4)#m&(0e>)Kg3,$BfF6?4-UH8uGW;cl(V&hbO,mjjd:HpBM>mel,-4MM_]smHEq9
%DB$>i2[Vhu_8925osu^oL;2L.\XnP*2S,k7Li]Rn:P!!82f]b8d7ZUc<2lq];A"YeV4ckAJN?W"l85`=U6hlN/*j(4Y'TL`0!Vt3
%B!kN9Ma?`JnHoN6?dHpT?.bP0=n`0F"ui#dPf!N%g8Sug)Gd0)8'Ee>!&>Eq0"*7SW4\1ZP+5:45_`cEGBQm&i"+qV")7kn.sB)@
%j(l4imTHSgM[Il<>cMaO!ePB9`+Vle3$$Sg(k>jHbD$1VE?#II@LQM\KM")XR)#u5Z.0m;ob_MhITXc2Sg4*QLQ-VTGh$QY+OL"d
%Y'/S1=LFj5j3?/17S]@THGr=hHKSDLoOtmt)k]^]Wf7%e3[Bc"mB0@VSD.#$^6Pu!G@1dn.;+c[!\q:D6fK9-41je/0'[>Nl?C4f
%4k+M%k/+FCMb8DL*0+<M*@hLI#=8;Kle)\)E^$;+k@E_7A*]P<Ta=12qJmIK!29VYjf_/>3hkNlNL2map+t^8-<`R"@(4J0NM@uo
%6k;`HqbaYUk@f4"pEQ]Ir<DS)FG7mX>$-Vr@An\Q\BL2JB`+5_=_OACB-X\rM0sUk]ToT,@oN`J=4(ttElP)2(:dlM0YAGAeY=j2
%CBWC$Y#+"H2"jRM^+/5:O:g>C<DFm*B1Hr6D`dHH+EW:-*l=uZ))Gb_M%R'._`h^jXi?(L3H0IoXnFD&.J/)L$162t!D;BGm!q<X
%@:M.fI_?#YW8Gt?ON$/t:2\(H376G6(Xss+,O3r@gaNt^K&Z(_aET!TM:@u-B^h;EV`gO3i_E1CVEJb++rY"p?[DF89q$su#(17J
%G1sXF\SotZ-TDL=(k>o2UL-VMjA[mb3/arWimuM)5oKH&ODk\/#t0:>gN;bt;GN2L3Wk"d5e5V:Ul14MI=,.j&KrkY\%_U%de<"Y
%.6PT*;m+>Fr./BRF8PipQ&!2?jI-#ooBFYTO/q#R+$\P$hlT%S&!#5I40?3Me`LHAcL\oD[H31SMOSM@kHCNFnp?ifYP4V.RSPjQ
%5!;$`Bm#>W@@&#r9>i[U)+H^f/Ut<Cgu$f]P('dE^".#gZsV/hk[nJni(hJ9HJZbM5'qFVZYb#d\]Wq[`I'`Fn8b2*K@5,1d*<Gn
%2XM$%Sc#tC=nBQ->,Kk1BP7$74'/IYpq:PgDr,u5rDn@A(:qVSNTV*F>J"g3ZMiq9a%r,0>l)_/?DDb7T6I`I$_MW$gZdF,IVl&g
%=PbQnTc;+W_H3t<q=<^XG.+t\ICEA)??L9ip'9$`Ofo;d7<7mGBD^r2\#LSgF?B6Ynk0'K4ntW+0C@Z=XukP/B27(Ie^Yf!\YUp#
%,JGb5(3b\fX6&-%H+p\W=^hnBZS0qEY3t?l^+SKZm\;.JT&706.MgiUr)?hT/K\5sY)0FBg9&NrYFCe1cV)sVdaO!;Xjp5'be`Or
%mmt7:cIVS;#2SdN2kP:Lp#<mClJoda%D2>uEQ,@Fg1?Ra(&,i8od1!6/EWS6hZ2j+LS"I1)5YSMDSq0"-ARYKf@RZOeNU,b)VuPe
%mH!uMn%IO_',Fp*OPg)ZmldpsNA%?eDb;*1l,C?^ZJ?o$,p;FYIrl4!jWf8u?e(9=:U8S&HsI-DS'ljR52SHGDn+O4$?oN8['1L0
%?[S!<8/1:-\@B.hb$S2A'Xm\4mC0\\'Rjq:pT&%g^8LiN_=*?5-Vnp;B`@8XA)5Mda4jgpD_JlHfaL=Ym2]ai^Dju24qED;3?/*'
%IXH`LSge+!SS\:1Z5Z.&V^DGZ^D/P;q/<>0o#?UV]<;&#I[4?RI^T,*J,U^7G#dm>Npdbp1M;rG#\<;Jn*e([V%:3,^-:og>Z/Gn
%,HY=U_q(>m](O:>[.fQ-q/j(k=UOQ-/#uJ6D7rrUKIoPM]B<_t:"F^d]Wfk"?+i-T&)TR9ZfG5R(5EcT['lE?LbJ_^lm4g;HCn2P
%Ej7(WAo%'ZGI`g=P-"3/g4[67N/DB6$,:0?Cn5_:B$Qul\qAf)S';6)rRl\P\q@4CZt\FHPtXEC\gP?F/3dgNjKA:"LYW>Jqbc3c
%[FPcTq!hB='#fu`*=$qZoB/Nah"LTr!ikUFFFO7Zm:n/EB%8p??@.epqN<umjN>dhK=n]B'lp/)HYH',bembqareA-)s<cE`uhV5
%cL*j`)[(6bj7&*"He1n3o^ur<N=@\dRr96uj6al;_Pafe?M!T=&?B$tb<DM6mC+%r>bt`bdWDXA4JjY'p7I%\D0_T]C7s$'.k"q`
%X,im&Gjb<Pq$CjUK5[(d*pn*q9=<".fB;shb2_T8C7tLo):+fn2D041SF*qB?0Ba"k[o1lf_lM'Uq++gGY&8RpuXZ*po`7$?@RI_
%pE13Il7+Ugi8_]WYa(7kAkoAN7o?p#mP?PN%o)r^l;9V6ir*R3\qsO2+5qV1b^OMq48=7oH<eOd#PiE&iKkUPE)J*SYM?[OKRa*+
%H_=Qn7GkSg#U%!,O6;?^rWq<E?=S3HXS<VLq<BQ1pq-F(:EFR(^Wi:OmF63Bb,Z-fG6_!jnh4<3>;'g]=tB/J8^6@l]#$Zngf_d#
%T,VL7YE,BOg<S0i,BN%m`J/g=m-o[5I!M8k&+861V(;;TjN(Zq?jAnZ!D+Z"%I[ct.9Tm#4UkdpTUXen'WQiFY?A5o3VfKKQ(K,E
%=8;/mq0:7R%UiMj<+^Kj?sDsm'70YO\VhljBV?"[+o.e7/7Q:$)cGL"LV7Qk"N,^%4L$20E&bmY9QC\8%5a;HK0`*Ebr@7bcl'^/
%A8>U4ZAj;ciLku!.Y%,ZL/"951/pHEL#5KhSqc$"a>c6"aSP#LX+1MSP,1H'gJM_&)142_IUc/Chb69oI?U?G6@OWJ90so)H9(Ou
%dM;a2RgQa`$O6^goM4V6@=gF]>1B5,VgpDMC\Xrr[%ZIk6T,MO+J:6LQ[[',e;WJ?@n!HJ+J0m>6`LaoBGb+R<#3%Of_Dt;dXWp=
%]kon!*DS57<drfTX$8P:!_27JB54&l_CLb2)4;WtZP<o=3%uRL<&HN:a\1<)>]rUA0ihs5f22[4QU0Y-L06l8>bIiN'1Ou0RVCMB
%%s!m^g`\1<nroMoJ6&/S8XI8`Iq.1EMG-0S;SIMZ!U#AQTE!!&]m3I.lk"1Hh<Z`\SHE)tAKH\1]!%F.$g4(e7lsqpnX\4d2t*@6
%^2<gt,fYX.$N4[<'Ft?co*,rZJ6-':,]?(96LuDE+$rZ2no83OAT)uV-tM!'rT>q/kTsqCV@V%5ds,c_]Ba6D1]QJ!G;IrIp>!i]
%e5'Fa:-8?\h:7.;jkapVKcRGJoQ-%VPqY@"4m[Y\qjogjAWLD5USFtq%rWRb`TXCiejopQD\ZWOAF*+<:\)h9O1l*>+CdS3]UsK>
%p(bToH>KdOY4pX??;&=l#<WBsr)5XI/^iZXMt)(H$p"78!aE"uf:T_mq=:T[ksje0,D=RYhfC7aBCtW4n_)@3<!g-mAkShj,&o(E
%J!W/FjM/AkcW.^LNNI5<kn6>?7g.K8jK!-iPSuNmoe:41&ajB+F4_06Zu0`c&eFsi-lb@k?`pRp<B\!(:VK-qGP!S5[JE(r;0h_W
%;pSMuX*R[/CQSO;+j?8"VFB\,pmIWRk`suA.`6h#I4_4VOc7FC*^!<Z*pUT3ZRR:C@=$:i)aoE1Y.YW3+K;_Opj2p-jS.NcA]WSL
%WBp:&_u=gdh-'R'Qc!K.g\!Z-qC5j$]t+GL]9&p@V-TpT17^k#+I!K8ZMi^-P^_;>0:s?B/*tj!?g3`P3PGc8YMJ+2kh*k,kLiqW
%4$_'fg.P]Wke:EH]R"l"VN>.6q-Se1hfrP]fA2?pj5@mF1X)ZlM\Ga#29nqalI2<KeL,_,kIu=l:;\oc?Y$>N=!@&t/r.T]M,frs
%fk^HZ:A@7S0JGCX[AndAjWu\[6Wb/@Ui8ln\)"G%TO(*Q\=%fRqXfdEh='=HhV!5Fr[t"6=*Js05K]MaQ+k)i4DrQ;f6;n<#<<*O
%Qb1a7_(3\^d&&t>C3Sc5McX:qTpm\fZuO[R4`?LASZUKSdug@C[AnG[b2))rRBtN5Hg"nEC(rl!0Gr*AotXW&QTD@B<\6/NUZ@.4
%W+Wg_7pCnN`iQ'D3F7mYatjS!(T)C;;2leF5rHAEJM+#D=18N^lN:F@o)A6U_'WYk"![+R7+=2CE.0*9MKABB5O[a`-`-L,c'R=j
%".s_UmhY1K>tkG6>]5(0<:V!s[W[%a54gb9]J!WSV/8B,^&2AW:>\7Dd.>_&mH=kf[@V?uV3sL3Z4Fb=PP4G0,@6D?YYb0mT_SJ4
%hjp=_\)/]?j_#Br4.G[GdAE0,<[kbm^cF;una3aYr0_@`im0K^YmflEV[.A=@4Ue(Nt,]Z_=&D3pCKgc0?t'rLAfkFWX!1pq4?I#
%4ZDYuoB!;@(5R1d)Md.-[?LEr><K'koL2WgRX)Gc%G"P7[G)WRhdk"BG#0:"qV^kPQZlX!U74/,g%`3_q;RWIf&&[.\VW^;b!/&G
%!4b+7"C]KOf7iguX,[*bl'(QnR-DdU45ZYG^$lE"YAV@jBO7RXZSuY<#1JNNg=cGnl\4GT=R#^C>TE+ZY`6H[ih0Y]B<*nb$po%6
%JNqgMHG?f:'P*:bN@3ln:i5Aqj3^CKM6^86?$m_^q66GL`.s,%SB%fhB6fhSX3NlKTPNF84.AaDWcHO^`b%K%jQabFik(8E4Scn=
%ak=u65lnOJc;bo-[WaV;9.k_:hsKN3k2&30_FEtj)gf1pr0Z@pSfDCf\$RqFqd8dI!G>lS.P*f6H6Af-.Wfc_X=#b4iq@tB]ss[`
%k:c:P2XSb$3X7rKj\aZp$4!iDZI_@pqma=[J*@r,I!bTsj$U.3/6?>&c5tb*/Y(^FE!d;^IbObkX](Hqb<_H^F`oFDO-ZK/c,3QT
%0lqO3i(f?S4P^P%4jZVL/K4r;,l>?*)BgEQmM0c1cO`2+lsk1BOC()UJhj)>YIMmESn2_XE[f59fc#s?2+F=5?Z7`d>$8&4SHWF@
%jCr7FSmLl%5AB+4;79Xe*Xlc#b?dF"4O9Jbn%O8EplkM-(9KXslY0ojrCM0R^&J_nPMJ]-!VoImrSqrMO9366]*B4l#8+DL8Xqjq
%$S1\,4.-oR8L`*Ritj@Aq,0qgorNDRfTsA;+'i6.el\@$`n)^kU9_VhLGHWF0,rg>Ab!F%^N`^\&dMcJgP&>/ITP)sqh,/B!#Gbs
%?fj71j^5[QhG>pHI<E,-fHoY@_IhrkY!8t*Qba9(D=GT"b`aSbC0LF]\%4D(MQ4]I^n&e!BNWaZ(]/E]d+,$cgM>X*pOsW_Et/jj
%^F7l_Zpl1aI>naD$6$jsJj)A@,42[+b:>%C[En1mrpn[d;Vr+Yk/15.H,#XW=.`gU/*)a%:CBfi'C<qImrF1p5FA-BlKAL;KlNGa
%#gCr!pMq/Ho5&&d4hWV`)oR',LIL?$J@3Q)Q0mFN`a$g'hHb#+Hq'SlqY=^0f078I!"E7a5J!?5K.L:WT+,Xi4FCJP`;2p"EHUn%
%RTb\L=Xj;8;E.\XK"CnN\UoA'7J#s3hP\&`^!@/oc#kssgc6d1"qfLu0B3_Ve1"m@^2oZ;+'i_RK_Gd[CD7hlXDs&VbU(=eG,fT-
%Em#-82gQL*5CX]M2-R&*8dej=GJcOm:su)@]NH^#Q='!8kY+X3IJ)hGISn@[?8ThTTqqVSA[Zd6q%a:0G+LS+#O33')qiJ?[dDdQ
%YE"W!VqosHd(rhdr-kcr#!\EU_%<Z[nF^`lN/e7*2Rfs<PrgN;g`&H?I\>YU`^XtBU@E&J!oDU_\"@m#YPWOM[FGKoT,gI+,URg5
%nf:DJ-*e&SYI0/f%a^(CVL/jeq<ZLQ#fl[H##8>?dr2@Dmg9T:9eU:*Z]GM[668_S,t`%-!HX^dX_,=r45S*JQX4h*c^0t+\=U:8
%<h;'H[jE>sh9LZO4+>f-EHu[t>^J.U\CD1/lWsmoD_:SGd5h!G@Z<d8oCHk?f`/Ijh5;#P2%[21cSf-Z\`agCI\AW`1`!1;Iu"H]
%@kSek#,q'L'2-@<8+78^QLj2Cc$R+pU@Ym6?;5A1G#S4BFpTtQIUmAG=Zs_=V:GRU@4QI)6%\?5b_H]JK"QN:O`C*K*ScDMJ_n-<
%DPt2=mV`$Co?Z=chY*;JiM<H3i2[0%]A*N^nnE_p?5u+aq`$bi+T$KYXDm%l]O'69kahCLk]*RTg=Z1G__HE%Sb4K<3aCFoqr!um
%g:]Jh]Zjee%k<!n/21PIr<aOR10Jp,G3*i(mK[">b[#YPra*Ycmkcs6gYG>;23IM!7%E=r3VPT7W3T:-\(Rpnqk:[;)jE0*aslQR
%B`WXIRrR$.GHkng-S:]pg@5FFm-D!;6GAqObF>[X%!f@S0@Ve5i).g$ZI`=8lT/kHC[r*sh.cVb'Q++PQ;KU;l>G0V.H!CZh9op7
%11E:%_V%)sC!FBDR?PY,=8q:Xb&oPG7Q+m$DBJ5JIEp]#B5&qKkt6DU2uZcBVEObSk^!0eSTb-MpZ1#aqt&rOBeTWH)SuA[JokSo
%0pqS*_EHb%p$=+16r1X,^\FCc@gYi.o[RseV.uL74t^]&b._14/<OMbY$[a$je(EZ)c7LfEg,uOhoco%+UUjIp1@[l!A[8NiPC;m
%HG820]IF:`6OVf*nn/uE.\H*Ne'0P6(EZ\J:]t`1_8G)<p[/j\kSZGqD!h%!iI(%;Aj8.=6YF#j5$-Uqd+@(7<T,+(TfYDi%N9$O
%]hII5HNUa9*9BCdhV[X%q@669k&^:A@E=%lAG[+[`eT8'HV9'*[30C>%-m6YFT2+$4Y,6/[<$i,Gd1;4gCiAkV]&gPqZ(:/*!<b=
%Sf7E;HY;ZfH8fo2Zd0dN/O:SpZ0l3B)6XU3::7s)1KuqFT3l6uqYhASJ%khSYqC!!h:_:%"4M6p!_'2,"3iu+l>GRshE`sQlBK$S
%5eQ(RH0(3]XhXm$GOMVG2m2ElpV+.bgOd7*_[GG/,ZhPJnKI2BlD*A5]Q&G7/mZ26-hiE^b##\Xah[5#4Y4&p&b^]M_S(+,&$2Xg
%jO'cH.PItDm6/A>IsK^]4h*Gl[RKiN\t5cCHP`$dK4&FY,$rF?:jDq/>GFn$5GWSirpUE0eP;rDoeHV>E<eEO7UE[TpV)t?Ht*S&
%HMfSieeu$i=hV\-kVrM!hmQ&flD1A4n%?+@H>rE;+3P9Y793:kFh(!S"uP\Lmaq@3e7M<]T*)O]]l=PGYCkTWE1lChNZ\)&Tm)"F
%+>V1r0//:^4sE,>+>6Bj+enmVTUIu>?NqVMn&clS)7VEOX__kVa#e2;Z5S.$#Jq#@m<McNe(`Z*k131*Y8*JS_5?ql5MU"MeCR7<
%puZ1kdAhOF4<h,BC&$,!USl`t4[o4nILX7ZED)R7HZPD-#Wr$A:@KG]pu81CpHD+Dp."d"n(0(7"37IFMoY]"%NpcXj]@4*J+:'V
%RnUT+aR.r7f[%4eK-'l4f=iU%%6K&>U6gt[@*p5kas\j10Yk/[>Gnn6<:/=T\[D-eYBu7'=8r5u/'Ugf^95cr2DO_RIE],NI%_CP
%L2Gpsq[C@fpb1Y;Vm^tET2;`bj-D,&)DOnaMr>L#Bg<kM=GW5c">gBBLfnni$SEW"AsmAR'GA@4L?Yoja:N(LJYmJ_X:Jl#JQ@SZ
%p*p.*,#&=Tn2O3"5nLo^NZkV;-Z.Vn6kFHu[N$6>#:Od-8CBacQgIA;D$(In@YX:B6_Q`^i@/A;kg&5p,&+le(Y]#20KXqq-c/X=
%%CmVn%B]`%j,AXVdpQn5&3SB,'Vn6^_af,g^mfrtW6`DdO-%o.=9;<:kY*Ei5Z2n&eq(PDeeOO=m9"BMKopP/UCemf-M/Z2U4Eu/
%rE3jo=B&.*Qo7MNnQ?6k0H!2c4SUfr"Be\fCKY@;CeK@RMjb!+Ei6DRcVhe\:`,[`L^&J48.ZB1O@-8Zit2hdC\+p;C_hT]bh=D&
%d36oX@:gODb0e!Lb[OE\&8)S,5S9sW_SK'/.=OI,XVD<nP7dU39MQUZH:0<>&Gbl\ODG#r"$S]/!E8%a:da@Aob:"9UVI4E&5G_`
%nhfu(%?DB%"GgLq4_d/""q3X%P#<WSe^.-c_.J_s[9s7SSeI"9TPm)OdN`-?[j_fDgM'#i[?[W-Y`u#:2E=Wr;JF[,!7`:=<.b49
%!8Cod:ja6k0I=4E_l;saAI6LJR2/&q&t3'-&LaXk_>]$M+qT5T=pYp#b(p>QB4W/ao/uA"S=.3=bt4T`U_:O<RLZSIrRH4f;CK(?
%lP^-.TnYg`AmhQoWJq9ATg,@^1]ii!P)<a<TEe*RLr5ss#iZ&t[FPo9.KnE7f6V+5K_`bC^^Or%FtA=Qgt!7,0^pdb<S,+[c%g#f
%fEm?t2l#B`X'64$)p4aYNK][pT6iQ%125K0KbC'2L3@83cnWur#eRAC&Km9,77*p`ZB0nU,_q@%6FF%LY7aNB`DOl'b`QKJ@2tht
%"L.qPAI,u>j/\[RT8H89%A@("NOg9G)&gm0b:$Ou#%P,aVdPDCP7E6=(d@58I+bADNP[db><r__$3=Zk!unTN^5iuM2:;R!3<[H\
%!r#K%Ma$bu3?SkAl*/!g#YVd7oO"m),;&;T<,O0s('L(&&1%fiWr+oFER6[&DYP!kWFRje8S!BY5ia)^TOBh[#i^S*A,q4<O+R"G
%C&ud[J*%7GTJkCt93hdYBkh:tM=b9X![Z@i'hggSd_rttiHncdacnbO6S7@DJo%/)NoU8!/K.Xm3CG9aJJ/6qF]]d%kPug4"IUK/
%(C!#N!Z!M$F#H'uU%ef^5c&/Rc-]dS0_c@20rT\U4q_QdQm5`^GT+,P'?\[b#7r-jk2&"l0PTHr&jnABg8GsD4$M/+<)Y@*#q\Hq
%S"^EU+[R0CH0#%&8urV3).k^r15^&!QEVZJ^eP2nO+Ne;&*mn`3LCg5fK_-Wp(11(S;QRs/B@ia0ku>l]FGYt6jD^42/!&3@rg^U
%O&a,jQYG&*lOa:jlpi/mAekLj*b%JJMW'l.mMH*H9LWVQPGT@r"Tg`>[MX?5VYUSuFleCVLT3SQK4C8L!4X=?OJG[f?lO`$"Wsc&
%#lf#^=&0>Vq#L=>C6#)!;fkI6@(n[P-DFte!'*N4-3;.W+=:*00iU:Jri6B`o/K-,Q%TPqWKJXL@?seL._WO2ZjTe="(V]Q;%(Z'
%ePbE)CWa&,0%K:D.fPuBcKANrNcchPe8#9\lIW_Uiq]eRkF#2r?hVtWU<:7;[IN3_pY.K5)Lg4h/&h<a+9&I2R_nTnMREJsY0rT)
%:#hdOP=1Drq(MS"0u(Qg92$S&rT0'I@D?4#[\kl@Z+ki;7lEB=j'GV0.-+P734ag#,?uRZ&H6YW>D%>'*P<_o=??#2ah7=AgVWHK
%g^^OP.$fnk@L0/o4htmummf,0Aja37AqT!F^k3"'%;g"8@QM_FUNeijMd@r!Ep@)A$DM-ee_#IfJd46r9.(bRHW\P@%Q/*4K"Eps
%jd9(U2s)NK=ts1)_>.<KS@5[J&"`K\G`;u.!/DtuOl6388H8l;W8T_#=Mb)JaWLWfO9GKdAO)Jodj`r]5)Q0]^Z`!I3WSWV+Z^C2
%)8QMhgQ:2P+DVOhg!au%p*cMmr1]8*3a_-:Cn7:GhQaO/B,"-3IaQ>T57*isB&d&5k9/7Kk$ADJb&j"&7e'H:C9j2ZIV.F%*HdN.
%1X+E%:riaLN@R-?nW+o?8n',(OA-\DkSJ*!#'Y0)gg6$b\raHYnB-JqR+rP@6O!I%;[Am1"_LFu[`Ra'->$09f6DV4Ub;DcN0>Mh
%PiH"6Y%80"h`1JEXUK5\p+lK65'H69f4$+i\&Ictq9.u?@^(4<l6EcL9L^?fUV@[W2caSgfe!T>1Lj*$/hnC3&?pSC7;UpVM;9CT
%`mN]9q+=rbNj:aFJ'SP8T`rp)&2@&&Ul:/f,i'q*0a'9a88O^En$:'VXHCFpEB$[^e7=!o[P/E)DD?F7Joc\d@((_Bq2j[n&I)md
%1)u+.=MO?7A7?/0=BGVY*,a4S8b^;*B(S$1`^I#&oGSCVPVP&C%IAh[_Scg[G`]S--98Qs.S")2UV@\f.HQFc0>#aa;rT8'WnSb^
%RF0n#PY:((hFqu0*$qpO,[R"o_DKJNEI24G1]!TTWiKGJmBt_qWH;`G#pqY@C^He'5_*VJ?:X71HN7!e#BF$0HL3'IH@hRIQ>Q?#
%)tt?,[h]/L!]+[4]HlnPiF9<lADg(rM1RtR_lDK=MRQ.dL?BV,;oN:AFH;B_7t9!#9CuD7Y:\/Fm^"1pL;>8@2%Z<eQo:Jj>H-_Y
%^C]:pWl_+8pYc]&orc9_@]OP.j`CA*p.4ISl-DS=C3_,um]G4#b1&-X!J)4]^=oL0+j,n9Q@105W1cHZA-;u#?BDoJ+TdX@09/;#
%g6QA5_G1)!D0]e<(l]'S]/,/6,Qbq#*KoPYmL9RGGA%nIgh8&I:h4cd#`\84m=?`"_bL8&KVS''\Y4C5#W?ejZ]Sp'R=dT.9a`nX
%b;BdM<+dV4"mX0JpU1)Si0T,UIqfo]/j&&>nT>^ej&$M91e@]'H63oHCstW'?j\*e@Nc8l4sL3s\)^S6gj"l!ispf%H]Xbq9[6Qh
%rcq*Cff,fR#l?Q@<2Mt'fn`.mk:/ccNF5?Dp5`6,X+?Yc\"[NAR:<F*4)&flaD6$J#Ej8WADqeI0Gh5F'^J3mQFCf6S`>hl""_-o
%@2+e@6&VX9LAAh_i0)kV)DDC_qjKQnA_WO)eSTk7ndeQJaj_\S\D^PhW]iYHNdlnmTL,3k1/-LHYm`*J%[pFD@`RI,OTSORP"Ecj
%4k)5eHXK"9OJab*ARRCMd"j];XUjerGuPDAC-*r;$F27+;ItBC3O>>2)m,Q5rAVqJ\60U.)Y%Y-%3AY?6^kQI0/;dZMoh:WV@Tt>
%OTrQZ.rC\?G!=*8Pi1M55"_>_c]jmg9rT]eO@7!#3<gN1a,P-Mg-.3e-8FR_<#t+RYAF,mVDLD=bH\(LO!WMI7b3gO";J"4.CF!8
%5BKZM%XB\e=6^$@@/dN5ZO#*t@Xk_*B%<'CE9<,4>XX8sD)(1sK.Sn,2?*TZ0X`Q3GB;P/E!UHV`RSsBQ?E\[nSK2q>Eqo=9[!-H
%)J9g_2U)HenC5.Dl'b(\[_K$!fJ[Tf4\`CrieFk2=M2T3rQ>u&ScalUkoZKWqqVJ&LhlM@9cfT]"GtZ!KDUu=;-R@j!Dn^L`WrR]
%F`ct=:!3r=P2YWcehAXl]a!1b$rpc8&jnMaL2']YpobVdaRA+-.P-ERY%mkmfHOn*S@#-]3hfa%$B,LlEpWkq0n9Zh0M."XVuUSd
%L;)GVT\[O_-&*m(<3ou2jt`[J9=.B<^`<gj2%7r@j)hf>18\agCRc.p*F80D/`Kt[6hn-4$)XDKbpIT`Yu?LMRY=qsW!_++Sbh_b
%qrgeS8TkFolr07YOu2@u:-H6S`q&S"'`O+*ZsJKuWmaOp=/I]p+/kA]rS-E0>"hUh@\OJKQ'eLW2,PoA0R4`SRO)QZ'1MG?@On9n
%q=RGm0o4[65n)64U"ggf^12rqd",421R4?,`(\F-R2WK"m9e37W,VnqAYp?Q\6c0KW\T:?<cN[d!Zc^\2;0Z0eCF58g>^!CT`T."
%Q;C&!BRd@FR7b\&@]#=*e?9Xbn5TYWZ;`&c=@-jri)[(+hSB)b6&``&[;coTeskI(86"DLM;)9h%io=B0iX"'8dn^/W.*8nn['G0
%A<MYun=$d@<'8DBAU747LF,Tk_A#e86C>JUZFC*:*B=RC2)/$dR7b\&@]#l6+/eYRP`qu!V/&iCnaerW^!G-=$n)RE&%,.1:+a<4
%#t=ZU1s=CPkcq)t*G@Ad</I;@$rpc8IP%.;rT>9>5:7QO]QE"qHl]du*T=moX!<#EG'/L'Y[Mrno+IW7`(<X'@^6W12:Q01fbh.P
%?,6cTVJBs)YW6!YT7QCo6ebD\;IYq)Z]o8m+)dI"D*phgY`7l#>RbL<fB-^R1]#Jl'=3pjV8Oo2dF).'1j%3W1+*1YcF(%ufQaRG
%#Ig98D*G3sM,jE@=J]_MMjh]BS*K)bK3QP7HuP:[[T7h2ba%__h.T!Zjhr8f"t;8tM*W%uOG7U#f9cO3D(4(KC1'uNJe)`L+52$M
%PS0aU(o:d7pirPjAG`mB-A*8YQ)tt[6E]7!S&g@BT,=EC./e@K;Gp?f[=Zi2c/SR/NW\%TQ*hOc0WqM'i0No,m3cKp0h[@+9$G_.
%ZSZK6\:P6/%The*@!fDh4p)bBLUNckV8Oc.7d3-MP]!]7*6lL-NSk'a[M<&8RDI/+$9ks?Ht`D6=\?n9@[@"7B'DdiP'g]iEi.]l
%Vl1^hf`++iB'@:0)o^h\W[lO?iO.pLb<Q$"##F7eCfBZL``52mQImEYa%=I`LCli#NfYER6.:hp<fPaDg*FUnJ;QSp`+Xab*^l2Y
%OCss.k!G0e00U=A/V\0lZr:CSPX1CDE"V=n!9(9#!!?nf%)9=roG6P&*KnR_?X_,)Qu9g+0*rhmVBO0Z&LapRSS]K7cn`?!#<kRA
%;2R]=_pYCgWHb4!!?f%P516VF_Ijl[_=;Xf&OaHTq,BbO$UN0h6YJ0hYdo:C6$hMCm"H.mfC_0aQ;["R"\Rp.=lWrph\hb9@7K2\
%5H;K)+@rAWn"H<Cs0W-HM\g!Cs$.uOhD2;gE3to76[o?b[D9,#/eX>)I-Q3)*MS&=Y_SCX%=G"0@usY*l,6[&642ZN)lMFAc7&e2
%;%E96K?l86%6`Zk\0Y;Ii&Ljd9)8Js4pR$')=AWCVNiJdA2EbIK:%9i'FMi&BRop$`oR]8NO2&l3K-k_+(8*iRPLmf2QP[<W"_FV
%02#]-bm;$._;NfTnuXR26\p%1+;Y6rW<sPC01Weg_2DY5A!%UdIUc4rO=u7>..o!P(<9Kqi6+,#I.N)$:r6&=KOHkR_XR4b(;?#c
%UR4V%o<!n4HM:?tbqTX-=6:]'+O-X>WY*ujZc+]e5"6]kW92,SHdI</L(o?7W;t@*3=:SG-PD4N2?aMoH&n0p+Fe:q?GqqUTXd?\
%LJ++jY:_O]?eW:"7%m"@YCm1K6CUFe4llB'LShU*'KN`VW?%d)H$k]!`r[F#c-mi1!*a)><j]CKe0A]/1`0QO>X61LYsUs>S&-NC
%F]HYo/1FEF5WM/61C=$gfbh/7a>`T+B^N<U[8eVi1_;N8j+P8F74j$Na<6C4;5:E8:'H?-(M5SJ.1O_B"r>@A,$MMB!+.>q2A^uA
%-:gLT;p6G#L3.J`0[Bqj*>LOCdK6<O(a+QD"O.D(4$qjjHpO*a^i==3(5kH*Es[6E+a@)nSs_Q8:_,u<<29gfh$]\S.H#s.,BH%>
%;FGM+=Uu^d#7"V5(hkT(MY%iSK)p_O"_8%i4&k?YL_i`68#?;B,pc3%e\r&Z/ObV;",n:ME:BtsncLr&@J1-87iCb/\d0!`,LRdR
%ODX4gJ-->jOZlf;:f1#N79L=e)psu$D\31F!:iUP[ges"7[Vutk7*%@3Dh".&ArJmbmb:F>fq$MaeWt9$6pH^aG@ik&r>C<_+bZb
%0d`WV*a1lY^/i^k;N]OH-OnI!O)+5NpagfiN0#H^6boSO1tl1;'G[nRlAmT7/KeMa>0Vs2K*;U?Xk8.FMM_\(fFTAaa&F/dJt4:q
%&,9TJ/85EapbHQ_=[@,=.07sO3ZnlpcWY&J(j6E6Sh@Hb:NI[-g2?s##8f96Otf5*Ad!"o_NtL"2O_hrJh#MpjN)nO**i[g"#La:
%jV]&&EYH;IorJ.s@45=c:`+p`:_)n#&Adir6mI;"$7YV/-4n^[8IWdD,mM@g-P)6:Som"6Z_m4<#6QSET]SRloV>s*&FER,88urX
%LWh0u:P('nL/;(oF*GPX_7+-"B#h#'TJA30b#fSB0Q"Zm[Y6;a"Q(tmit,olDNR9t0b$X)5\\`3-F4FaTLm(`Xr<7UNLO/a:RGB8
%S\_'-#b`To&8E+UVP%#61aLRGgD!qV9ZV%E5Rs/p#r52N]mu.Z>#0di/DVmY8*#&K/('SYgS1Z5@`S$Pr%S5+NI@0&(#5TK7snY&
%]A"4"d:!$23jshS(*80WK(`&qgumIMP)kS^;FCR55pI.+n6U"LB?1[1K^8CdQ-iei2:t-W@brnrn?o6Mm*@O%6og6!_uR2TRE7._
%'dWMMS2'/YiKHG_#:Mu^4W<><]9B!^"@9Wd0Y:E>0U/m0*i0"$AQVgS"c."GNJseqZtGa_C'jqbW8r220OPU'`VU&OH<3V68:^qr
%\4^_:LtJ[m9#krb9F6CYeVVI@N)'"\&6#"Zmu!&Uh"2bL*`rC].E(I+OZbJBoUuP"6CLaj71OFJ(M%J:r#q;7*e=58C_"!l@,_f@
%X!'nh(6c$f1n.AaD(>`X47.U!d=n\+1^k"d;ngBG(O!U?_pn".fEC;I9&DK?5o*CM/fFiK$R0:UR5>_S:s6^L.af<*HR_q@IPn(&
%7Ut-$ksKQ/_L%`0K#2t(BJ@6+\U]V>H@885Otdsjfau.O5&_h<+VYPPb]"O*1+?D:*Y@0\,)6g5)4$r"n$"\=RK?2LfW0`@<Ne`F
%?9B0CR#LFMej<3/f-jIV/o3,4Tq>AX#EX\-VY4YW`D"5R#^'tJ>C@nF#7rgTdWn-C/1V2n+Qh=fSeZqt&3Qkbc/B;1e<7%C%FT'S
%00G4<@dG;6o<>bR.-rl"eH65L$cj0X2e3&E"PPj<MMg>s>00c^WM'T,SEP>p=c3jN+RPK@LCaf!J>ApA3A=RX;UKA>84sR/<^.cE
%-L#4s$4?Y>U&Oi(ecI$"W)[YYh7LZnYW1qS>PV'4gWEOs'Jb-2TFOEfK=WR,*tO(P_K-,P,;BTX[I"#OXe!"R/k[DR,Xu1h`KD@m
%Zut5=.R+(jn<fXOL0&?86DJBZ4rREY0*m=iQ7Zq3(VNLB\Un,o6U?fiQ6*:7&OU:=Z+4j<cB'o->JuO;TRF^%\h6T';7_M5S4K^>
%a=BQ@fk6Q5=rnhR3<s",?0D>RE1`U(V7Kt:*"s6QBg`MO-:*q@c%1KPhjEFgl^3tJQ=7e_PYibI+41]6`#PJo7ZaSPF($ek:geZ[
%gJfEOIXT>(jc]^kDjd6eKHhc`UD)k:k9lXE90jR9]O:D'b:=cG15B2i0JsVuJBE*!VIf!-+i(<>U'trpL,4rk'6==L'F5lsgZKqa
%_?`tmV.'RI>M:0U.$UKM.+).WT;ePc"@WoiB;,ron;ALG;BEN4hHT.jpg;]#`oq"WT1%?GJ24q\`D>T&,U+#gO\I=qFDML/DYs@=
%%%/jQ'QYOR7l;?m\XFPt.)sqRQ$eTGas?:43-e_jY;H=-Pc-ZKAUojuEEsGPW?X0^"/q3W`YG5Ef4#.sWb;3B]mX1Qb8l>;$>WCW
%#C"m0_:cUUIo9r"3=LaX-j_&oF:nYqB_dT$6Dg:TX)NZ)4B3K@ks2;0!hpNg7bog%4XW#6!2q?R;H%j&O[?FC;I@+LK@@X<2)f&X
%$b\=TfG[QJYQC_T.F%<)oi;qji/f(a<0JYiS^\@pZBTlKb)Wk]!"l*mUN3'F_Hfo'5n*%J5Y/t]'lu(8'bUsbAm5YTANB$I6YJ$g
%n`:FZ#IRH;X7$X2g5:S,G`Jmk[Un[b%*%pSTn>_Z/V9T]p,dNNS^9a?j+%#l:>dT)gU7hYh87/8dn:dEaTmdc6IqlM6%fn?!9AYs
%K@'#,`C\/]JJC"'i$>*D)NW"J'Efl@([1IE!XVf&qZ>A_H,*%HlC(%O0t-G7'2p-EL)u33f`&3:bF4\!bd3U!_%\DVUQpcM96%8(
%fN[JaUu<dH(FBmu<TFE^WZj!ERU#\VPSD:G3ETNTfi?!J!)]:f9<MKVa,n4I);!N."7(),b;L'U;umS]./4>Q=^+lg!/aFAOs-.+
%p1hYr*F+TpT/?L,KXaq4)JTU>%j6g!)L<BZ=sb,[p6N5q/ji[S":+M5jOFs+arT"<Q*)+I!TH@%aQ>mB+M--+(@r2V:h6G2'WnPA
%(t)(b\R_U'QDHtPX!&[3dM>/:)<"Pt#Z42N#WNqMVD.s=9n.l<k'dgPQ`Hr.gQBl;NWZm8V"AgJaYEWi/&]4>S2+5)7;nh=M1`s,
%oj#/o^kZl!Y,jn<Bk\.B[Gt3IQrH!MiO"[l3)o-%(beSu;R'%Aj!B7WOQ\GTq@BU"Q@YW\bGp5p5c.63EQEn%5KgG&"/rB7"'"39
%'S9_=rLlb(5=k4EZErF!@F`Ys>*k("*.M+RWMMn2>3Nr1W\1Z$1Qa"aHfn#uYU\l#qEE%8e!@d)/;6S&U-Sp64pdt%d^j8\lir!!
%3rVk].@%D"TP>OHiCkkjiR37UZ/j',^WND\L\NFPMj[t#ZlO[A;jF?ZW#a(:?RbJcS+rG1RhofHC8mR'pCu7Ze_5kT(AGWGF%fbV
%s"Yg&O+a>[$#7ET;)FdKTrM(IqSiuX6te:1!T]n^R@^@Ua&9ObA05RV"dRl/irB2('S&:!Z/^@gZKAYDNU\Vk,r#9MCo1n0,PIFk
%.<*gBCG0ls#\sc>%%6MiN.A-m_GRk/gh=$K+D)"@71=Z#&d&p.Rg:1hXg#P&CE%7-V*\a?!fP(4=Mpn=AlP_A(`-T1g*BjmD-Uk@
%"4;Z)1i""UMi5A9R-R7RJdNX?eF"Hdl?\#ZO4r@M-8(<VH0:*:AIRt^D%,@a-@5iIH:MgZj!Z)WE?'),[LDR]P0J8;QFm23+1.D=
%BX4J9,)Ft$&E3jsMFW1k[;3f1D1;mER1hk&TZVQfRIi=<m59^>P,F@uHGF:q+@%s'oEjicVNOsgq9a!e&pqgGA6A,_9HpuI_u97:
%l6r7NZm!PcGU,oMZD/BaF0+2<VND-*=O>7/PVA)1T]@6:TN$'M3>Ruu>htQUd1$Kj9db28oP%;e=9-:iTllkZoHA6#[RL+.eI1`R
%!c%!)%G^:q(SqEsFWWNArZJJTb05<qA7Nh.f,VX%"?WXqC7E(!8LXdmh?5_I]d^+,Rsp;!6([RI^b$;=!)VU:+>/266MDUuT0\PK
%-a64ZJk([bgHd$*+/Z%TJHq<1k7E!^?'"bBdrcrR*([VpWpO=T*hh&VP[WN#ef^Y"pr[F]jsIg(b!!>i5XG7I6;Xbp)FE1,;gK.Z
%c)Qa/BZ[b`5)`<SD6k4(XHG,.BB36mZu>0L!(>B6*sP,2kn.H0)N,4@4A--dkJ>!8)%^?4<6(0[WgEp?3S%+7!PJasJf%0GCRS-r
%*DAFLU2=j<7N]=Qb>1XZ"a$i#`OD9;$FNM<6VORe,7#"=npQR(_o+-l6:4Fr>DL!<VDaIQOo&P5*a6,c5qol>&G+pJbG)hZVHPM_
%QmQj]]PMXR%L!6?7RC'o#XNcHN.Jq](<!Vh6usdJUL./K(ngPf=c&Hm2trE`.G+!\3Du!!5V$Bg`F$M<[1dLQ]qDR\,n]3>OE'k*
%Q),,XBrG8l(W+ZqkBLB7Jh4';L'iFh(g#]r;?fgmQ<Kb)W^;P9="EcJ\$aW!H18A$#2[j9gEJtd=8O/+UQ_Q@Ec7A:BZ=04.a;As
%?3JR*_)r]'>f`B_%Cld?66Q9SI[j;c/")5AlZ<\'nWR5RB0Pd;E"pCAfdq(Z=!R@DQ6gX^b3*2i=Sa8a@AZO]FJsl)QaMsk'!\#N
%7ht"DG#ZMS7e!5]e48r/ZErF3iU0E4or_/U;cQS90]lD'`J"`mfSHI3a*ir16^GKALq/DFCMl*>]%Fo^?7$8`7K)kt7(8)>Hg^*d
%"V<;6mQ-B-2mtbfo`up<-lo#FWE""gRYlZM'C:h=bg;"[(_t+$&jcVTBrZ%)IDh0-/]BJ%'39KXQ2>&JT`eHGo_qJ!e0G.lW*F)0
%U7_6I<ipO$>)(hA,>>L.XJh^:Nh<@M]LRh"\u"A`Go5K_aR\N60mk^bdCB";+pXlm`7+@2l*7'OUTYo2j+7N*=G\=\e4*cfiMlcn
%La^`66#(>)S$GSaLX1(NM8_cMBaUMW;kF"CK1qh,9-A2[&_C8tBWmLI+dYKKJm'"p,KM.I0D5u?efeuSMl!Ze5;F%b:ID:@@)%`W
%d>WEjM<0X[;m"_>pc9UNDJa5]R!QpUNXru1T6"[T#Dg')<\edXgfHGJJH-!u9`Grb>Y%4M>LVY@8;@cG0:G<6diJfeAr\L2:`8)>
%>R9HsMo7m0Lsi%kaiH?5/-KidkL:m1Q?,T:%8P*H_3o19(r!f=qK)i5C\YO#V6rgTXd5+]&T8'u6LHG3'6c#aD3PkiC$TgaO;V`6
%iV;s_,&7FlYAau;m:9eUYLZTUT;]RMV]`^Z8q2k@Zbs0*0GE9L/8#;Q@0Y8/#r$`SaoP@^O1[mQ/L8dFLbu%gL.![8ajR2haq1pW
%H?`]Y`XGe:m-,bg<ghY0OH`&\9<&KA8Qo(:EKeR9B[tLS8qSPD[*W#[P"Lg4ia^Z=?8"bK&S`HuGC5iObaGJ-i;tCh7RU"5/=GO%
%-H9(i<c&R%!gMH"(2E./90)N2TBe@A_0&(qZ=iF`@a;OL_r="dB60<a+llDVmL=B'b1WP9'IKsrC/K\4diSkg:BV8&e$"pVP[:bT
%jPV%.\r\@[3tKe:q6hZ8,GFfOb+i3>UQK.kn\NmuX?b!tg']6Q-PRa\V">i5/:G=SU-t'fndeZ-C<UK'V3\5OP?=^=1&rYcVM<HE
%bP]:o(0(/B1E&Z>VnaTF]naCcW=>/>oI2'o4UR;o6@H"@bZB3dL7$9e\ITMJ'#?F;Nj<[8k3/75Lc\U^"D_n0cRG&fG_!mIoD=gM
%Ru&]n'>6I/k+2AI;WZ;Ghh,B#(?\A@GD)agmA'DVq$@oN\8'u@X:]49&jf;k#"*W1%_7379.q);F>Q=9W3GsI-ri_GTnYokeAB:s
%@MOs)XX+h7'*Vk#h_DuaFTMfAOOEE,ALnujL>T2ib`!Z:KEdk0^_d,IAn`ABjcN:D391H/&7j]BJ0F"11-6?hFnG*:=mDt8W6,"O
%75flK#dTho2[9rU,(c0hL2`cJ0JuLr79+fW4\_#2![>37Y'1I<Q7XA<WC%>d_4'ZY*^U<%r"c9.&.RnHhD;CUKcmp=8W?K3<"NfE
%isN:Z*5Y@*kbp6S*e5t^77JB4\'!"tkN$#Y.5rTJmGf\(a6_GT#79lVQZPt6)`)uY]tn9-jBuGm:EZ$,C"-="W>[qf_T1IC;DG/t
%k7S1I2&It[()fj@g[q]u71?kN&gkP[Lt(r\QLns9R]6&k+<Z$dIh]anU5(:qo@3X\,RBQ<23L.D-ZE-@YhL_CZl3&9dlU,M`/I;l
%ASp5M:e)st?p975>(7R9d\A[![NqKPKr0adH#9OHeC5FC/ZagX-+ELf<(J1>3Q1=?C0rYr#8e"_g6TKFera9:@$unJo\NYT9#V-g
%I)-Xd)4,=W<pQaA3_P"Ge.?A5R@A6'Uu'd@i^T3%JjQ36G:8)VUf*8,EqKEq7m!M]l-80(<cMIMD08t37^Hfs'$iE4IE[^,Xr&NI
%HC$LfB4-G(,P9ACNeL;DeE,6[#\$ocQ:>.%[K3.`.B!1s;+tRO!^Vq+9#VXMhHHm%jPDXREU?ed%2TE%BgHL$\4iS,jI,4)&]D2U
%O1%)OH9`$Ajq*k:37[.&;^HQEOQ'6,dXHb:e[tQmF;E;,$ahi2ZQ`-H1E:6&\+"E43K8d]6b_)G66(LH^4XEn5:THiWh'!N>H/4N
%ooLUD@2qW%/[Npu$]uEQ0IYCA%Ct_.+/^f3irXf`6fq(POGN5/#Vsq1$b-V#270*(QDs'YO,?N(@&\i$$%[1f9b(5ppM=!0[Y'ue
%Ld%=00t8YE%?'E`2NDl<=C/9*@6RV&T^kste70Z%#>8o1"2Z$JW$hIU]iAAKnOe`qI<*Fbo]i=_k,:HXB]=%6)C<9ccGV_CAr<N2
%&Y=`P,d:oLD0X!?D@TP#9;pZA\6.%`TAkU!:SBiKY';*cNnG=#%q).+Er=t)>Scei_M^IpLaOF3i_(*+Qp-];DGE>F\3FSMPba%q
%4-mL!*sG&OnO%]7e18.!4/If\BYB8VNesYcRIWrs=%@g\o,.7I"K<usGS!idGStoBWKjtp`6lE!j$Vo)E2?K2ekBD"b<s=EbT9)J
%:1[`TUK]>qI[*r1(!=Y3./J=r/B/&\?J@<eoJ:'BOYB9R(Y;1CXn#B$Br*B\T=oI7OXs)L`82<gJ&iE-!t$(@qdfmnN+sL%$G"ZD
%.oL0h!n#40mZ(7(]kC186N:BcRJFi"S.enbOc`XHe^4@W=^R]Za3<>pgt^^<aPIIp\*cgf`J1ZeM%HE2U4m;=Ym_p3,84if:46it
%VRC0sS5NQl\EYGsJ]!&0X_bO`iQ,tXSR^t.aiMEB93[QNqHb;7G&Z&h(BkEoPVB\q71&/;<QE7_Z409s)T:Y(RD#jV&bR/J<eXpU
%l,$,'5U+g3&$cT\?WpQRKQB:!/&%HCN$(2X"soT;Hm!fMbH)sC1?(78m2Oe)^72OK>o7f\!Er4Pm1bC1VHJH=&VdCS?SHY,Bg+A2
%9=O'E8qpJ!]GoODH[BIm3YDe\+\eC98^N^(8CNI6,!9@p'pH\\G+W&YD3q,X4G2T0lV-N3SLdU6L..V;nf#&@9XM]@nqN-GpjjVn
%*/c)Rp5OYk=VbY9e2d"h/Q80[8cp0k>f9f$E`iLZBG[*s=*AL3cJ=Wt`7J@P.P9ofY&pYj^tC_eW+0B/Ec,jkGOQbgCljG0D*.]Q
%Q;%@F0'fYGZ`dr^1$g%/)..XIKkG>h#QLTY`N=mn@c>Ihj*oB.Omdh^375&#0"Sj,\36?1b32>K=?aO^aSuGJAA$PNq[(q>1Op?\
%(0RL9m-pHjXr*Au<$t#%qqR3jWutrBb#)>#Tg:[q+!pUh@FHsjN$sMCMAT8H2G\"B]VUe.O]+LDU[F96\;7I?5&q"dk7eIs0DDhH
%%>qY2B[R<tJ(Js!Z=>Of-Eu,N#J1puD_Flb+=Xo6VD';M$5%*W2"lp-9T.7,O`,DjYCHaMeP0cSe50IZ=diJK0&]R"S__=;.<]ZR
%hqW>tbr2EW!a;$L,@@Q@0-3/*9lU5%F#d!0])LNA4BN"l8T091LQU^7DJq.#B3G$Q.]XE<kBXG6V$(fu[g,kq]<EIt]AH1^M+0hE
%OiucC_ol2'i0C=L,@Z*UnePEc2<%i!(noSeo"h@=eU`p7+BJWIPkK!4!\r@c,hV8"Li[gdq[M%Y5"e1X^2#!lRd@om]/LKQbS<%t
%!h83o9l(+2-m9_UV,:jXnck820Ip9@kX?-_(a34[NsH17Sd#[FIumq[q9"c+7R5a/]8FY:TBqX@Jm7?3/qoU-c:NaL(epha`dXcO
%cD4"&M?%]^a9>-INueEjqfWd]Z?fG@*k440M6iNS^m7h"-XqK,<`mOm73;4P-buoR0$'7#1?=p?ehu@.LR(Ghf*t!JZ@!3ML1R!L
%ZDNUOgktc_q:]p8Z?!JK<@aJ\Ykc9B8qBX'Bc>*Z(B/lsW?Qs2:5tsDU2u=.aEIf7Aj7bLNY!?QmW(5k,cR)g?Pt4TG5.$;FpN_[
%h0q@6OS+#eh'"<.C^poq7tB@J-BdNhJ0?/o-#gn7PDG!*(+IWp[Z/dEj7%,/Tses/]bb#jEG@c,!BC)[M9`N1GU^)%Gq^El*Y%*A
%J=T/ED"#N_m@N,QM\E">Cl9D?*-^Yl_2/[e#S#T9.E_TI6R3p#f1H/mK#P&<q&)P]6u@<O-N&e*"sVAl'PA79Fpq7mFROH2-n^Pd
%eMgMkP&f^@.RAW<g2Yj]F&P>ap/9]Ma82[29^qVQOn:!q/?YfZ\@o.(Tt'ma,4H%7l/$VQ!hoaDKfQ[OT)iMS$E#N:gEGGO"h<^&
%!5uaP3Nfd2@2d?+mr\n.JL;Is+Q'n;VlL]9Ndu&Qmh5R2H/F;!"1X3I'JNi=Nh`F_Aq:CO1a(:-c7.dnc-X2XhV>>]@o79f3=eFN
%fOQ_%i)/^kk;_sB<fhEC16!ifNlB$m[Dd`>>S#qL6_PJkTg=kg`K$oA&DQP94N4.'d4s5LOd%L\G#eoSO\n<Z!FH8SA7P4h/:o!'
%B_R)=)cLI4$&0B2/(\1`Xim<hRgO6"#Yk`3.2C:^=OfVA)D%AO8-Qkj6+@]iqV"%T6^@::<jpP0;eq'S7iWdK';d32gGhu-E,@@C
%?AS\S-kQjkg[:3_2_@U(Tt:^0OX##o[j=++b^/uP[d>NXkB^lle)Dk`h490X3r<;'j?jV>2Z/"j]ZK)VkAl&kGR*_U#jN&J?QU2T
%C7B+'r>9O>;bMJagE9=SlX<'+]C+ff*+)dg</o+T&bfb1Sot2)rZ9e&4#m;Jncbs`,Q@U4!Xf*n!cSduK_(2s<9e`pi8lV9,b+sj
%4n)Ajg(L`@cfpE8agRK`'oU8k(B%)UkRX)CCJ,+1AoaA@I'!As8lQ0oaQ>jBS"c.9U8=ueAGF&*CfABag&km(HkL#Q\ie',Dq)jj
%2<VuAFUJD"&]gmDC8oI#&iWE?2'#sHItLkp?%kbLRsT$k/5.%"`hk;fD`J#Peug#<)]?_ajLT*u&0f0/PkM-OFTfW.3Jdm]Rm)kM
%iR92'1Qs(,VK<8^\gSS8U"4q6B6c%c^D)"EYWUho>C'qYf]/,u<Yp:HiukE+2)++L??O'LD.UgJ7,IWKVPe4jFFr;G#kE#!@8N?.
%r[pe;=dGF+5d;2tfgn^r5nVZS-qG=Ji"R;6K""Wl98+D/FrV0j#<<qCP(-%G.'I/M^73%oN0frU$A)ZqCtaNS8HfVVf.Qq]89!7:
%fp`=i(F]a,J\FE#c#87;3O@(d%8)_XM-g,1Y^Z(!3A,u$hbk@/7Lhm+MJ_a[es$qLfJePlIn^@E0p?0KDso$00EO+NE8l'f3u-H1
%SE_/Wm3]NID=\'CEp4paBt5/(->D3=LHCLuG!@J4k9e>=6I*$K:$eK*dc=oDAk.41*m$N32o.k>$22?IQ(n%5Jqp\nB?'e!Rq"ju
%[`hHjfCCVI/M=U8hK@(CQg:8TgMI9N&)%S3?]7"h'S0mOpV(>hVmp4D]ka1_-$\k0fR#\Dm$YPl/>91TgWU@6QRtk2GHNNVJJ55`
%WQj?5b6_,gHFN9+phH2,ng@#a`7l\3N>bIIVO5S+f0^]>M$MXrK6m<+2Hk.HnmHL3))bLs?u`m02bY2:ng"oN(MgM6YfBNaliuqL
%L2P?)D5E*T+)r'NJUn^M/TjE8NEM$(AU^f)Fp9sD3RSq'Dn^'[32\@7Kd7hE),H)6@M%YYVD$4MH$DW!\i*`_C&@A;c3MSu+uR^g
%Cg1p"X7H0GV]>SIAQP)hh-dgCZ&,@]mSI[<!#=\##OL;LS@P8Ho5kGLk@h,o%hj,8[="<<R]/j3:st5s[Rt%bhpYIG#>IsAFE0td
%S9FOU/ZGJ,$UYoWH$FYihbBg5o(c7@hjm,n[h&7#gZ;mh[L3kmK%%,+7beJec@&&u9*c%5r8(DE]0o!,JPt5_H:IC3bM(Ci-ueZm
%SFGTuS>2:edpsf'RaH`6+eUC@mq="-/k-,KEU?.GfiB.?f\547IcLn$Ke!_hS7H`<i9(EZ,cLIJ?P*ug=PLGWi[SpBT3HW.,YB8h
%;q(ne59\en,&Qd$+0;`ZGZ4L=-c3h+NHkB]q>t@2(ok$8:f^?3_HGS2P"$@Z";@F7.c<'\E\fQqHf$S7`V/FbkK]K`j9lG(,:+@p
%);L!T,p-*PLcH%%D(jE)/?FUN2@o1"-HYWtN+(Hh?CAL30QB*/W";Ne_rq"ja157kf(C@pB/llYmm1UuDY&,U)X7ltV!RXb,qBP-
%_MBn%54X]t)8H<Q_CdiM=E6\;#%T-%3#pe_U!'D1l/<kW4[a1W3.`-Gf\3$X>Ik9M2jP_P5215cQ<i+9E2?,-MKaB]l"N(i[3_12
%^#*nCp#)@+Tb/5lOmH_f6Z(/gA-C'73K/g[S&*";Z%'Z3j>D7_2F8V#4S`"!UBQ6j(jXbc\9:B4fU8=Q/[kt#/WrbE_sD5o$*.,/
%I3MlXEgR9)=jjOpd*d3D/R82G0cS8[=#-P$K@iNJ\;X*t![rFP(>p:#463.^@h.A)k,^!V[:%/;,Gh;QPk<Y=n22drTeE+g*9qe#
%8ugOr49@c?C/,2A;`IeDNo->KF139c7R:^1#YKt;dqZ"[-j#VCTHXCFM:7.O@FU1^e.TfH)f@[WUWj]%8jX7f>#cCg3ViYN:T=UD
%ei&k_b\t?Sei,?8T.TY%^A7@gQcGUTP4+d+E2'7n*0e9aZWu6tbN^GX9C%3hQ\T_DHEEW:1SU8&E<*Nt,O[T*Vlsq^bP:4#`Q+GF
%ODA*poO/gpR<+6>Y9ci-7T3640_cpH5(e(89<#jlU,Ajsb=cfY%W:XoW]+q3'ko:5E@\p=nOs=Z,eXsLddfi<e=N^[l94)!`mR97
%H/BUp/DLJ7\o:EPaDPc._*3BC(#!'$36;4sem&j/q4=Q''b4\c_R*k*\^]cNQT=%8MT,6d*Mp4.!_gc9%:8W[E@&X]p,Bf\_XEST
%HXG&M-Ah2[AI/%GfH;&g`+]abZj48#=I.TULK7'E+F:P/g\,KI#9:joN7jp#:==1D>8$,Kkc]C>Nm3P'iU^Y994mQ09RAHaL/hJ7
%-JP/M,M@6T78pj(_Z@oC-9T*aW02Wl8c$fPH-&OineN+fN5-p[%S?doY\UF;\Ce$4@r]BR&=Fg6+_G^<+P8MPhnh[[38p-uLi?JY
%WusMN.0bkN/[r5+3VR*B,@"HDAG9tUq-glr8UR+=$2pip[%$Xn[!)n:>R7!f$,Zd9i?8ujRL_pQmM1`[=@f\QOsR*;,_Np))(.c.
%0mci-rkhoo<A.)5"c.eVW&4\?04^X5"W$9kf'lI1at=NUpqtnq&aQda,0Zn;S/Ms0g-QaR,\=qie$9'6'EU(I,?Nam,GMjl_&FBb
%2=Dl^(s)Y?dnj5:"5f,S,m'<LKN\9qB=VI#36J@<+u6kL8U?O>mmfNg(l]f&Bc.jOe8AZo3:k?!B5,?iI4rXN7:IC[K/e)j+7p'A
%dS<,?7*GnpY\4gS0ld"S=Ymot'l2>>A"tE>qM&85d4#Q=>(H++PUq#GddX2Mk6&C^TK2)WYk;4!3b/;6^C]I+B>kb#k7`4>Bh4dk
%.hoUN-lOGqgbo<GqZp4UEnSU)(HW=s'<eCV="@0UJW/Z%"WFHbhojtS$KC[2d)RKsB$hPhU9YQuA*B8.%:/XJP,l0qT4&hs,0j]i
%1E7.[r&Pd^&l0d"X2`F<m<(Dim<l8/F*#!1da?DUUIL`c-"\N)eLUN"pE]E2&c)`f5hoHap'fWp;;RIOVpb'hU,'5S6UDnjR#arM
%-8N1W8Y@>U$2+-\80oSbO\;$3c61i?Zu^30>$.Sk("A8okNOZbLLiRB?6>98Bu$I+@%RANGI#a0agKSJcb:#_$QJqr/*HO!7ld*%
%4UStAj=mDV(BalINH;^tfHK"qWGrcBRh(4C@3dH`,)Fa`_DS--pP--;Ob0l0EYdGf@>$G?botB(GiC!/jqPV][^SQ0:ML\cNmhl5
%F\#IHY)6HqaLZgLA.YCCO[*\RKO[Lo"YGnYHb>@i=qY$r5(\Y#-0G^l88/h8%2.-Kq,-5'c58Z<P&VEI^bodF380\N,tMY$+jGU,
%?"G7'j<ZHcpJ-9,Inc[K"%+s?_dMnJ8-%mL,USKU7?X0#RmHp7:BYLGUtcN:IR]P6,'++*$+TJ_KaS=,h:Z5B8-r_-D$>-(cK9^l
%g4OF%RI,)DqV$Z>bJ0^XZmoRj?(F:k(WjKbQBtNHRjOt;B8m.iQ$E)Mjtt$6IHm/9JefdNURLd+f=(NnLYA#&,B,cDf]^TIq<b3E
%qDulji_:DLa4#)SdYV#fV3G14[b24>XL!e+q"/#R8pZj"+E$XQ=dmg$(26:$.)&;GeCL-[@T*CL/0\Z(M6mjS*`QtJk4\^rOkt>a
%EX:ZJW+n"Y;J>9`0'M\QBi%`70)(gam6Png?!Gd>Q>.Eb.jIujDQ_p/]Ir)Y:m5XhD`ft'(l`B8I6+NW"4JoH:Bf?JB.FZf&!EaX
%[`5_%()r5M?nRb>TQV_(L<j.P0V*H#kiO5A^=t3HNj8gr+*;Q>S*os]%;N?SS\XdRA7II*j7h]B(["FOg:^$=lK-<Nmk[:oW:@93
%,\jp"$<LG&@<iEu\T2[O>+<kgd>m3?br1Eejq'kH2Ze-HQ[_obT:-aYVKT&Td_l;DhPRt[3snd4IN_["o2kK?q1ZEb25(f-L+j][
%YJ%4u2^'bPNERr@W1('Fa2Es:)="\hNPP(WB!+##j7dfp,,(tM10@QaNQQ!mb*$=PJXQmURk(F@H]bBdjh*^31ITXL]sS"^.SZUb
%Z(0'u-$=Z<YJ#S&\b&WD`mVKZp@_-tiV8_049m8b-.a)W<j/EZ4NG=^a^7tM*jdnr?CG(@/^KINQ#\cAf$d'ZA)Ws]c@pI]1"P/4
%Z`c341Y4:@>H)@:Q:b+FPB*C-5um9NPo#.uU@ju\b8;5Ig]C3T::)[?Wk#j<WpcsQ<tX(,<,D3hpA>uXhSPZ`[!)8LU4'F;fct-r
%2&-jij=XRg^.@9tb-FW@2giMiEsbfK9qd!C<6b(n<IIq#^5B`*TOOZT\**MJo=*4U&oAlANqVQI'MIEAZ)B9!*NO,?/4n#?NMAR,
%N]!8(O;@(Kqi[qIC[:70dD#H,o%IT2LYgURfiOWX>^"<XL"a>V=sBB4?^=[1Rp(/9-)n%_0>ujk?<WiF.aj0r@]>g^9Bm_MZ1^rh
%qK&)[Bl(iTId2CCn)G)HG4)Hp5+a^aC1+;=^*W\1Z3"%*rL5p1F@-gsS2p>4^E1\iKmP7N-[s[;X49f`I#eqaR!/X[e0%gB">jIL
%JCLW4ce\VEG7aelT76[l^]3?C?[heAIsM&aFW(egnP?ptnN['*+9(":J,@uMs21K/nG\J5rS7u+rn%_CpJ(UA5QC;lq`k$fe&Z5#
%\%d@cj%k1(j%o]qs+^eQCZ]n\q5`AXm4Ir![t"Fu+5WW8p@!M+_k2DW\)7294mV@U.Jio`J,]$]k_J?l^V8<FnIL-H+9)2)h8B9O
%c[Yf7T72%b^]45L++F(Fc[U3U/(]sFY'f]LcKnmG7dfi.3W&Q#r6p/kYFU+=n@/GhO$=\is8L':s7a;.l/2L8/2;Qf2#U0]&jM!^
%"*9LBs79$9pre0Sf3Gp*pRcp0l%]fLG37s?3LlT!^ItcX?@GtaY2-o<__qQ),dE$'?(GsZaGE*`-t5B]d!<Ap"+h6f7>!I<kVPPi
%UH\tT,e>Z!&aM^>$VcohN!?<(C`ce'VWR-)T<CqZrnWW"IJDe"B@3U9hY8XeHMK)KU0dfS^\liImsk>[G$KDuYs.nNJ'DZj?h9GT
%n87JkUsbo!h3V3Es7AM^c+'[f!-b@hL5h858IS:7dQg>[K3_>,YhSgm78-*_<j\SQGZs):[4CpsTmg;;Bah03SATJ2XRH/QJ&))6
%ps&9brS>*cZnVA4ZF]&Qim1R%T]/N<$[(($s,0>:^\k!NC3qeaL??8M\,U(>Bfi?7Iqj6,e6Dk,:I"g)f,++hBp3D%H%!OpAaP!B
%f_9Q-RWD2@J!g8gnB0CJRf^npnOX@C@mBY%Md,rupO[l(@G>iY4o<.fO"jl,_Nk8&A4cQHoOB9MlSbATk@Ej2(,d\6<S1#Egdp(R
%mR$hbFKiQo:<l"+Yk1"4P/9B<q_p"kE)*;#68d1Jq<JC"Q@c>\A#%.0jo#8kd>jX'3j^4]Q`_#\=VOY;QZ)%7Y6Nl[e)MOlB)1tp
%s8;N<TDmr5^ON`GW]g8u\)4BWL]<Y=qL8eJmgmu3r5XTmli/jRJ+tPjnaGSeJ,7&irO^S*]Ys\8/W&tL`YI+:a6Vs#a+H$)4B13V
%;%@,5$b[NkWF]CdFakdk]"8VLOk1OZ+f=8`OH9:qm_60Bn*LVZG$Vf<pNEaS[o6IQfb>ke[G^*3Iqe!]?.uf9?h\B"VR#+=Q`L!p
%:H'!eZD2cDb.h$mp\ikJYK_abEr5NH0g>T)=4tpuHA0%K0nT?DqmijY?=c>;ikZC?h9Tr+Hn3'_Q2TL_KtZp;lGrX?0jM>9?MAO,
%r;8&=F3(3(+VTT_P=fEl"_7AW,V$jk%'GB;3-s5`UP!g^XA02Fb7[`WSJXE_\:>to:I`gno(jLh?iQR<B6Qk#2n(75.NB>9FDZKe
%Ha5Tna7)tkXE?bIb(kC`&RuiFPWiR<<T.dVd)QllRS(&.N6W4,>4&KC^3-PiO]^,HH*(-*6N2_h)H,Nrelb0]>q=Em+la*ubTJb[
%-Y5_`9%6mWC+Y:U\2Op]lF+KLGZAP#=:u/T];RT@.f2rJE/`Z(g0Li:e_45*CYh_PV)P1#JjDH]aJoDDGUf&Wn6D26..D3WPng.P
%5=T8fG9q?46Jo?e_PS^2\#k<71:5\TRds,(<pfD"TK7tlla`Aahq&#WTga;<)<_[8M4Gkb/KDRBk&Lcj=);;je;`YP2TW7g9GEtr
%GgrA[$@RtJ$drYI=eq^H3AZP7,fn<>J1*5TK.8+d?PNjWkE4>@qd9bXF@XmYQY+\Q"tAPo]Ztg;#ErZ3J?%LuDrWn$ar#oVI!iCh
%D-7U\H@J5C)618"\te3R`R0I497nFJK4`:ObE;FSqNOL-T8XbF>L[[3T4R8U/M&<uqthtT,=2*nq-IC9%Icn0Lq6.CMMpQKF[u-*
%os*n3rtrGQ\G$a4^>aUEQjAbrTlV"JB3f\KP$%\E7iJj"WV)CWc)nQ>@a0YoW\m!l=%XB2>"l>CN6W4,]'ZZT^3/7Tq>Jd/Mtc5Z
%$g7F'^O\@JBV3.!+BGUfUm'*iYMR,NHIlnUX`i<2Db7!LftKD@eIJZ/ej<F:hIrU>C41/>E?/1pG:dpg6?b$R7^UO3\cfe<N\PVR
%1;D4O8<oh./5'\7Ke!%t=u]"?>4&KCmTT!0Bf4a%^+#,^)t+UO<$'IkY$13`-_8XlWeFsTY1;rDmB5!rP#cpF[b?9IeSHakikIS0
%Wh\:*3juPYXL#MS\ne"O(:n:T=-!P?&TtP"Wmu^[kicm9RR4E#ib[Qj]kb$f<kE.T\"qQgoc59a:Z6WNX&_=18a#bJDrDPHCULcT
%]5+g`Ut+*uHUD]'#?DOS+c#(8EN=d?WqFWA`H>^^h6kU8$f/5;)ppujBZKn2&hl7bd>o[d)oubDp#Jd)3\V6=-\Db`Ur#qJ\GD!L
%E/#IpK%Q8S<FJ/g'Jj3B;jEO*)N4<Be40Y<Jq0#'#cTa[i4C0o6%*0NK8tVjasas(W1@&N$5i^]:tQ"%?"7?_]]9!$b'FoCf*?^0
%%@K6&.&?Qf"dGK1(j_\`Wcd<$U"%aH_Q^TDahTA5%Pa0gSV%&h`LUb+JEVi`;I4<@(n$)?P%8#t&IBcKqV8kcHg+M>fVnZ5J0oE;
%8Qt/s`P<1o4.0@'#;7+lM2%Vo4M"5+IDWcbn59S"m3oW?%h*TSgj.T#)a;m8Yn$$L:q[`VY^]Y_)6&@i?&a8!:4nHL9XhLmp9hrO
%V=D@6/*T)5)L3&fK0CG_J#X9:CO&UH<ONCUD.G0L.U0_Q/R.2m#[:lPnp5k's5kXs][l,[S2iOZ_fqe@QZAq@*)E(BoXj=$0[_$k
%RU2(4-:[9,Z<8R<%<u@Tj&#c&?q>3m:q>FT.(I>Mo2E_G9IdNG?lc=Wip-WmBaLJhhIG5e+>Mkpi8Hb!:7dp90DSQ/$KgajC:+S7
%_pDdSUECa0MEtPRSn+r/*0&RSlp.F_-3sBuMbMGmj[;74#;mq'?;[?!PIhLc;[\<V4ajRZ:(F'iXA3#6!\7,70g;%02Wb6<pCs,!
%3p@Z0&oHX&H3i&)*J3qgO:^MVkGKH!Lgm!5Z'8qMd6kb?6R;:pM_N8t="YG[&@]rmo!hr+Z2@Wojai_KhuhR7,ZRV2BG*i9Pj&kI
%HW$#04[`a6>h-!bK!Nh8/mh5\fB9HTN>tpZk4-h*h?d#3q_t-&H46VLK%Np=#g&iZ?N<Nd4"_3$*i%K=0TS%MLrITG&:MLd;*EM3
%OerXk#Wig4fO1,ld.e(_k>2%\G`1bn4Aer011DG=N8-ZC[`CZBrom"_`jIbd$(?1=XZ0NU[+LP\1I"6J-)T=lOjHEje+>("KA,Na
%c5Adi)t:cj=SV=:OA'S)MJms%</M,%N1D'mI#<el!*lF(Yr*U9c=\XOQsE3F?*Z`/<.U2`/!nASYBjDTA[6]o#KZ2KNeROhg79?L
%"I]Al:fh`&[dan<nEenCi+CDo^;iM9(1rd_XkuJ22M5J2e8<c(O^Z@O[6>j:BX5@I$Ko;g?8MiWR#tj-N>DmGTnJ3X128"[.+TuJ
%(W\N[^n[\o3i$LhJYMB<,:-Qi3B=fI,;%J<gcJhIA">0,'i-L9ald?G94E?s8rL_\Se@lLQN0<nR0,_1l"/e4LKa/+<a,7c\@b'^
%4[/^W]gQVDHDl6f<+Mt51bhK)"V#*J;.r6]-Xpd]=t_`u<YT!nWeXuY=k-.EGPfgPC^@QC3bkltH_V$$QRH9'=,$oAZ.UDPN/'I-
%UR<]4(X:pnhC]?K1u\C6YRNrdfZ[!2#`(qo>Cc;h9YiVP"IjX*O,&NZ@oY&Xhhtk[,)OZ3Zk&o@Or6FB(VqjLJe`%?6_3)]ba,49
%"PX='^,40S`l>s"b0#qVU(A$%O[g=*^W0_+TOo)r=SoXrI0X<IYmPd&4%SXGY?jj5Z^VD>+NW1W#^&]eClM5:N\GqRrM9b)%tFJ#
%5Q9d5s7l6H:Oi0"+5.=QD9cdT>(03iKbp?353Gk:jfnHheL.N&GB)GY/^8$S=\Y$^lcdqDSJ:EbcYP6Ne[':QOa.Mp6AX>ICN4$q
%`%$hk>\H"8ki7Oq[AI.f7Wf*2W4K7clmm7iDWc\=)stoZ4BoR-caIN_$gVRJ.-'18gShQ3.HP&7[!T!`=dn7&]m3$ILu*hH9>3sd
%Ah!9YooZ`67d$Mp3BR'>(*rr)9I3b=r,VJl4tc%8(4VEKnX<oV)FE.W)k2ft#A#!uk]a"n6F/7SZ[:Vi'JqgSp>P?KX-fC!=9RIP
%`36A7ai?Ve[ZJL?'fK)Eq/qUAWNW!CjqYimDS,(X??(sEOW*R8io]Y2T?g]ic9)pg+SKBs,VlGX^tnaFhl=1I:lF[j/.QkJ?LoMd
%.3@_sqk1^L5W`TM3$B1Ni=<=;MFoZ,:g_PHY[-9H-=l:<of1&1N,?+lSaoeTm!nu[5Keuu>ONLhO?U9hdXA0Chs0(-](`>pIB375
%\%6pemCp'Cmqr*\I;aJigYV\5pV#t7p9lXU?FmCqLh+7m@sRLKNqTQU]W]tqnpB,>Wrep"F(N%.`SQm;g[/<Ko^_rr>M;<LDm^+j
%q;%Zmr:>QA2J>VN(],\tbIBHs,VbWB_Y+DNfJj1E[s2AUTi'9J/4K>EZeN\\Q=;rkYMY7+!kc]Gb6eeRBd-K_PFs/eId-ar:Yg63
%pRUg.fEo<H8Ea:GKXG!P4(58Rk!&K0e`dj0d:_g!pSrY\/m%K5hLTuc(7qSbYNPeZ\%]PX\$n/:0&:\`h#$TIm>SrNS[!8.OA@V!
%*r$p@j1V*m\23R%ijJO#A-^#,$Xl^.DK!17i/MR*?FVr^9&j..YeBS?nZ!tODGf<`hY5_Uek7WC&],Hf>;(@9.)uo:I:%h5#o%.o
%4&6$=.p%'ANEhbQG%,m7MtiO<p<!1.IH+"gNGW#Q%q/h7o5&"?oD9-)BcM]#G&[k!_Pq7teW[<[qmX3-rKaR\qj$VuUO1n^hD`%?
%NUBlOatL<s^$fe+459YXp:dlHG-c;Jfm\@D^>5p[[G0Ckf=a[9<dN](4Y+3iY\VeQF7u_0gD)eO??LF<f+kuDpNlL\n&>1ZB;QUE
%S"FV#&U[M?`/r+&3>Xn@b^6=?5#GjXZG$m68D8\1,F8<98F>=j_Te3oAO%M'(GkW6<W+$H^N`L'1Rae0s"<0!BL"ln+!+C&Xq8q/
%L$H8j_Rl#IN[cr5EsMWC/2O;;O7WmDdj@(K$u;n1>ppuc<i^a?9i/pJ:Btr%j[a46VNBdffqQ%A&9EKg@tI%\5u%Tn;"W<QU->U(
%6/69nE3NttAq]uLRGL]e^YC_CP%L+g%$E']janIB7A6k,7>*6JE-tAJGO]3CH%s\joHft*GVFI[X#oEBpe>Z915;)'OUL5Ti.oB?
%-&1r!Y4=*dfg&Q!\T?cc#+t6,,d)+UISgV:#WaQ^@F"#>q(.MXA@!U9Mrn&&Uk5Qc2QWXd`1.:)A5A_lW$SnhnM8CJA5o4/'.lkS
%oF@f^dn6F]o9eL4N([RCE5&No:rHh]A:"1H:1!U`C'nWBg(B.g`nVV/aF0qBC/>QgBsbB48=aRf?(/[_I,'/eBhNJO#^#]oaDnG8
%fe4SNZ27;1CFkgu,ntW%JCGcJUf2jhdNgc-?VRFrh==f7Po.2PCa\7e@tM+&PljYq"2p;(ArRg_$2d<84GtanScoCBUeEd!]7%mR
%9^EbWU1H>@(_&rVA3kd3`$c6+d>Z'&09O9fo&:@mBRgRUam_'OVp]f$\aVSLctj0u9H8)]N:0(aS<,LFMe"Qkgirh[OdVOYqPusU
%:IqNYKd)QbX+"eY.Sq;#@A'<Nmi(4(Wfm#=SLA.n\-+7nb-DaNRjo2"5`o):Jh5K'p/DB^iX!cuaU1`iHa:"L3d?_/BVFr-@IN!#
%-8oG%02ct9X6aMeb/bJ((:aCMDX1P,4q64">EKm\,qTj`,'(Opd8eh%ALlg+ODf(%N9V^!Rd)X3WP4qe(^(SqEJi44ANuJl_Rt9l
%;11^(c%WMZlT8;FU9+cF,X%TQm6OCb0)'d64P?\EaMO*(JA665O?=0=A=b.$EN4BpN""O'oJ7'`1IN+>YqkB21a08Xk].c7S1Y53
%NBHM8QF%bGIFlXVX0A>3F@/A=2oeK\OnT@A?l[L_$!C,p:\&Bj@7$/l`Xh4]B5Bm-4FEJbP*^(U.Ed<se3ZGJ4QuhS3JbiJ6Aum^
%@B34Ti1l!%CQa"FE&,,.R]>/mk)2&_XQ^rt80]NK[jhS/UcDFg(C?Pj7:sUMPC^a"7_kBMh?MdLSFnZ%m]%+:5&C'1P;&6$#67KK
%gaq>H9TUMYGe4hh&<jLs%m9\K3"qV:\JrTXg8ZcpK9n5>[(*]ob[Xj'?_7CPA6sj&&;WqD)&\bV)lZ2#Z9V%u[eV$[Ot09dVkE`d
%SgOV/3aQUgK5(l"mE8s;1uq60\jg"UCp5U^g2Zu=[*@.5D72d)au7\;BK1:5ojta-Q3f*#fdr>b6VVr2CuY75%c(l)R[]BOhaCt:
%<DtbFF"5P(>iaM0-GW+/G]9rCRbRGgACu[t9f%]92arJYh!W7l6(s"$XjCgQ'A(A.8NN),V/]>FCMPeA6!;_,+D*9rO(:RrDELGD
%VW>9[3Du"ea1Kl8qRW(>`1`hn9\[?@PWfom))!hdOJB?dYcA(b4d#)ALOm>M-TO:p`0/3l;io)NE#MqWBT.$WM%NC6@Q<@Z,DLsU
%a[ep00,T+>-)SI)0Q42na;WY6<b]3(+\[IWKA!e8@,<.a:09kAJRP&8;`DHn?lGIj.^TT-)mWd;#teTu36=og$`q5#jE4En$m_/"
%MNZV&\-m++QaZ_'8]J1@$gPX6T^q9STNn<WOZk!%HR*0XN(CFc8Pd!V6qjjJEYD/Gfr"lt@5PZ#Z%+62P'Zh43ueT+JY%$+f(!79
%'**Z7>!ha+9p`:`P<E_m;[;T,a<`6PGTOXf[^$+TdOk0OR6#N$1cAgLIut/iMCPbDVZK/XJG;BhTg0O5)r@&CT_^2r6(>F!4Wu&6
%T<!\UV*o&58WGYbXV$O:_e#*OPTW%E`5*:)/osWnFKq$XB#X!;+6AUZC&Q=$M(/iUj6."P27C;#F<+)af'T9c$h$X6*ca;O:>9/[
%hrPiAL)0Z#U;Rrf)Z66_@^Ll%TN',^hC`ku`+nDG7"^>%T]g[JS0F$;.J@'IClb48MZNbko_<)<5@q*YgHa0oYRS'OSZ%fd)nphh
%jh4S7j+)/-H(>Aj`D3l?IF^AY>/mSQp!KnHSuePqB1u8:UKPp4Lo!!^ZYM4+4dEga[oEm"%gtG<'(#7RomjphA`[jpO\%s/baU.)
%_Dk>a[ElmrB4R[aG/:V8#j-bRI=SGOS42qc$-\L4!]%AETJo(;Cm1-Rb-`a,a)Bted/%nQ"0KSmW?OTF9ZuXBeCguWWoZfSF]OaV
%GVE#CAj&:"-1<b@Lc7K1ds8O(Icuu9h_fHj]qD`heRuWM2<(k-6Uk*3(_ZO*W:Im91)bOF^qf!o;8'S3k)8uf:A<I;hg0,eeDKfh
%&l6)f)?0GI4#p7W3(N!FW9r)7"W8QtRI(g0e%nKC^p_+*K[MYHd!YMhHL@frY'TN9B<->tMGe7nXe+=+qInnXJ]#K)D]`D3bNH$W
%mcrs=0a,g#59@G,oEKCK',#G>X%RSs14Z75;-&VWVmW:+56UFEcs7%8[Er1eI6n=`NQUp:/2Nn"U0^VQ\@?+r%0ab87Bpc9/j%7Q
%OPk9s=p63sZOPuPK3;\B?@fU&%*klM'[j^O(C+&]f+mkoC^OKaVUmN]06Ta(0/pa/3/R)um<M[FHE(!=P3<Wr;:KMnE1C<+'6mT_
%X62l-)\Yop(P_5kE_Eokn22`,%HN@e>'ot?)B`p\]dp*/L!1'&YgYIu)RSrn4Lba.H*'hs+=4K7<tcjV:sLf3#G^f0E.tQQLQNtK
%NYM+q&@CCoS%U,%XSj:b_uhZfd1e]0C8.]/`7#:^&>j5NPP!_[SjRodcXVlOCZWXFi6if-';:&"pAn&^/pGu&(]mT)ZN7g[=\"M\
%gk!;D`krmQ?!3i8BJq,k]-2>m.(tA"KB!>eT_OD9J6#?#im,EQL[Xmmkhm[U\`XUS%P3"/58p>s)A5!]^A84]R>F\f(*Tm>-i#aj
%8Q(dIJ0ucUaY#at_d/MUqmZ%i5cJ6fX>je6\C@S]()6IA#k;>;N;TClX3d.h2&CrCnb_E&92h;A_h)D5$sd(YE8(hZhMM[Kk?!8#
%=Z9LNi"S^P+@p]si'okaY,]`e`#UP77Z%KRnE$0NOUHO;aEO>fhhpch%tGEMpcPLcedt]W-Dmk03*TP9%Lr?QQT4h_DugHW:8/"B
%VJ;^cR-r%Z*r4j$0g@_i]q.&dXI(lP7)16`8m`aJP898W;B`Bi(Q_/,7+;37?lNbU=oSBN&c&7E%l@ihm3U.M2A^O]OHS[V3V[#Z
%f+Ep0&AnYZ;:Uo]!AOS.-66>BfC`]./lL^pEc#m*U(/ra698FR^i$TU(nFXOKhmokqM<+rc9UjY)@i*Q2)Y=G;c>r4Q=uR$DWJ+`
%nq9b-&0*ZDrnn:30L17ITRNPElem)Y'7?$JeAXiKWl9a8j6W2HV1D$ffDm([G%6mK_$^<^f\l6J\^#7Fc(K(C>/6lKh)1;\Eu/1m
%,]\o<O`H<G`EYjBU#7:iMnML<kc`2D13qb<[3X?0XbDHtNRa1".\t)NHh5p(e#O]h;M2>ErDZ06leG^=.C1*b:ES7q[SZc9KubLn
%-O6."Mied.((&#17@CNAli5+m2(^I2)6QO#GU1\+=,nSeQeRQJL9DIj*6i,Ap,.HT!C<S_isDQrI4C,"+f(BVs%%A5dT@eQ+7t1I
%Bmu*J5EQiA:j4U@NV;;U]2!iHG3<Wta;aI>X#(.'8m\Dg,intDD8P@?VbcO,.lGI*Z8V@Lha5lu$\rTQhLlg+H5sC3f$@rF31FJe
%BcgiW#07F%%69kOL4SqJr.[,>eth<-7s>\t&6Kqb@Znh%b@FsJH]V$rQ=/Yej5?b^OADO6QufJIklttVB(Q%%OSe_n<sH4-c-L?;
%ZMp^h<`un7r3\u(^[^(g?0s8Mm],udEW$bcNQ;/>qIId2:6/q,J!J+pqHET0bPF[h,b5V5fcSeCg@BaF+W%5>q4("A7;F-&0PotO
%g6g?k`\er;S?"8rJ7Iej:rk!%=K2lhQY]@K(6HAdR%l#Jfd&p(HL&;h\@1SL8"KTi*SJ]mgIdrP]WZ0_00*Ep(&CoG[X@l_4<3Qr
%RuhT4-gpm>`9f=nr5cTqM$"=7JF3"5UfeUuE$->+!(dRV->t(d,M5X-ViW:/L-b92r>9C4ipmp0dE,7mHBC*6el;V#?t%Edj0Zi^
%?[ig!7`4aI5s2UI!LeSq)j,.A*r$b&e<lQ_U!.^;0Ap5Tci0W&&>>!j(B^0AGN=+]*t((YOOl1agR#MUqR6A+m:CA#/!*NY7$Pn1
%3'"tW(*NZj^aZpeO<8BTOhSAbg/7k.*9BSC*6K@UZf<AljPt48W'u\:&R.3c!`?EQ]!Y&0YP+`>o^m`!qH'6H#UOekN"X'AA9OMB
%+D1o#f^";:Ets2dAU$(#N[p<PeV4ZM8^7Tf9+#ATPgS5Ngl:gR<Gs>57QJjpo6VLopBFd\YsJ5"Buf3+\lTs!V!THc%RT_<CU=T2
%Y/IP'1;&s9qdLb<N=#1;gr!q7@46rs>f=X<Ye`teHAk$mS8N$Bo6V/;ABgE$l$Eo4f'<T!&Mm.gZI*K?4`2r@L='TKT)m^$GH[jT
%f@%.r[00tnSF[Zq$slRCV-^U;L>',t]02D_MO+O^d6A(F'bK@Z7B`ZA&&J)<>m&n?cs6b02:+iM:dE*iaf>X2i1bc(cB",oQ-D$C
%?b^BL]*A+3BV9b)5gRkD0?>.f;od=83OFF"RW@DOaAPao__55(_Jr0:eZnjDPWW.=jg04,+BS*SW&\,_ONiS%*fq"NTK]S12u=Mt
%UIWZBd^nD)!h!1<)@a=mb/8&@q1tdpq_5cH+M:o7*1A`'X?2-O^,*G_"f^r?F:^F#Rr%HeICC`/7"aZ!/;1c'0_G&H6pkn-5WF8l
%cS#mV?iT_iQd"5V`,r'Hg$PP@4rWf*K#-AEV1YAG^"4YP6r_'#O>-"s#](peD,\RfZSfh,+>;^Ol@@RoFH4>i;+Su%mo4?8;VtL<
%+E0.r\C`P50n6jnHtO$'O__O-bEuLF/R2(MIJ$-l''+_&SWhGmS1i#$L&-[[0fHK#.S^jF+ngDOA1S'^&Y?GDJ+L`(=@BHMBQ%<J
%a/97WHs07jm,eeORrb;Mbf8a1GU9]bh.UXlRdc/K&lVH8Et6`R:NUsk0-rec*X$K6V-l6HZNGXcbC_'3n`u[h%7jD]d=oSk,4dU.
%7TP`X1C]T9Z_a6;IsfUqN2&BaKQi4Y*urQ2LE&d!'5:g%\&_3@3;_YOeT<=KI;+^l6-^H"RdMo+`cH4Vou7]?aI]=WE/sg*<0OH2
%p8'e0#!$a>C9iu;XRaEpK1H%\[1F%Hkaq!)iB[(oRA_1b':ha'cne\@:8^51kUNMgh#hfXW64DJSW#(!To^r[JQZO#.D[jZ64$q'
%2&'3BUMTXOU!YO@3(IA+Ig,^ni6]Y])CIC`l0f06X,IZtDL!p.!c$8UJeZlOeJ."<_5/_>'@had[!sR!G)m0&+>r<sjm[UTEI!S_
%=R=bqKG<AY>r:_0"+7;_`Vp;b6nrb8>&c=IoM6]X4ucZ6XUSr@S-)JVfb["W.S[@lW$Zndj&<9g#=5]r2<AnPN!IC:)QaH:dlfrj
%i#KkZkVA8*3^,AJd@b*s2GJA6'm<`O6Paoif:K)RBX&!NW^idMa'A#hQkOd)o>SLp@Ee)LD$gIbIbCj8NhjT#7']P@M?Un0B<uRt
%G%[I$(;9t>&9i+\cL@PM7-](O*p'La%FpR[=J5nDkE.p7E731#(*u$e92tIFQn_$$r?l8-$>!KXBN%g`\f;:?i6`'96G!;Y7KS[n
%40oD>MNR,rWJq]h:<9CiI>OD$Je/@g]l[i$R\ZQ+["FWWZI[qeG`Yt+^p^n'2dfuj'kJXtg?4p71<-9Qp]SPQH71aMm7f4>dmSEk
%qlY?NdXg<,9*+C(dj$@O;J(A[ciWWO@dsRG6-hN6/6,?O6Tc=q%Ab*[.1[V]EeL&WEtdirI?KWZW(4:?N1837kJ4IJ#Sr(TIZW/H
%buniJJD$hH\+L,%9ohXN.#JpI*-lYJb3BLqcNT"(.MD<1*9aa</r5:,`KRq`+A+4S)Rf)n?qf3M,"jH'VBiMN6QK!d_rM;IHf8Lf
%fB@QI9f-F,h3/+j3)9@,L7">UZ$.,?l$gB9)h/oS2shdl6u?NF[2,60Bjb]fR1Rr9Bp,::-RLZ]37(*M)BB5i>Ppr!`^RY-,3h@[
%Ya(qKDY:6HNX=q9ndu=*.1UH^U.-)[Du`RW&Hpl#IGRL,6)6)K=c'C+CaWs3:eX%FJUD!ZL)^qc!`Z_q#Isnn[i6a5-1B[\DFS&9
%f85n<$9fp0@'q75Znss-eE#/)mV%ec'@(i.M7\1G5sWRBs3*2pGpE@51"F]Yn)VK[*XrQnUTTZJLA"KrL=ga!%`IlL%5B`0EBIgB
%JAPZc.8pG!67ifiF)R3!R&'TG54.ML-8Hi+5qPB^2WgmB)'YGO8P=#;0J1,?lGi-W+-(7fABJh@8pgsZhM/&%!Z3tHO^C;+@!3b+
%;4)eQJ[r=[NDCs18?ZOHoN,FirM00KqZe."%c+6SmpA*MG-rrABWTdk^(P1j/'1;4p#:"JpLXUn<W+)TBh,5[6[W``;1ZbIMU\&r
%`a_[9=:$TupYiBPmMt*;fl;9I?e`sap)%/k;=ir^?<^8/q?YsMcurYJr/%Z;A&G>*=.**YU"Jaa%K&?[$83J==Fsmq@VoaDf+2*`
%H"NAT]ed"u^=(Nbc9Eo1lch#L#CD(rn7tb$mG-;k^#&+=3PIGb"M`O[g?P6l).-U]e(25br%%qDUpN(s"M`4fgZlCg6u;DV).GAp
%p81q2P?/Z4>?s=%HEBI[YO5,j2Tr9Zb-i3p9D!PJ9N:*01_]dJj(u'3-uiR/TZI8B2phcC`^ni8Bj+qMD5\JXD!qlM`:I+@7K[QP
%XT;,9ibcrVR8QB)7P13m-G1aoE5O29ZSQJ59upaf3E7"2fs`da%\a8>oI3aXNADaFJic2$XSp1nI5Y*DAU+a)/Dl2"ne-7)@FmaW
%N$agYWFr]F^+AW./!,S&s6SXCYg;Gb\1H9]W7oi=[].rl:hiQIe$!n)T+.eb)]HF&G$AZf=,hTJA35_HK8TMM-A5\(PW'fQo'C>m
%SZlPi]Xl6\1q6+M`#<.a=pOak_X0!^+e,b6-BpD.7"]LT+S3q6&GQ!:8sc]CD9q`4e@%6"`0t!,C.J$O7FGMR9"%IW>>X+k,h1L?
%jicahqLlB)/sH"GFgCK7T-`o<Vb2NNm33O^@^<-VN:(3X.<X@F>A*Z?<*h'B>GXqP]25+!ALD@ZO'.`>gIZm3\Pca^FItETggumf
%N^n<Jn)%04'VDEV872>'l4S<lr,?<#cjNhIXej9S@&uO,pi2hY\_BMe`#@?.^/\m>[6EAWH1K85-1/M8o*t,k_[LX"XUfVYqR/1\
%p[,qJM&H*^8,$0P_d0cK*c3@@N8f<X]6AIBRIh:JPD=o>YG/Nk\UT,#6ee5=-N0dajP`,W(K0%,rQs)e:YgB^3dGtirAoi5;oc%Z
%Irq;g-iKn-jO*qNQdFO5RmQDp'/a^YjS!5Q8Uot[frc<%>B>;RZHS$dE_[`'k2#b1X[r?U3Z0PU-]b'Oqm37A6Zrqs+'`bh/oESW
%2jmFqc1L[s:2f0"s1B&D5PKbP\';7:Ng<Y>LhUfOLl_Q9,IJ\OU1ACdr]H))HVu,@,8Xi=HSeC^9ER:Y-#q0:JcZ/uBnVdhhr>nA
%8gX^VBVD]r`<@ETHjJ!e+nds"+o2rX<D_0gDX#I9NS&6'#g00dnTZ=Sa-dZ>?Lb/S)#\-["Sp/r13L^G#;%]hC.L.]d8XrI/f5%l
%-!m*&Uc_i`hCXC=E(`>mnp!^uj%+=f%r:<d;<SL&9JoAKZ9W$/iV\HLKtC0$')Y^)dJ-b7,c"C#l<E(%:QsPbNn+hHUhm;IK[T\Y
%'Qo?m)BKD<q^=OBQq@Z!cr"iL1lXu^U4R/3Jg;V'kK#V1?=ibqPbo$',hIqC@!N<-UYK4Yh'o<j,]k-G#\+`cm'4X^8u+AM,@d4=
%-ulR&l!F!;[-)Mu<)[M5ESMQWdM5JeUhWgUfm(t6k+PBg>Dpn;B1''nN%<KRf1EDEN:5Y8W)8aF$(D0@ac2G@r"a<r`jKp<UHj\B
%3lT`tUXU49G>2+7j2<hLYD+r1BSC9+-Z;XJK*u7OVWM^H:aRUc<i%4=1>iLbDb"W^6u?ZNAYa6kD4^*AlTXVKeD>>UPg+h=kJj6=
%\N,gBh]N_5;esm`aYj'Z<5!?^,U"ce%@K!"Ij$]uA(!.jA&;dloh_*dhfquD#je-(%]7P#a/<+,!jU0APp/gN9&$\OIRBH"Cq3P4
%BWO^n;KG!B5s\4Xk%s)K@$(dNA"m^kR##IZ/H^u'VU)Bt5)Dm=>?q&USq,GpKQX"9>3'FjJDLP$Y7>'Rck=m(F%Zjg![d)#FDgNr
%K[PN=40D=dCbC0=dM:9L3/S69#F"JBKLBT7d$2C8Bc%PU!be_ep.UkGLZq0gTq:X?@SZTKesAR!;8QPgU"#Y`0ubi"SGP-SoPm=-
%m\_@<ZH@"1;LD=Dm.#&II:>Wqajq9XP"SGj0Ms7!:n"Sj[GAn85N?!qoWJR=,WZ4el2^T=ikW%##StDG[cZ.mRcIss_$'QL%@Sh^
%@<`q1Z_DCIn:Y1MPS"Zh;-q,L[9?aa1Mtd`lak3J6TkE&GNk%kP9_>\.j[_?1YM@/.^"eN3A8Pd*e[3*HQe1<BhkYF/X@Gqm2`PW
%W/3qd4haW7rl9(Qmr@mXK+@j5SjG<+dO_h);B@/N6a`<fST!;/['fDUoQ4Bmh4^4XI<!E7$NQ)dDmmZc,k]fVNb4G@3=Gu#;7E4(
%IM6I2D=^-$H]65c?soo10m#1Z'BAVqqoI[@am!uLG]Li=UnD^Z7=(uX)^-.sn.u-!"+AZIZ=/j&^g>;)7H`h*5l(Q@"3>P<@WJDh
%B9?W(5RS'XL8Dj1`M]NYpRoVN28*#R,]e?$6]IP46[g)kY,n(ApZ#$kIX(lQP%o$JJod>fO#(Q8j-=O;^#ne_jkkN7s79U+j5SP`
%24sc?^Lf<]:9*Sun;ZS^N$pD%cTLt_dqcCr=]VGMrPJ'W@q?"6\Kc6snY,.ff65HuCHJ/E]6jof;pVZBF#?*cI?&D4W4QBj?S%B3
%OZ0%d[h3oWnT3NI*F`Ap]"R'&c@q&/IXSqE+90R<>N!\p\ArEr$_'=)L4cJAS!Zc/Cn1Z7)!3Z>NY_?8'Xt]`Z-Gc#BX>Sm:^=ia
%1Ha?HgDq-aDcG@B%!*>Ur0<!'SFIo`hD*!e43<Y$aI+quOZ#G9>I8/uaYrb^MG(80-MVn)3PZHomBt>Nf;r%llj%*JQ.7!;>5YiV
%6@Lnu-Jn-5Qm)#aI")#2eR(PQVec7Y7VU^u,.Bma_oY1:G;ltL%NYI`d)Pj3@<4]_]*gU/;5W^Q)V1cN:M&>aOAE_r9A)jFU5RMj
%$cf2`iG7.uhs4IY\W->b;:bmHDJSUnhKV-;@\#$`nHJ2]=<*NG@bjH^ARq@OAoU[8"'lVdB]0fAX.d-D\uVM`VM6XiN\6U+UPE0=
%h&0g1/<R>?_!P@i7Pe1^<M>I(WifB%$chIIiNC)d3p^)&@K'7(\_DZoU;:O7lVS8Y%;E%OCZU2&=:C]l8Z0sCSlHZm'fg>srLe_*
%"oX8[MF0NBBbMHA<f]-1nZ6mqe5utChY#N,O8TFXQp&"Fc;bIh/$`YR2LM]HP1IAiV:o$c)p$'>-(K!6m:::4l'1-/:KAPE'Oa4/
%nu8Kg#g-$JBgV;qM=JN@("IBa7!'\gXZ1Vo6U@7>psk3^+\&kOTe2Ul$GnGkiqd/K")?!+p@s0gVs1aQ&$Z6(+R$]E-5<uj0*s#E
%NBMI5?,b1(H%FNJD`.21.=BmHg7"MXUe.=&I4)>'2)N^6]TGU7pg#'t\b3eT`Fs,3m.?#O%fSAK3=g$dk+Hs]L]UGG2]"L1F>P+o
%i+#_)GW]a6EVZt1=eJ_\)_="m=-FV4X=]Flf4.WU1<sFVT^o)&U[N-bb8)HR:$NR1+'&r5[F,[m[S&W9`KMh3#cccG7ONO#F#fJk
%T]1u;WT0:W`*[&UaF?>3C!/=0[`3G8-r@BK,>6>Qc_-0^D6'/0(0n&-FWd>n;iFqSbUts[2'E-GI<M?RkSsl_cYodMBSB!9h,lmT
%Cm'@qP\i''cj_@)I'?n/S3[n/n.X'Y!F=@*He7\?dOc^.`0le]Gb/$1[CQrE8dS_kF'up,RLJ$JqB:ZX;n3u?)SX'L`0A'A$A>Np
%-`CTQ8FQCl^Csd[%I:7UEkW,Z[Hpj#-9PPk5A4krJa>$<%=AXb<7'AWlm=2ss0+$O5V9W_;suP]lj=o5+XD%BSL>Is8VCc[-J/*n
%"F_/5hpgL+L#^)?/g@b`K_nf/EWJaoqlZSo(68^kGuUgnhQX94'dX7u?k1a^O9l;kO"&e-Bgf9f;+DX@BJi:i.5qk/(hE0jU6'Sf
%b(_L4$Q5!q"@$Wkjia0UDu\bTedTC/r$pN77)pHC"d:.'kS15)1dO+@@\Abib)pMS/Jk19@oTjThp1)fZet\(2IQ.H`a+M)-$(KI
%TrS?n00"hjWq7a"e'Z4Bg?DGo*41(E6[(]cCX>FZYF3!@qKt5l)qQeI1r:L_ZcKs3<pg8,=kqkZKg%+;X1#GY)%@R;lM\=U];r8V
%?(D/[0mN$LXIN`NkH6SSLcW.b7NflE,M6Tq-ZRFeFrj<QYUK-`7JY`:o])k+_D+)U\?!$L>5Qn$)U>PCqW4VL-Qh`FZI3XWk!.B,
%DUEk'9q)KkUT7RV8B2>h^gEdt/@:Q^E-:5\L%cT?1(aQhh'PY(*I3e]I0B"4n@`'57#['"Xs1-#5XCBmVaFe)10+2HK)=BG,?r?4
%eEJbqq%e,<f+Hg,0_rUlWEuH$D].BG/WP7\=i('!DI%6ZI#m#ocG7#V:W3+EKW(m@=8[>9+#Ft9IDAo7rena850eX7n10=dhsee@
%PhWAno_c,Wr;00u$_'>t2MB2j]2-9*[/J3Aj8?O/=bYZg`Q^`q3PI`-(_B5:%oU*q@(d*%A`D7k09ti$;o3utS:B/NY:JrP91&K(
%=/me5+O`EmpI>n<Uo;7;>K1'-oA@d</)pJF]1[KWSA0;?_!fI`#m=!Ef$s,Z7n[rki8Y0ES&Y:#+ZNg.ReBhWUT-8^XnjN-WXq8`
%`]$m0Bl)[gQi;mE-?DRG2JXR^EqoTcGjLl('_o1g8tjM]&&J)<?$Y7kf=.oq/;d08nT/kD)uf3]NqVHaEX;3n[LY*PlXaEcflH#d
%J@nK)\81\G)X*Uic^1MQ3k4_pK"HBq+p@<)3eX/S4/N]-FP#eP`?:bh\%a:F.+\K+$Hf@#fU_Yd7I?DCZ`rQN00lXZ^8%Xah--bb
%#;r_13*brGMDO/l]u<c.Qfb%n"eUqs/[Ec053-AR$+lfMLPeF;@7##5*J`-2hQ[npVI@MS4H6E2*<iXd+TddRfQ*nr<#c)k8?h'7
%>0q@!LKreIa!"'!m/!q`n7iq(fW;\K<!4Z\\J3&D6RP/5.u0-sO&QS8*9,\GmT=9N]Gc\D'k2>;.LHoKQ5ECZ(+i66[q1[96`E-_
%8\IU"A$M0c=tJf^MJunTYc&sL/4-UQ[pbD&8;QeC=@BjmCpknCUXn2e<9tmC)N-"GQ+&;Z$7CabqGMJf,/?$O=j3hsZXY_^U353s
%lm04^M[>4?rK]l@TjfaIEiM2:W<K[j1`#+#HFIAr.2;]?`C@_FYo'^@m<VW,W)t<L+dsF0W6:F6/>D-fO'<A%=Wh-3:`B^"Aas"g
%L;3`NTDKMihCOb@ke1CIptdh=HtOG+k-sK(^j?1BO;c,W-][j=dnEk(?>)JY'ip?mZ*:Gp=6#S-@5&[!o;Wd+ZXMs?+na3(=?2tm
%_ntqKSQCi,!HCZTX)^>ILm@"Se3d/Dj`h[W$cd=n?9+S]`?@7Fb47A><gFP*%o%tIj_7sN/C2:^AU,12LZH)pbKA%2=^Gc)1c6&7
%Q*I#c<f?djZ8+BLaa$mPVqJ>Z][D+>HE8Ynj'uMC0((75df;BRk>bZVB#r-c6L1<oZEcTPObMo-fWQi%KB/,a=(QZG,qI.HXbWdq
%b47Aa(7(kDZEcS%PXBJ/cLO3Xf'bQ4q_N][<8['McljJ8]OF\RbJosFK590M'T"VDZM^B5gfk=_]K>Z9<2^:!XJ`911t8Hk%Y-%c
%U(d2IO0Y]t1uuMdpp?b=Egs6X3P37\q!72*MFe/'>g^R:j!!aW5@PEe8$L`/J14o$l*'jr(P^\,(fu*jNHU?#Z/S\)L\/f1p^rjt
%_a+G'l='<?)9fq(im/W?f1>CE:d)kBX>fVa]Z_p`#t;cg.;,9#fm6D`FXF`InS.*MYrN//=.8"/i_)*TTg-EnJS9(\=JCF67*lnG
%1-=gsFS:KLYhOP/L#&WQYKb8W;fnOP-G.dNX=9^PY]jDc@J?1VHC8p3]aDA'!]O%&_3\DI%&"s4o<)1(+p89VA2mLZd@7VF7aa;b
%T)E(Bm'cDc_JX/LYAIg"MN3'ZVItCg7+fbgptCD7qG48!HtE;@\$"/4</`_[FqJ\lddDH2SW9F*I@)a4iaT-K&T40B)NCXo:fr!W
%5b[RTO,"uC[NoFf;EP5f_3Wa[Zu`C5oaDdg:-6T@[L:1"RG7pY_k"^Z[Cu9/XpAe7g_PoQo>?Gr!t/JLRG_^Ypf6tf6>OP@?kUj1
%7BCsISdHj0RibcUVI[`Fe8*LB4UqG!q.[.JkqedBL+#7H`Jk!O:7LMm!q`Bn7=Z"LBdWt;,Gqc&TL4TCrU/aUImcSnPT?qOK:\_0
%"`Aj3clut:1hAI]#j(JXk)BjQSb$GZ`sg?)/1?#7nW8FYc5S&m?YDH5n[Gi_J<F'3a3&pEO8!kMd6_NDI@VE2SiEmo407;@7$+[C
%d/p[YVanp\'[?L10f6m?'\#_-o@o#C9*WOf#.Js#ND=_'cl#WW)E7lMqfe+K]>s-EmP.m?dDUqUc?*joMr`2Vp2$l,Y;.nder:7G
%?.uFbJLj`lQF3AQ8tWS:2et]Ad>-`!$<<lff'fILWn2.?!^_O#b?E797C.Ge.fTF0"VO`,r9hcVNs*jA.gI%<k!][f;4P^c)^.1E
%3W3DN&X7$9/2'e7IZ/P&"@?N6Bf\;Nkgf,sNr)<^84_G(HJA+sR<'>EP>L:?$bSjIAgBL)*>18o2+0o?'^MM]JOi-Dj4/T3DJ+P*
%,S7EqlW-9DeWfLji`<^XUd(TH:<K:+\f"$Ro5d!TE7)<98KCtDUenO05k&:/%kCUR$<nb3a/s1ni%\(,_n%'(BXO`7]8GeNOTc@q
%G22M^d,sO]$n/Pgm)(mG"Zk3DPA(QFg=h;s8oZY`@-a)fSPlsrGPPZ)G6Q^QM='-@o_?K/&Lh?ldRF_6VL/86gZW0K>J!6Aoe?&S
%BA+SorA#sPi+q>3C(=jR=c`\>/:5hHXX^WkX*AO>:e2sEc`Q&kS^F^La`/&g,>EmZ&A/*;6:I";rUO#09i\5u*s=#4*87+Ts6AK!
%1b82qQnP%P7Ej?mZF+U7PNp7h^HAu(n`s6V`p>VgI!\i]h:RQ19&d7%I*tLeB6XYb9Ph?5C)2V]a@R#W[<LA=kU9eZV<(!BW%e\0
%\"A(.a@@GO!4'+1;?eslf'b(`qF;7L8_N^i=.0pE/phU1=s_br7;ae\EaGEp1"a,2]P<7C6:7!LUB#aeHt:<8Otr`KDYRmp*VJ\A
%atmP-+<A5'Rd3:i\@;fRJ"67N4jFue3MFjV]-@c6QTpY!!Am>mh(eTNi_0og971hKl_&7:c)N.f.^[Il`5+rpmt6=lJV9,<df(R%
%WArK#rfr5H,6BB89CfZqne71)lmZb'@/`DA;D'kE8FPb/3e9,[b/8fj9fFY9Q'C6^mZ+GlbIbs4V=cugH_LW/N\/KWXsBc?7<"]+
%&$n;J<;TT\'rDGj%Gak:?WU)(`f@cWb;n@;:[Hb/0=Q)EL),?VeU_10ki7P0YLC!Z/KCOlL&7"\rCH0W5>q&"BARqGE[&b9hp@2m
%=73*1M@SkORIGuNfh_*W"oZQt>.V0,miS="J\)9#X.XB:"X/9RZ;^-DRDm.C\!0<e%$ncBIkp89p<!qEi8XmM'5_CL1jJ*[@rsVJ
%f0OU$oW@F%HV-JlbL6#PDUr2"q/b5l^<2AANH<NsC\H`b2@bJl`n&9[COFccqsE8-P+(V.Ri^D4XL2iAGr>FZd4;eBp!p"tXWDW"
%I)Nsc*4DGrZ\?;N#Yf?T6tetG:I#X\L(*lUjVl<S'[Rjs$PuEd0DR[*?I3G&>$`T8aDp)783T$dP<,Xf3ooH^np8hKe;'UAicfS%
%clB3Z'$k'+V%'(<^)+lp5t0*IC-O`^^NP!\#O[%o#_).X\QC+!M\9b6]S.c-f?Qguo#fULgDb0b%aLE.N1l)qBc6b&*p53$7GVV.
%f-'G<]hL+k+1KW72\S*;#d.e9:duR;\MPSt_C2+\FLK%E_3\@4Rs8mC1^u7^V4?n'YY4VnQqT":NSfA!e_)qN6:f)W<'pF:_L?Kh
%:t+L//*r-<HhtKfU9WZBfKQ389rbam5V'p\YUuslesBj`2WXE_Q=?DW?Wer!bXGg!,@fTjZQY-O)tnJXHil2dDcq/ia(TDMIZSM5
%8GLaH&o\0Ec]uk&,DV\Dk%6bX0^9#c,]%LH*UAOTm!,b4'><c:F0m;&GJEToUkMI)o*6[Lpi(?A;.D&GU6CfcoAr>Y^3s(9G=D;/
%/&FnJ=hNs-q$Y1l+="uI]%-VGT;RIqD2gn.!-<)eoe@**QG#m`3)q&&2'MF2nIMJC=-,qkVj=_Z+VjFZm,k[,/VhgUK=0a`;Lre:
%2<gg1P;D]=,p#gX&naa<BAgil&GcM2)[kp9%$4ZaA4pOudK.3f.YXtX=%FQg=rSU;la."`N:S:u_G;Z##@C6F^cT]F=-L*(HThBs
%[&"H'',[NnHck:jAgGU_,m),:`#_&2>dT)Ng/?kJP`_.Q#jCbH,c!d%*?fB`2u[7C;bs%0O*'$dJ,R\ppFj4+eADXEID!AAlXedW
%*q_=gcYIlr?6.k5OA;ipW4bPjUe]Zgd4];V?/%rC4C#RDdpY27.Cm7?S!6>$[F=]4I=D1f\A/'DLW=%'H9^`Sn]IjOQOKk,U#X@X
%5ObWc[N!?bKkJGS;D5?D9&_JhRqD7Q/*lK8Te&;bP4]3HGob"QX<;^i?[,1mp4lZ!D:)^%h,a0[XOkdg^%f,(7\j6dG?M\0g9b`k
%IbQpE_OJ7H:Ocou.qD]D=LWKZB9T*UbJnZcePt,TMo2nd-gOLH_K^quR[>S!6Z([-"m$S:=0/lAbo<tUpCFbFHu[`,)R>D//Hf9M
%$ng%E6JRj&rCd=*Ss/El+4fE.[P=h6h0(V^gV@-5<B&ZckM<-Zhf1jXT$P/&14WkMa>m45k7)'uKKUp\h44#*[Xk6.,EQjO\5&^q
%\'%P?I)ZoH:RmM22[O)+N=W9<BY#5S=-k#-4j27,gbMXnkV_(QV@nN3fp.B\BuokUHLf^D',%XZJfq+BHS8A_cTo!P5jKacq0-tH
%JRh@gmVL(@9H2V^OkcIM_R,SNfNt?&VI=WRMaZq7Y32?kLl8u0^n7WFX\gbR9bBH5nL4R9OEiLLPAIY3S<7?+!rgiOe^Y.SkXs]<
%mQ-QY/%_!XP7Oo(lprKd:d5j<&[@9d&L@Rdo-`Gr,LXa,Ngs5pfN,_VS/gYW.--Sg:EL,'QEBJm.2amBN`:;qMQocY*fO,dY8a\;
%iftb^H,hpirRZ%X1HB;U]$'GU>AN*j@8<<5gN,0Be)-+_02@-qo@7FId?+lFo/;=#fcuumHetTIjA_dQ2mPoDS9TL$YYrR4ma[&$
%aVHIBk7<CppSF%L)IfT*UuVWu2!\&D20kAuI$XN4:,X:dI`eN+TAs_/\f)cg"StY_HiLR]>MI?p@ArISr:\ns,(7FU's^_.$ZjF#
%Zs00/+nP[uPh#Y-$`t5Pc(Q0'JJ4]Q*<F:2d"6#U<g7P)FKm+W;!s1K/S@0u=*&LaKJ,)^s5m7o0<^R<@GW0$>$<YN;??U?/=Qu;
%e`r</o<FDU^ub]L%V::OjqhJ@UsaEZ,=i_=9/[4"$"gIJUpeYJDWN]#l[A:Gk4,=FR%"4c>`a4aT+BPrkM7=(dOD/74eq,\(ha(T
%g+Q"$VTA7;9iZ<t+%:nf8I-Cs?l/1$MiUGV)2658.:O::NMf_X+-56UNguj;/UiYG];O07;sG=lPX:8K&WUi)Pe&RB1tPoVKo;bN
%.TAC%.6MD6@#Z^diXQ.dJ,G.gEoc4brM,VJEJWL^a3Opr-r@rSCqNK=hdWIt!rUhO;$\.pm"mm3-MX/u>J8SU:<hGF?P"REl&8Y+
%e<YG6hL?shqKG1'o\kT"T1+Ark>S!AJc>(Erp@c#5Q>:F_,"jnkIu2+$FMQ^cDd;:=cWblE1Cub^IjPN6W@Eh14@F:Au1ES]&VgE
%V9BkU\:LP=>8fL(lUF'X^3Za<2t1mq4AgO&k8D!/e%\-X;r9h"%(!_K(?1a-Xp#eucitQS4dR4!??WX*HZ2.9Bi;QKd6h]EX"IH9
%;[E]l61fL^[-=8JbV!^a/O/.?g;de'_?em[/RDN0K`kXZnBMo<O3ZT%4crGK-7<`lQ]h"l]C'cpYrskfRgA1a`KB[@]C)ccngg("
%k14sKSQE`bhf_))9e>o%SVu'<W^3oocP&*6\qH(8?D%*pdX9_pFioJcbG]c\&:[;1jn2lc-KK@]CWMINH;V/,V2^k_>FpbQDh_1G
%Xt73i6YqGh(L@,3PQi"!"QQG=M["-kQ0Z;%0^7Z!8K1\\Jd(-<Cp_u^eQ4^3k+PW#H3DGZ@6*i=ThsQg.+Inm\0CFX\b-)mb;ReY
%<R'P>)e[$VMF&iPH3.@3#usbB(CVNZ6:LT1Hq`*cK'Tq&IQdRoEM;(HE<1Do*>lc7Kl_d@`qA[;mueO2K5.#,NQsa:1.W00X_6P-
%`"Q8XEFE-B<*mnb#8\2\NW;69-[J?!QrV](,C;U*?k37k":;X!Ga*X/b!*1D)[!uA'@\M71'PlmXWB2/*:J1D.<q9mW;g>GGJh7d
%,-8&"n.UUqN<MEQ&0.3([[d!)k8m]B*231@/\W8_J2[BLq*FpJr:CqRa/j)^9HG),325bE<E>.r>FY4aa=[qBQgu9E0l]1nKUip=
%jVPD?2XHD:lYslNa1c+(hk#V:qp1D^b1=0N59+p`Ca:PA=r1L+P2qUZXH`=TL8[A5rZH'H4bE#[9T4U$Bm%3K^@quNM'gs7$/%UJ
%=TXRlLC+:h$m%8<]P:dsN=<2F5u5A?=Ol:^+GL0DD6shW<0+mRK8b@HPb$_5@b'dl%<1f#g/gfij69*Pn%Yk9g#p$?U'"O/U[VM$
%i8[bhB>!f#*6g["UT4]Bf=lK0pPut^d@\iULU3?07<sWlSoZmW/Lh_8Du=^#lD:Y"j`G\0f+("tn5+Uq9-\*-[?471^E0L2$iIXp
%L8[:>AI-"nSQY#-=.0;AhHE;5*N_4&?b>/7amo=\oKV?eg>7;eB>QFCa_J"iCO>6RmVsmB'CN_E_LoGLDO6j<e7bkY9h`^[*M!KU
%lucbEeHD5ReCiNQAGsq4iAU[B=4X5%#aIp^O4bVGSK\$*Tl4+F;u'=(_Om"a$^31aaa,@lqma?o`:.S*ga@6cm:H6a`q=@!]U><l
%S-e*<Lu`iZ_(R3S8"94fe^6KW8-^TP(/T.CI3^<tK(L9.W9I9cOoJuVKX7UlNI-I&VpAD0iF6Mj4rPLKpA:!/_^WM(1EmMn>tT$M
%+QJ+,=:VR![3ttN:EO9KglbFg3fP1kcDM14\I@I=MnD,(AT@Js50LJF^;tNc`(.e?&.k(.(!`hL7-/+8GI<r-&MMa4:YFAO8!h>#
%5/3k18BIY:Qqrj.M9G4*-3t1ENVP(7"U9N''88O^Os&=tJm7@U!e%(LZ1c6VTtFf(J/'=]^g31YCn]3f55!;G@WU4-XS*@!ND2/d
%Q+0!q/L'l:#'A?ReurH<GJW<!n3NC2*3f\qb^%WFgdMlmB=9P&_UrPAj*WDP\3eRKNk:D>-X6NdNh]*CPm"0"^&jH6#M;+N2H:l7
%g>C+-Fp'H._T$)<GVnM.Ci.)M;_(W<HR?;_oR2no@0,bpdQi;t3F$"E&"MP;qG.Ej+[V2@.I+s:j=aD*9k9DC6)(qMa"Q/(6H)3'
%e#,Xk&\LYfA`NDmKD<jDNlS&/&Fe(_inR(*?=QQUd%DFY("H"L3O$9taN(F6o8l'=kMX=1V29QGQ-O>uI8B#eU2_N=0S3k(/$P"H
%S:;:rePO3kBlFuAB(i$gomeBXU)bgo5V$A;GCk6.O-]W-S_mB+H'1$+)l35u]]W+NBDP<E]Ot4(=b1E$-Fh0cX9P\6Iu\.CBgi=(
%1">P*Uc1/n8^7J9+QTCl<Wc>.@#ekDba)Z0@tXR(e;hSEnVdM%i^t]=p-E20i24rY]FI4b*4+np?%Wn/86S5jP*Eo0'"qg^=H-9b
%,0I$k#&BruM3+n?C#O2F%oD<&Q8W`hQ[E`D=Hsg-75,.s[cAm!#VO4J)*At]j`(bO][0\:>hCD>)DuB+b6eAT?=Hg4XG@6>31M+J
%',QaD$=VH4\X:A.7@/'ma?)h"a#7Ha&W]HC546GlmXa;/aVX2*8sr-PijRS2I84rcmN4Sab!Z2Te4Um>B\QY._X!8.\P&0Q8otsP
%II1LGK>,bb`f8G\b#b%r.%*02304pMc\0Q`3pk]:8ag*6U0caZMIB^XcA)Qk`G&K$?'>LBY,'`hLoaL^e>sbP6(`9e':HcI&2]U@
%ccjsD"L'b0c$_tK*`82Nd#W=lB1k;j&$uA'-WV+4l0RMHEIa-faDHB6II[+A3*q(sC3-]o79kCJOd=%ihZjA-@^kYrHn/n/)/p`%
%^Y<77I-0t_gQT((PAA(k--HUA[nJTgA2a.@Ab2OqJ&aVQf=+S:*qm6\OM0F8Hj)DBOZd8q"Wp[t&3)$[=g6b+]9Us5k#5L[@MVnT
%1j<3!WretHAQ24T&9tB40s#)<=9T<MV<<3s5S=UK:5(OeMh$dnZ/(%K3EFKe]3tc6NLC1+rNq4/PSEJ__M3npOu]_6a=*ae0Ypi@
%$PV1*`%;Xu2bMj\!V[Pa`%+A@Cmj4m]*f:OQ2dG?+AkV\p-_%)V0<su90=cgWsB'X$PPelQ3jjFMqp-#L^Ci`M1>YQ>:*bGjFrG@
%Zks/aJXA.GStKqVZPt5^Qi"9Hi=XbU0]Cu1ZXj1rADT*#0ZLOa!E5Y/R/lFe-D2R<_M#h(Fj#G$jkbWB$(P,NKaHIT`b!:IijVT`
%@`!&Oi+&@'(0lHT6Jb3e2/L"><u$dg50(08ZTYY/^sCKAnG:Tb#Oai7<ufAZTrJlB56jCa"/h-04t^Nc]GH&Ge\X&@>.B@3hEtni
%ooN<PMT`a(.P&lPl"gNV0+g!eUWNXu[P[V]JMNr7)^jqn<j]`G0Sqh0BVpJ<Qa0J/B2kL@iD:]cC$<1^(Mdei8[Bj>S3tD#@8ES'
%>T*WCNq41%3@se'5)o_k3\Q.2(/tY^I4nrGTB`@!LnKp2?_@Pj=5JlXnFQY6pHeZrCBW<fl("NqXo6SK>Uf$G<f5'<HLZ#q[J/?S
%lU@]('@)lgIQJto4RLbX^j>O>Nb>C6AR3B+?H5*I_3L<kg,XpAm<leJlr`LjRsUa\^P8^4jY'S<X8WWTH[d0$o.FIHJ[aPN-;)EN
%T2N,SgtF,lFFeW!(iiR5QJ?+6cSuSs,;tYIfGrBc29EjCOf>nFZt&[/"B<+>T#-j"X0C>Xq:[#B?X)/9/?!M=m&j-5IDYun)L8"a
%hQ\!`CAE$:GeO;+4eW<i+\iN#SSNlt81=*uh'Ge.`\2/'%)4"$YSV5*EUi+0:qUUl'rn^E'@hHD_\5+[\u/al54dOVE3"u%2rt`n
%X14O/k863'6a`TR(SE'UD7t0Rg8A>DoqJ-o]dQk5/fJS-RJKH%o73Ho,pg<EI.&$3?h)/1FUh#,Z9P.CGJE=4]YX$&.9W[B>[EZk
%B2Wt7@'.?oWj:qBhd@rkPZ&&\1cN;'o3&<4s*32]j8B2FIY2^V_0Kn:KN&0DS7:8Zj1M*mq@4t6a@oBr.]/\@j5c)^koORH502E8
%7Z2pHX&.AG(42%P79P!5XeM::Hr;?[8GJSKHbQS!E#SpuboB$Z:N42bUDP&A%NZJi<?`V8q3![5V9eXZbSaP)M*doLL%efYI0uQ@
%n0V$9+n^R:n`c.+pNN,%DA3'8CuR+8Du8OjkLFL(0%[#)H6oqsaf](h>cC-L8#gUGHTR:$g1U=^=$h\2?gqiRs%AdF/&2pMef&MK
%gA:u/I,mbq2fNj``8d=hUd`nt)N2`jqDiGHG"$LZH6]ffg($DqBAE2MaLbiAFKY$UGW.QJkn?RtepaGS6@F/2_X95>f69gVn^"l?
%7]>X7]<Eqb,;6_BC9%&->3(DS6N61T)&GUfs,6)YF-*f'WrG])kX)5O+ht`!Tt(FR+(pm)+12.;kdlISd'8:2NWj&')Eg2Kgl_+"
%[a:RdO5-;Z4-@sr4HA'^k\/rR(6(j:3DCV]`RHkATReZKi.8Ta]DAhGX_D_2fWfM4<k<4Cmp##%G^@P*m+gjqB>%>lXucN:--Get
%$W)Bj5u#LCi5:/07S>1Veq0]lfb6*gVO^\m>%B\D1h/gtAc6!EkLIfdW.1/kSS1%rC\9tNQTW=eWm<Ta8Q9s[Y<SmDlYZ$W'ubOc
%lnrYpoNn@T:k\fmrNXP%o5*icA2O-OW"!504F57(%pC5B#to%9>(era9Ih!=E&>U(<#:rX_!cF"g,"VchTh_=0$mg*A@s%[T]IZG
%M'@@6J2j3"EYJh*9?aN4A>k?jjH,]53BT(^ecrENEh\uQEoS3?C[a\W_W=d`$pBI7e``J5:=_mU4)VYq%H9T(+,.ZJphVL7icq1Z
%P\EWS2%3=j9[lSJgdf)A&;R6!:bHi;aG(>nhXFXg1cX-jb&H+ClV)6DPF.s6A[acmZdkq\\H-P8fhjLs,CH.sF-s1Gl+i$15rS;R
%A!=7HerEmqj$-cjan[.,W5qP/?tjrJc=amFV#>6PKM5nqT@d%1F]F?Eq<ns]962#$NhK0`CaRkc8a-/facDkWpP](K`W%l<nP9hc
%$_!*99U'WOD=hl=T4m&gYF#Ta.3ViAmYcRn*ZmAN5rb8Fq;*2c.R_R'7[i4,I:s^!dNS.C_^Tg`l7?n>"6;$6#sJ`Qe5VsGc]U$l
%j)rl7iX[3`Tkd">f<R;VZlTU24;*h%m8T2n#70_D"UR.oq?;qBVQH?pOHsB[;'5MEHn=O@Dna-#)neFAs(%\Re-[-@*3DN\Zoj_7
%V1KsZjs;BA5lqbu&MgVB5Hp);;TZT`5MSY_QhAo=AUtP\2'V&qfo7^W4s?0^#tP<m*S,&V2+6j[jD2WS(@m4U8n=XRd<B,"TH5'L
%otn8-PM@Hp=s7YdASEF%$4p`#P`1\PDhng28b-1sJP?ojV3#AM^5J0=ej0u^Ke^YJp`<3KAE]/2U+EI;(=OG'&/cNG;;->UU4##l
%Tg_(O2+MutRu$Oc/uM0fOgRAPS1A.h[,h>gNato3^C,J21TcAM:p:lF<L?1R)DkH%Wfi'dj?5DO8YiRXM@:ad6LC61\,gSHk/'n2
%:u>:<h>"dNE<68MC%m]\\=>--_u6$1bFrIG3c'qb%K-r;W22U!T/fu-q6%L9ET(?`LEAUi\n8Z]SU;.sWH*+t,.8gie:]S@&QN+*
%Y%4p`q])km;,M!d@@.`S/O>/sou<uZp>Fs?^]^EoUrfe'-Ha\Y8B6RWIDlC3re:qtWJ+TQbR43mA5nAackY=j!<IU?*^aO$0Nuk:
%BI]3tQPU;J=;$qX/m%9d)E+2!NuC85^qJ68h4ZK.DKZ\XNFue?+ZnUDY*frNT8YBF^EF566BgrHjh,X)A9CUFdPNKi-?\CmDg=Jj
%*uLM^;4/fX=`:g7<3glU+CN-lXK3M"2W*6t);>m(2_O6?TJYYR7=p+Qd-$r!OBM\@O]2%K!Y^7WO.s<3WpgQS*hE3WnqiB`_)=%#
%A!Qbk2l]&qqG&1VWuk;2-Ior55ACcR<>>#d,3]c,g6/H;O9s/SQY:jZ)@iZ&&Xts&Tu9?Di.=srQJWEM;C(?oK7cWOc??^F':3Cl
%KXr!Lh]^`i1*T%g'7rZM9MV3Kho'?*DK1Vs6n1ura:efhW2_+'68XL_4RgFc8X%7?-^grM@sF1M:E1m!"9YCVS@jZmObj[LNEjZ\
%9?K1.W+_Fc7@HWCkU:/&TPO_0*)J*kN\Yd"XYgBMrBa\J1$4<pM0uO-O^cN(3gVY+k?K7ZZ::VJb3>(&EUgG0a;W1XgIrXQ$%i=1
%YfZ_0TTB6<IRLb&r.,Y_BW#CRKsrgr0m>BrS!Z0t,_I/9-.U.qQ=pKIJ\`S?nt$dI8`GdHR&acb-mV)KQA>EpqR?lIG&OnGmeo:.
%i,gHS&EI57+1?kZi+8_O$p88fB4Dk\<^93N^W*#a.Bnm9Xe83'()9+Z1IZ^-onu@LRJ9Hm2NOr0(4f/3Jr'n&eVcsR-X)tnLDU9E
%C"REM>;;_Qo_&-jm&d]?M+c"=7)c]MQ5YV\I6pP:PX.V"154XG3Ba>8*:*c)7O?7B1o<WnFo5QHEl4mD36='>#lVVcfG.58<UW)m
%r(A#=7bpDb=lR_7HWVOrMk!2;=X/MX.6k"BK^C2r19/f7M\2:acT!Nr$ICTB"Ho_a*QqLR$3[dRqg2+/6@8b"h`kFG;[c0rc`ASh
%N*!`VRUXV$kUW\_(<BT?HO4rQ8^c_+RK7;K<'('3BbHgS0"tp7M5]p_g%$n"?=QiTJc=9;WV:sZM'+6)DqKB0k-8u;e'aiXjFq2$
%`JA-cI4fljEkZ_7"hKS-EZQ+<mZu=.,OM;O/I;d6,41[O>:)6Fhr/G,%"H-NpMbZqpmNK5]GrIX_W!Gr%&@jHd"lYD>&$HU]>[7t
%CR1G7+hg/PrHW>?nc"Z[0IBU?qkncKl^ROunJ9+a%qH+#:oK#rK\=%aKsrbYXjTUB*E`2p]pZ2\);1%Y)E&:rN:m&Q$uK`nHXQ)>
%g.-Y'oJ%GSoa>Pm%DAKINGR!%=M127G,At>8h1%o?93&)FI'A\`$R5f]D1LC=$J>'(V6ej;&kqh.dNt@^XTcRDcG:@X=;_$^bpBG
%b!*\OiG0CaMlUf(5Ha\oId)UY-2tdHq!I106G)93&*$n=W`+M+N)P>'"-*8aa6m?ri,IZ5$pkN+-oa?73&pT`T8Xa0T\TNG#^6T?
%O2K.#'ET$e@ok/i`'UQh[fRt)-g+-bo?8!j,0HUI4csogEq\VKEAXaRO2G<+*DUu"WDu]W/CNS[Tt)I&)FNQXs)7@1H7[7!o_&@Y
%+*+-9JM%qVaebOL!sUAc0C47t15)/=fmm"28=ha%h`JPsOMQ!UjishU=`(\c"]Tr;-Q%47K+YrXX17Mr3.o)7(?P3FJ2ED,*Q,n7
%S+Q-bmltnVE`6O/6Xo5o!I%m],\H7XYaH<eqc+WJdofS,gp'>[ou,m@i1s\6JV@#(1<B/S,j8n>f-+u47BDY+\*$R`2)H01*A;/I
%4>?.CbPb'>.Jm`9m=Z^ef"]@_m"jEn$'rQ]=-"i`1DJQnnH2RL,X485@`Ri%(rKGNOEQ[.@h$HeW)[$>#psV\'aA9_Q8Icb7q?rA
%%s\fU<Nn,o19A]!*3J3'KkHSF4j"DhFu@]Z%V_7f^Mtt)hG8A*6<t8*7ls]HC7o`44=Drt3]8!smY)H9KEKO+eC.fL4PnG$k4#IF
%Ji1J,`FSBj#d<B\?QP>DBHQXUf%7]94"XbQ%(PB^=IuS3=uFop[XDM*^6e!YPjYo$/ZX,>qHW9+@&?39n_45&+6eto])?G>\_e*!
%7r(Wg_:"B,YfG/H3YM=b1+dh/WFbhcpU\;1OJalae;f"#C`-oA`'u;>+(>rag'/=U$SMPKUlIlppW,s$0@]eS@Bo#)Te.XN,iQWS
%N:?<nptUkYL2`,/YR<;EDYG!^IA[Y;7Cg=LPKVet*Dr`g'tDZ.N_4Ic'?'s[&"^Fk/EZ?;X[Q7oW8ZJR1\IEo0%<O8aG$s%aZ,%p
%3eLd2c\Sl7L9^\iIXW]eqia9SA$ZDHqP2pH/JXJ3l3l*bO_@N<OL,7AY%86alae=CC4AQ!4;EIho8ImgRV/'#)"k$VpU]n"L@aiK
%4&G/NqR#k[931/b5:lO&Rod_.$f@TE6:@2](F%oU>tC0c$E)6Bs*c2ki(_6Of+WlnL'MeJ]/R_^-fL[<'>fFa`P[RgE]GIW2:B:D
%[X<OQ(Nc;L&pa@IjR(iNj=P3O,CM/8p#hJ@5N(ekY;pb))NUcR[+mI,&J3PMfW^J-$6&om)t2h.g!KP3]RIr!+!gO$olAHP,LTKe
%;PSnt]$Khs^PK7(7,%Z*,)slXiNJWjl2O>3[Y^9"o/-oKqBZ<*O&PQ16+eFE90F_-pH\KK0*:>R!VEiRJ24bG5ApQ:^XQ,p(8CA$
%dAXd_'?>s4:)*:2_[-_p0_$$*o3fRH?>aC:+a4H=TDp+]IZ\8mlgbJ8T(k*+,E=F&KV+Mpqqai]MMK4Id;%+,MVNl*&l$2JU6.3c
%R'N4]r%@1ss$`[\,16D@,oRa*iTL44,<Q&mUEed-V^lc8$?q_l3;.CBY`XT$/`Jm!?uA@u]Wk57@7N@e7e.c1p/cS]q5g*X%=>^p
%&%CFG#O%>ZM<"51@)2a(_RJ>9JYrl7L`9]G="k]*:mP7gpD>+U"a?+C/$BCJ3QSgQ<:P+j5$<k9p-Q_R/u,/%>GH$:PU\"(O<a)O
%`<WR@`MT!_%MZgM91?"\Fkkf+Est6U=!.)D]^]GC5TDWYAJ$lOB2;d7Q>b1\ks.)E/9^9pJ,/4P7GQ>.:L\A!3L:4n=`]'\K^6(d
%2-7M'SIY'sAu3B_M/2inrCu*`E8gm<a@1%g?Zp]A"DdTT5>kj!;hdY^FD3:K:h:GdbZSj:[a`9qSSDC8pCa!X#k;6?&7<8?#anY#
%KP"k#2874g"P+5*!-*:T_)fDuZ@Mi_)3E-"#^7tZ7g>F;>Kk,BU]MeDjh*L]ef$9&gQrn)H;It8L.6?RXp$gBZ'4qo%hT;l;(t4R
%"Vi$s42Ni4Vl+E.K9HOK2G6L_)Ts0]2%tQnC?(^f%aJhn[i\pL4cf?lk+DS.qA]*#AhcfNKZgCa4&un8a?q@).&e#007K]3Gn[A4
%Fi7;hf`4A2U`@5d^?ODc&8g%0V5.dfNS]&BMV-\s`b$scI8W*`:qMq[jRUjV1,P:!hXZ7d#tUtG8)8&(`:tRLa)-5u:m-?s1V)8L
%Vh"Wp+H=3qL6b*'ZtJE*n%/g=h7#Wn#$7G]:Lpg4d>E]<O^r8P\D'fC[3HZ"Jg=kn6b([BZOj0tT>WN>-d;#LZ:NA06%X&WUET9'
%Eb3=$gZVmHpJK#oe.o]!XuOA_n?(KJF!oUR+$gAG#hK1K<fe.94-Su;7F8dTg>WVPUtH[oIqYVniqmqO).J^l>bi#'+'(V#L<t^6
%0`r6`7dA^I:NZ+k0C@it-9A6Lqh@@r5W^nP[A+e`"b+a)0u;TKiaGalr,eRg"kVqe_MYrt:iB/IBr\]rRLU=*&pW#kPRS@a"-06d
%%0dkE[4@jk<PSu:WN0Ds7Y"H/XE8Dp;F+:?(daPGWh@4?ONr\g'4C*GfaO5/O4!$0P!TAEBPLi*J?d]2QAu1Tk7f3'Le5Z[_RIrM
%^(=,icqGq@A1_<#/.u<2V5Q7_A-_&085N1:cq30ZOW2Y$)-BRQXCVY=`\-889%G<k;ndo1A?Rht/o8P8$b)pb8e9pqSeOY[VCE8k
%+5XSZFCsJ$0"dHa?^"OF'g0m.\r[7*R@BS\&\2&#6a&9&TENHo^l1h;;?UgqqF68VdO0$54+=m!Tr8]+`53nt4r1]#8;hh6!hbX;
%\g80od_[[k1M3RZ62Gt^4QQ)YBZUY,=Vke!i"`g['L1)9*C%%7)66YEN*1Ji/mo,D=IE*f2u,Q^M5e5;e@H3W=1L";M0.uJCop^V
%46]F*2LOa<A-#nr3In1K(_)d/!AV0pHSi.58-;eY#:+cH\k!kg!ML&qquM@o<$a&q/SbbQJ)&0p$D&Y\9`_[nk-ZH5<mm3U22-ui
%Q"3BD"r!n4$ogT9DG?*5`h-n7mT5i\(UaV&;s?gdjQ0Sk*_X@%9sP?f@?_'GagS#tNKlp7/tX:bpi_^o<!B7Wi9!iq/lg?'<4S2Y
%+A#A->W2j5d1o7XI1QTuXR`UR$:`W/$"oF-VSo3g`'MC#/ZFS-3eOFh854>g?:r3il^Ah96U1#_)n;*]RV3/L_&^lnnrt9k0]725
%!n*sBdI+NgRKTFKcu_B,_lP-H\%:Cj3U7l/_\<=#?s2g<S<4%akaE`UVL?gCZmTTL+;.@1V?j/&_/q!6Wfk6Orq$5a7@(`PB!\lD
%ar=46a]9A`75A1`cFU@nE.Kjl*gFsMkY(<Efr`=Z1hO)$Z`#.IW4C_-3N%Q@/1q(S0jj*t:''E`9i8)^fOUuVk(qb+^b+Rk`dP!,
%a]XnSeiF@8T<p)=f+j]jA.>[Vd+I83[Wu.eZAADU2i;YWlOlU'Y#K6=lWS-^.Q,lnelCN]e^R?P'hO)iWW#M2$7;#hLcXrJ!ga>4
%ASN2&DdHTja\ECQBZVAHGpM5"/i9K9<J_$CA3GO%>Eu9\VV?k4+dKkQH_(YsP-+@:WT&&e_FATa,J"C.fl>TSk)MamD:X`8>72NP
%L@$1r@5RBFgHC]t's?`(0kqK$W]Dnba1@Ig4f%_PHMX#[:"Y;/.;DSq!@qX1!N69*Zt&"*WcMXK]h^`@D*%@>Kq_V$kiq5!'bt]u
%bHd0nm!PAUWgbGn[BE*Ra8\J(CP#YrNQWY!W^9nN'_Z7sZ'Kam(B@ZZ;VJ&AQ)<,db:kfW22J8GWomFV[G#WTO/KQne]<UaGspJ'
%]o\aAO]J!C@$.HY8Rn)PHq.\:A/1Q%=hAl%kXne>68Gbi3cXu@ACJUI_9-E2*d84OEQK^!K(V`V<[Gbh\Htf,GZ/e?/V&g%p3d*O
%kB,E0Xs@(K;V:]OG>HfWK!YHa>:uXf&%kf12/*<JLAgPPb&-OH;k4Q*qT<[B=.42:keNW.o'WE+dob13EOsD`!`!=;d[YIEHo:<V
%h9To8LTNGl1q#9JSK`6R3ENI<6W4o\rIS>/j]^>4%:/;MBpVna;`(Im0ie#)M]nuT07i67lR@RYc?pou`N;a+e*u7cBUoBZ-%Xm'
%@1$%Z%_0rV)i3n_G%Q#DH\FQ:XA-YSK@XYn%Q@IP;AD*b<1&7Y`SSS"G%:g/TrfE`=2rF,]YhGuq:+U<D-*14Y0_F%g(BP6_R!#u
%.p4rm,2HcC$L??%`-k,^0ABq-8lP&UGeBuibgZ2G@r/L/Nnk/M1GdR,RO3tM_pbmf6;]8U?SYstT,*$&#$W_fROnOZ@Yedp0ae#5
%3Hm9LW"?Pge@G\s3B'3_*2j6HdTI0+jq'![N]LK)_[4)c_,JFC6`r8B0'&XY]lR=u@*sQoD;iH:I]?Rm2gZ$t*!\3f/BcA)U=KJ%
%Gu:*6<2^++8;EY:basNT.!eeGO]eY5>_Zm<es3,`Pt_CLoaQ%@Drdq#RW^_UoIpBjqF9BTUnk?G?"ci9a<-S>p2$QOW>7'`G*5Pn
%G)0gAj4+_EbZRY9cu+bFZr30;j@XK.d[f8h_1LpUXh:u/V<+KWg87=HoP5Ct`R7JC9e)NMGBfK8j$[og(&2Bai4M`\Ni4c?+f^YI
%A+,LhO)79e`A.]:/I9lbS77rbM<6qqOC#nP:I'M/3F\\s;g%$c"HF^qO_0#j(UVNgd5/d'?Ikneec\kuO#/\[Xu-tJ#3ekVeHB';
%V7'<4NTPMr+DRsiXLCY"\H0im)D;@gbpBt+(6Y]J\rW3*<1uV@bSlA6nBTbhe^4'%BK(J]A#I\H$^ABWFeq)Wa?GLMKQl!q86\W3
%GP,C"C=f_0iK`!fm^gi:.Rle$f/>QGcpiDujBhZfTM:%hc)G2$@lA&YI1tE.?B'(8@5YkqmjlYn9597JWdXUdj4<3.6apg^aLLnk
%+mHG!Odt(?G!a)D@b:i`@pXAYe"G(KPC0s)]U<-u@m:o[2Ei.@pb`$$5L8+E*AKVE_\)o^(3GW_YUbOZd`>ahBU<N[P1-W;8c3UJ
%%Ma@7Nm*B^27udJY[K_S(RX/uBm%^,5&>^'jGcmt3QC$9+mVP`T$fs46M]!DJjUb!1K%@.@CmEmGn]q&n>2L^*L-DTX:"u)e+ulu
%4iG&,$Z!iP(Vkt*L<p3jg0-][0sDtu]bnj4'aQW')cHWi#3+;g;AL6$bZC7DY!tjUgPdj;2L-ZBS=KT65\W?d8c7c-=Y@&Ghm1:S
%k3W_*PPU+#``QUhZtp!slro!?MPNnM?7ill&kUHh?feo9-U\&T!qK?5JFosoUq@tXE.%m@=oCRQ#5uoKHQu6,-]6c>4#j]-KYuI!
%\D@DKSI/13XJQ"X%V\=+aW]ZQYG:d(=Q+&qN$-5%+k_a7^)jfS=W`A"84PaWP+(Bl,TW`b&8SpMZ8*8b]_W6M&an3-C8Liq5jc.C
%g_t#<0A[TZ>oOg9j]JiSF>:@^GLpZKK1l+26B0b@o#CQDW5Y*TD(Bs"#$?#rMM]_5a0^QECt>]32h(<SMttB>HquEIk4t9KnOCX"
%l%V(:7,"j'g#F><dY,+h]]^mjm>$mg\j@Wcm6PD.$h+W"@)<ti#k83F=5S*gj?mM$'q9'6/ZcWj)Y](gN][e\jbe#TR^-KIgRa;f
%_4fZgV+U\k'tYTs^TW/B<)]PPWD9BG\.>E,a#h7b*49%9+XKi<%kAO/;062^]Z$(tP,g\UiS&>hFJ%alq,bAbSkI,[p-j]u)d4PY
%G)&gL`CM#g_3`CeLH:Jeh?7/sSC_m-,'`1BO&[ak-H&Ag+^1ReBHZXH\\0t#a@b'm)ASCVArKltanm6d*L@!,<CZkI)L>]T(Drho
%Z!^*i!A<JYM5q3l*j4^b<Fg_%8dV9R&D)4=*`2bS.D.tJc,@)_&JMEp0=BMTN&0I^s'S>kRJ/f(a9iQ,\q*5X/5]:QmF=Q^);b8_
%ml-Y^STfH3P@.DU6D_STYp%N5k5mp`YA3";,;BfUan"X\C*1>:)R;8An\l95YUjm^qkT]L6(kU,ei0QE*5HGaX6GrSO/N%e7oR7l
%R<TNb7golqPI^)"P.Gbg:s&6H8HLb/3[P[W=afY*8X&o96i2H+)PKWLaC6?n.-T'sMYYX\n@m=n;#NGrYRi2\0rf?g@,rWe,28+@
%miXZE]MNL]hY:5%8O*T\^`):f:-?q?6ee2oR>eu%g*e+=#n;,PG^bq:&?0S&A]5G>%0qZ(lZPEY-@M*2To=n4GQU$r!GTE=)X!'^
%Gj_Nue"-mg12L,"dCuB&3Zd8Fj?!IC)gTYdNm6]dS"'&.-S)Y##,+"_Y0G^dNC,N`hf]O=fX^AmL[#]E@Rh#1!(&g`.m4[fgsgLX
%2Lg9\&rJbKQrc$1*PdK2G08GeB$A/cM$J5WD>]&0,X%FM[=\j>+9-[PJH_1!)/6^G!2Er8_r*Yg6T!N'MUB_,+aKck9os8kkW?Yt
%K[Mm`EI!+.ok[JiR8qoEPHFllB$OJG'n#6I?kBHM'lh;+IgD=pO;``\hZ?5S_J)t+U8]Am/-mMpXb\$rV0uAOWUs>DU@!afglR,'
%$@47n+O*n=elpJ:.+l3hHhk5QLa(pb,$M:>K;[.Cg^T8:e7AXS_mF_QnCu@`0WeHLXG"O.F%-eFNi52POmaioqlKfj;0+/8qnicl
%^qH%D9qM2Jn2-iQXlhu2B6./-Cs'e\KnnA%,2F*q;111N^kauI98fW*R+%b8+Q[ai;@Fpnr"Ob.MLh,/Gd+Js[_/"S5A:5MYR\*n
%9NM'0RB7Th![/"2ZONn]B%+UP0:*00Wj7_nqeRetOm]:'VNVaaD99rshV^Km!J3cm$njJpiEFlq=C^FL%#48?L;C+DE*E+B6&b#o
%r]j:qFJKnN(!;:9o#h;DbXgtJF#C,.kSUX8PBThA*a&*gdNFuKn)r7TE/7n0+0NmK0"&+DL_A?LLjLk"#R_q`?ZJ^3*u`f,jQ\/P
%0gf,kY!PS<4(W2m1<uAjfkU[3mfj&;Bh]Pu-%*^@QqHql.6N+5`5/-2E`c\0B!ZH`WfFuicCN*'e\dbaru*d8[^3<4lgX1PYYCj)
%M;iWMRd:TCUg@N$R]X[I]$4Uc'(LC`<=J+>`4`=Kl4B,1+[l:U5bd"I1m-EFG!B=GcD8D1$qB.h56\?M/QVDK@ULIhW$BP&fiN(O
%+]hB7A!;-IVT&iQJ.R_pq3Jp18J*Sp0btm*UiD'i&=qp"]S0$Mh5$]+Z\Pa6Ia4)1r)lTWX65Uua#`tSO>gc7Q8j7H5DiG/F]@1s
%ALhq*7A1M(kha+691l-DZ;SY_TA-#RVZM4gB-H;p_\;d1o;3m0%lmg88B]f8W3qW<o5kQ6Lt($/`JefhOefuqqsMPm*oMf&]BF:.
%MHf//Dold)*D&Mc?O:a]-<?&$Q?hB,5d<j?AB>GhWoS?!F@*SXf=Z<d=g>rYMXG7!r@AdpC=kS_JL\8DhiXBEhHL4%e]r(7[(TT,
%LM[,)h@AfL6N]c%4%^ug?%kpr42)DN]W:\=2XqI/)fKgk6rt*JrVHe2N].X7gECk^Noipn7M,'#<eSmHD@'Y\4.V$MEDm=g^Wgk?
%#Lpn7pGgkQ31^ed()L#P4M]l?]^-Q`M/!mUZY%6HkMg;1d]#ZGU10LK6`]A#/c[i:M[dYD1+`G2'M;L=gC_8jI/Q%iR63aVI?f%$
%fp#omLkR4G$>LD+?io0r3n60kE.J<gS`uWGL6&cVT(pai#oG<ab?jCioq$7B,!qkZ`3d5flphZ(d'K;`feNZhi]9CFM)s@H&+a5L
%&brZ?iSnad%\R%'GYc-#dM8I1mlOQh^DMkWPnVE8[hFX$[tU4p7W2-9Ikc)!JTMSoBD,jo#H#6Z`+m[s=CB%9)\')+S*^_U(1nd=
%LZjm;=-5!k)q8OQ]j+b>B(#50P[s)VimfuL^1K9lXk)?^>`aRkYLRO(&Z/uuG5\@jD^hRZXXouAK$Kd==Ki76H4JUn=9^kE&QA82
%P\j).O^;!oSUk!l$LVA.Rsf3B_fbJ:/Of+UO:=f&RCs-?ltMY#SD`;H!Q&jaE@Vao&Nh(pR%;0HCm]6bCqZt)gp10I=g>rT)Q'[^
%o8=kr>b>rH#MCd7V!5O%K9P>-fqn0@7rH$T*'Dn$3m:J@1)mtn2+oMnC2Va/DcWjVeLG-hX&809^/&QU_\@bBO<uF@>$56!%csRm
%e.ODJW>K`t>g,?abO$LS<K7rqZ(H(1Af"XB>@<:p_]kmhdqu5Kl#:'6O7:8/GF7,&M$P(6Q"bdSK"dpHV4p/^hR*f$"Gb'R(2^dC
%WNK7[m%n2EG4j7IX$FNn[8kpAmDG=XW6j9Q`u`J(TVfP;cs_U4`fG^F6rn\!C@fEqW:2\9r,NgjIDo^8,X,S>];Af&Q[s+M24g^9
%jAQdTg9TMsY;nX3\&G*g?OUjcL?(oX6u/"t%6S/0*@YiqX)[f`A'Bf^jq!ul2ItA%[RFAgjjX;=KL`3:Sik#5^]@U)`79lu=0L%Y
%XI=dMig'$;"TR/nNZ)'9(`dkTAEBuF1EtXe>Zif=S7A'$fD8e8,Q#D=:P/i)fOZj]c1+5aRU*Rndid=U4c;`:2g.""&D%F#ZtZa8
%g%_]gh)&5m=g>rY9nQ(XrA7'N6gbu!5aqsL&d>i9?0o(8ONj(NM]iQp%6k@=')[LmPaSaHfb"#jQnr/*[Yh1&a\94OnPc?Q<\1bt
%Jt4f]K:O,3m8=T&4,GiV'^Ptm.X;S1Y`jl]N=N5'-<L@\QhVJ4_+p)u.JmL#>QYg!'W\,F@_keYLpb58Hh^tr^.['Q_+kQnP1%2^
%X)ds]Jt8@#5_&:>:9[C@)3:Q/:,#CUW0RWLZ#-N:@&M#\J#?[%4pq"h(L)Ln>PN@)hTj0TeB0t\*ohg*nsM'29L]fpI+\`?>':="
%+'?miZ(K$tRTW,U!1X-Q6tL??MebJlO/iBFYW==m%W<Q1L'r8@m'>FeeKGN">Hnl7p7mLP_Kf7q6ko%+MH@AYo"tfPlL<hfRsq4#
%_oh/#D=md_?rSeSG1k3:">[JHXp&"i)>$E*a0X\\B\:-'G$)016n(R^McMV_9uP"OD'2?R/Q/o`<hXI2A8@M%mGTJ%CC>@b4]EC"
%g&).[*#gfbkT\N(j#)]'>Omoc,.6*@CmZF`i#D)M%UtoL/3%LSH\J[uIU&Ss%LupZ[d4[E45m?ML:`bAjQ_s7#Js,Q]erDGTdlu9
%(27YhW,@+qs!f,!;&q(TgmRcj"ZA&-<#Xc,LP6#k"iHFKRoE8QEq-c!cJ+F27jE@N4TS*NaK*j")6skCOitQ@OhM8ph'c>_(F%aj
%Eoa?ir5#pPE7Kg&e`-SFIEP^S>O@=C-KnI9@)i>]5s#^/4.9G5k"t@ZkG@keONl*Xqge$M3"FG`*OU<P_`&eP$0Xq%!O?.?`t=/M
%PUfjN>[PYs2Lao[5#uA%lY'qS^<e]^S5;mLf'EE.D.P"(NT2W_DL"$&ljhmg:m-iM0?a<ic++4ncg1N,0"BVVm^7uIMP"S<,2F9<
%dJ7_]*RTZ8A#mp54%,T8XkQa9@T?>=/lE'[U#up85^u;HB$@:&c)\gN'jJmtV#Ri^].YP=I_+b$5`PFApW]/M`O68Dm=5l-Y528*
%_>+dXXM7-&s3O#jolm4]nEF[mZ2Tcg<Qpi^@/k!]+3RKnTW&E.KX"+#,R5OI<Fc/Kl,Y`sbkDO$Jl-FZ+;mS5Mrf2\o8&iU.#1V6
%e3LJ>T[nS(a3m/<@Ch`fRJ_d8M>+f>+W->dA+TNC.t+5%j;/:@4G#rWpl]%ki`36m88;R7Q\EpU[)+cagqY2eUE$6Y*\(6d,&b])
%0kSBOn">=a/*@-58:jOp3i,d@(J$<;B&=!N8B%oB350iWI1Xjf/@V(;BbjTB0<TC,pU=r5`0*M&4"@bNNR.sgDFW\Kj(K/`Y*8(l
%f>cVS,\a,jqArb3N>aq3^&*qo(/O&3T6=Yb.POL19cNAqOs-tI(22aC8D1f($Jk2)[]Itfh8]KC69bKaBu_&dc!R,<!8+(&aL\h7
%kTdK;fo!.Ihsfh_^pSN?2ZAo#NN6jg*.;=0Pqe#1ln@aP/A*H[#t=/D@^ZDl#/^$Ya]=MI6Gcn^'[<X[l8!@A]2"rgY(p:MaG5ki
%E@/OFeqa-1>2Y+0?$7C=LP03t@XjV(P7A!6N<bZOpmNt^cW%!c)43ek_em:mrfCtK$bQeRC@fP%>A>]r"mPVZ/=C"q1j&@GJo+o:
%DBeB8YgnaRZCeg%(<?g!m`[E^<SPXs%;8.oW"DJZ].!FM?*U..UP&a^HptGW)32siAbL2M&$r-k-'/SR%!',dW+AVVJ29Dn(aOU(
%!,pY,;(qi_+[8d02-u&U(JY]lDR>F^P#0GT;1`"&'K)@<fIq2l^?)eR2nhGIJut^hQ*]c?kU]-&P@bYVkho0-f!&;JC]3>9$8&]C
%:40U\bt4^gT`&rD-Phh@\:Y;QAQVHqP\YJJ%4K<kh"P8\/-;?[lI_3V5;WpSYp/qCOhto$=B2Ck7AQuD0e5/-59poaV1G8#9OgOr
%6AL]Q7Lit:8d#X2es]:7daY0#rG?,G<O+AgT<Z$U)0bHOXCC>(%r1L@HRt_J#^f:uG(7d+Z[qgI47(t\$.SHXrESV-,M0,N=kYL#
%QTfO<ac/TO+*s8X9tOS*mrH=d.lXli$p3+X1%hJ!il^Ur3mCrLINH_HG9:'!](XpYB9QZJj./mbN"^i0+]aJ^S\iO8JJt)r3qS5X
%N$J.-!C6n2P?NcCpr5uGR)Et/8?jYmI#X$9OkqOgm:Gh5$;5lZ1sd>WB[t[u:9@kGoTdYo%/#.O3jQ/"<L*imB\a'h[M2aQ\<]oA
%aY)So5TPDcd5RR-q9E)G`Jj10(Wrn_].Y*eS[Mepe"c*?i=YH?b;Rck'8K+k#2M\sjW#jJAZCoP#gW%8EG0K.mK^*pmKd5O:80`8
%oPPbaamfJ8i=u.gc%eiojiJfPgj0p>@>2pPGJu9>gBo!0iD:+Q%U>f?a-+")WG?bh<4pghe9+o6i;l\i8]-8>&6MN=Ztrl8'?r)Y
%C5-8<._)U"n.&PW2?C8j'"4PPV]3:i'X'Jb,craFru`IR&lg+Z3Jji(Es(=6lN#.Gln=NNr.*B"D<?$J,lJ6\!p53f'<HCX2/-&N
%i87"s1D$u[_Meu$'0mM*YD&a6?<O<V=l#m.0I/.m`]srZ4*X;Z-Mq&aC,AM%U!jk!+W"\m\R(.u``VTADT&nj2pDZ#dg;i!?/V+U
%?cS63<&bA_T"q&/OHA]pm4GA]WuOkY#>=8$j:f@1pU0lO`tOorSs&;XC'-E!c5WDFH^'XU!\#mI1'?cW!3\7NFe8/;&uY9_Ts_Ys
%9QQF2-Zn)cf9BZeA+"uP-SCCi3TW,$hJeEkeKZ>u_nr:&&/)5r&mO%N+H_\Y9J/"DKgSS'J:h?jHf:`*[3S+um#>%bDmj\+]>sC-
%C*KXeEY`c>G"Dbr0\9\$3Nu,$+*='`5/.Ip]Y,R5idLCL6210d>K,2Za3sh^/h!haF4?[<K7A1Trr*(&hB(A,dt-[@T\j60aHDp,
%JIMhbg2u>i_FB&>Ou,M:`5[#?j$IG-`JS_/G$sA=I+TViWJO`:pi(gEA`-JX,*`^B7RDORBF$elN#B-m2cA6c3i-dm7>?R=j>Efl
%%"Qtd%?(jB:u)Jn1m/m;>%(OP[5kUCdUC`:/]Uk^+o%(pP2)7k`<ObUF\c`r^;:$l>EdRtr6iBW(TMNM^"uSBHkE$m_b_5U$h#$j
%gfF_?iiB/C+2.'O3TYKb"HA%\NapL=0rR^ccEp,:6u1io-^_.h@d4f0'X9qm5FE5E%umhsCb]k(/o?j@N&W6Wjar."^n]"6)Rs">
%pouT;,Uh/&QiuY5&LrJPdeS&KdY?C(U;JAh0i6pCSfZPn"k*cj:S:DlX.qV%HF"gHC/.!B`,3;h.Z9,4G%#Os7Neb:"lWml+Ld;+
%@:=dCdQo(<G!pf"")#!Z=8VU4[='.^HEbqq1<*s,]ndJ"=L[A0&sD&]luQ.o%le+Y=puimUs\/>cI]".(aA:bE9,sr:XfQ%7oVI1
%<Is)3eB]i6ZN%OUj;X'^D@^]@LB?dNPP=5'f>'jW,jW<WA2GW(r>iDfMPq2QW<&\\3;5>AWta4pKC'DnO$OF0ZLJfBcg*2LA=VEL
%@2G*89](p1q(@?2!pr::-rD'1-V?o>N(@oHZbd6WQ=gtM'Chg@5\P)?>qAli&l.XhXj@(I%]0`[Y?<@Hb='lXR`Mo>9Q9Q6U_`Es
%(-^rsdR\,[chF&+#[3Fg8kOUkDd^LNCsnbVaOCZ3kF."1b=rj\;`7PnNXoR2XP&Q^k=9XcJT$Vsks(Xpip<"<QC69b15(*['+hts
%62TK8.0n,UTu8sVOa\9N_eT?=lp'-5EZ4W"rAS:cX)b*#-#B<VnPKl2:Sf#PjGFm19*?HU,Dhb88P12Hl0"Ba70k0E[k*Z[2sYPh
%:W_-I+S94O2ah4$Qt=B)[OI/IWf)[*NrO[/SDodj=R>G:g;4(8=R"0eb,7=?mTU[-/<R1F6ss5Pr0a#lHf@Qc8qeJDAi>RlX_X)g
%Lt2:_2scQ8\A@RaSa+%d,#7r4AD=:hZ.U7pFDg&m*=,RMSItIk4-2q!ZY.p<@.bc(80?Wo+_8Y&[&M"FbGPZ&I-M$`RQ41@J5rVZ
%WB=RQi"+Fe&=j6TVE&Ka8#<P(F&NH\h%*$b56EoKHh%gb7gtc7k$1)/n3QeK,iMCgm_4h%X^Uea?1dHM&RT'8CLCq5eS3/`.am66
%h8CE._MGE!9IVu`Lu$2#JbWG?0dhtE$RAFu95(/Sj;H]0VdLI"&qq0DibuUDZ3eX(J2JBl';XgRIFrf_LYk#Lk<"_oRj2ukj5]!s
%?NTS)CH!4N@@D'i1gj8J%C<0Ud[==uXNp3ekc;O>k6@e.at"QtPXAK*$T,:-WQ"\DJIhU\KpY@)I/hlA0Qi?O:ZfmNg#fB)HJP*=
%?N$@7FD?YR)Ga(Jc3C2*X[t<k[Q1Ui?8ndS;ubE"SQb$Ca]"D9[.(sC6mrp%d%<4^/n&9\!g\9^Zf]A<b-cN+0^7aq+B(\RF352l
%HBL!SjA#eM>g5XR'P[/H0dWGVInTl'O"""`cD/U[Gn533mks`5T0JX4finW3]_+AIh2aNIWs2$e$;S*l=:SH5(:*25#1>[i&=C"!
%U$3f1QW9e(D^(<*^K#%l#s_VKiZbdlD*]+#)4REKo9V@-NuiWQi(<#WG8=<\8L#iAEe:A[<S2[ULRcRM!j]GKW[bu`&hZfMi7KbP
%B?$'s"(BCs252[#$e[SV^rb4S24;4dE=\g(blhSIL)!;I6VMTR(smd<5(;FK9Mg0bZ5otSKRSjQ02`d>lBmaLH!TA`m')Ao:t?Dg
%,;PBu(GTm71^Qmb0<MiJ#<:eUW(EbBDpGQmj"NtLUEpr#X,2(=('pO(&G;SC+ibO2.igF']STC-n3_B*=GQFEHV+Zc'i&`=2+^O!
%0.f<4JA6d#M.If"XuW!;!f:33^'F#%@E1KH?;AgJ6r-Dm(H>GMS8UAQo-?2UD+#]f,RrENKro3KL^!!m#[:>C294oc)L1/tMAQ9S
%V!>T/$cJ54)[Hso@)L;Y:32:Y$uq1YP7E>R*8^I)LeT>DhCsjrY/!,2FR8JfHt(<%RUhBCF3F!)N./B7R8tb7AXs8'MBOg+^f!4d
%Xh]<?@'AsHmMM\X-m92B.`Rmn6[#7PZ3bUTnXq#!E#5L0Y^:<;<Bs!9Ybfu_grN`(GB`1;oP]gS$&0qDChdA=\3d"JiX!5$*HKku
%"lqd8Cb[YBGUOL39!6VW1$q*!Zp<udS^W0.WJ-j#AH=/gPLO.Bd`-3aim>a/^M=NRPR#!3$\g`#8ieG__GQl/N_&QWqBUsf!W-Rj
%+Z:>`b=g_",1)C1I>aPH[+[IlM\X4=<BaS=EXdY+2LE2)]V^\'=`-*+;S0Bg2G)RBrd=GH6qH8%M[;Zi+fWQbmsAIa-9+7n2mT2G
%i`#=P>D!XLNarg\<Xr8c;KB^[mrJ3?XRoN(Z1DJ\M+r0WDU]5M+T*e5DoKk?<:L&i#r_CV..i_UT@i&6b/#^Kf8;M=n5usYI9(a_
%Q+pBB99;)2\1N(jI@"64it;Wk6Ulru._P1?Q/e]p^l=3KE\5omRZRrc_9@2F''GS(@c$2c9gBW&ahV_=AG5e;3XWtt#IA7*K^]<A
%ZG[df4qk2JMB=@0gci61V0CjOXuKBiE#SU3ECCXGQ@9H>hr&^:0_P4C4#Dr'JL6'!ibc?cb.]H/n.JEa\B]H!A,cK)\e\loFPJ=.
%#E`%gOoAUJ#N,2ekLC5oa(#3g[UaN*n3j%]HflN3,&b''7aYA-P;KrKf&qZm]Q:bS7s>*:-CLd<2`idO*F$#5YsMt&q.Uom6o9k0
%%4"[Z6i((X]ZTEE<KEJ.rUOC35AsH/V+So8YF):\GV3\I)&fR$[dFC;%o_9eX[4Q\VBD917G;uqF8a?e?fsIeK$pH5DF*G1b);7o
%oaAO0B@A1M%/O\%,dX/"S.iRbR9%;YIeg5*T/ItTND^81T2Y2a1dFVl^ZHq><8lJA1-]:%p'FO$,A3Ei[Ots;@QTOOT#Lu/*lYgp
%ZftHuM^a_LV]A)!JEFSj:DerM!'M\bj:FP%Zd!_?Vp^U7V1HZf3FC=FL@BlI@.T,S[JY'CB0P\XkKTs3%ntWiX(>HqCJ*^=V,MK>
%T(b!h%?^#]CE2MlZ'o5*oQ@TlPI.Zk2NbXuFGfM:oj5YM0s]'>%Aql;go0!$Ep];+]Dbq8U-J-JW]KW`Q9).h62//$"K)r;8cVC@
%MU6[L*I)AA3#Al0"("!ZB@@D.3oF^<a($YU$PhH<h?&T^Udr*>AV+)O#[\)-=k"5J28k28EX%OB0QIJ>7Um<BU4`*fa8E&[WtCQL
%[C(4>/ZE.5H8`elB@:(!jLiaMHQj9B&N4<<cpZh0.-uREEqt7PaCX[.L#-?8Vn*UrnN+fj13*kFof@1M36A:7>haTd#U;kX8ImN$
%BH[kW7%"7Fs20kQ"-59+Kh'.t6Yn>"8ata&*J96M&Vh?Oj;#]qM#oFD8%pBu?0,;`a[<dp-OR]A7[>G/VFIm6Dg?0>I=q06G]9JG
%6uhXq*""[)/SOV1M,+$s\^cRQCVA+*]6N3OoY.#OZN84iKgQP'aN^qB4b_B\e>hj:<Y4\c0m>r2\"IT8::0"("P1hW*2Z6p>>J!b
%B<!Yq$Edu7EnC#6h287]<Y+"efG`KaLk5$m#T-$=+:#-':,>;bbc[R9?RE0#O9r=4rFsWcbDIZ7;%3B=Y?an<$TcTF743SKghOg9
%[;L^EN8iWFCkaok+C>V*\nn^q+gIkbCQUq%G]rT:GcMr.V."&">L:r`'?/cldK!Vi\\p3RFYasRUeYOX9au6i0QMBkHY8(\]92j+
%@u`$m?iVYdj;,r/%@8)n8'W-m+?C(UPU@pJjfk.3-Y2%br%/<<52b&"-8c$F'5XD,]1HltiS)duJjl,MRj`O=d)"$lW7Jr:k($BM
%Q`11'//:b:ljL\.d6sWF[0:F'376GnN(8;!j:ZJYf98m.8H$V0k+RC0&Ou._CL)JX2k,.iQ8^)BlJZQ)F(kQi`a4IXTh"^+o[a!M
%VNAgaoH7f#=cc'qE5WOMqUM:$0sSJQ@ZmcBD5JJ11c.eW>6S(A-FlcRV.9N\.R^+U?\aM4d[R(C3VLLg2aKsn.?un^>8=LhpW4HJ
%6s&dWJ4SgMReWT@.h4Pm7nu1<n7Zf?)R*H(c8d;6-CN3Tprp9`J^OiP(j[D'iMAM=*6Tp_50BN=[\4L4<A,;*7FE*_=I()mnXH79
%ld!Fe!8PNL,2')KL*;n$n'HKu2cans4Q$(r4IadW^Tlut*!=VcdDi&BS"Q:\Ql?^.JebhJ[>@Bl#+hbWi&]gSX!bDH$s-j58Zp.7
%)nti(*XQOQWn\cXn5=_&'P1d>2gV-6NDakVN1't?%c%A;dq\4I$,/FL<>[8Y4i[_%B(3)LE>fD%Etae1LF*]ajX&@j[^qJm9$CZn
%Z-=V5A05br+s#E%cSbVblnM6TorBiu+1F%S2'cZN7nu5T+cjd-l_oWrm;SM6@gWjghX8g?^j!cH5Ypm/jRmO_5bt9'&J-c&9*l\G
%F&I;%Bp*^j06#@"AuuBIC27"97hG+8IDC&"l$-Z3,*'3W4^;'Jq(MZ'r!RiR7["PTfYg3.EXIf!h&>p>Jg>PMP;R;,qLIa()tXdo
%'$h253MRtW]b)P$nL^8H&6`"*`\k&j<mfI0]Ib)uFWT,b-*amRpC#LV>`VR$I\(>fj3k!nS-+hg^C,Mr^F,-nn_^_V1]1tRfYFo'
%&Z`=9**k#C/f>5gd/B&Ep,g2?<[=7dAj7?BHNr;B825"0lSTiL5h@XLpTeeh$L#l:d,CNa^+p''/bdr:Sa6H]6ODe0ouKpg1FEdF
%gluS:B.6#9,T8)J#d/CBcAn:O&[O?kn>.0#0WK#P(SVFbN_$k["OD=@PRV)l`3(!(LMSf;okn;M3cG9c(cr['WYH8@"NT9:A1cK6
%5%'hTCO0GE+poJbV<j'PD&>e76g^k\7\(T:F\%,T'mF6ci;E%[=%:nugKh)qfZq!-rrh'_ih-T2^$GCU:i(fb/V.gMH\=<&Ic_:^
%U"qVBc&(ij^(FrUb\AE:[to17i(AC$8J8WP.VOt^gNXT?N$eK2C[0(9#X!t&;pVJR>ff0;]>>one1=2hL+[^"/XR)0Z8`Y_80uN[
%9j;lTZntcP&AEFG!F`dT5AZYPA05dHq@T?&OF1V&$S1%<Y)"VaMmqgTi22<##4J2FC>;6p+0q[8@RX'\+#)Mt*mZCY8o(&A%_*=9
%\]p@nXLC0hpNC)2_7>DP&rFT^0Es<SHXR!C0\LInqge"[7t"u4,&(gA`_$e2,S/-r^fK3!.h=:&FRbR"cdMM#:1"2,r,h)g0%gcg
%B'4,^AiZ#(_&4*.4(gMOE:6KQ:/:1DQqGNd0TCKuhjn\qUG]1-e@EqS^c*k0n;OpsODJ"s\Y\LY1",Z/('b@Db-=WW%fT224k!@?
%esaEndD6]bLE:T@F<C!H4jos"<tRaCGLVJe0hfh]F=DDWZJ(XSRWC$8U33D2jQh^m%I'7TL7ZIM@%1hqB/J1sg[AEm$-gudY*UY[
%5U&MM5nK@-7pho@kUst1M&!;0`R(?1-aF987]PPt(1lH+#*$HrQ7fhJ^i(mR+TOP$oGET6!$(5C33V5D`c/e./fRF.G-X6XIDC%q
%b*j]<^9C!M,_S2-jCJUU)*En2VNeb#(jf>:D@^LL608`%"U*UH;7"Q5l3"1.SQVRePFMZP<FrD3C14[D4q\\P8`a-pqj>dD)RtE=
%'+36@+R%4sfQ3b`J8\PYT/#Ziq<2Q5#"^Mcf*qJd'R2(8j5=1X&)G#W=3R%5nY3"9TL/%o7<ta,J8[iu4g?DTElm,sZiCcp5A\oU
%`N4P[k>df754l@;UB/,6"14M&k=YG8[\<ZNBC%Z=\dWXcdG\=u+MXXM4j(FqoZL\GHri2#iH-c646VOh"2<HIp&s8tO>.0?IhW9s
%j<puF9P.>e\.-_;!<90\6'q+Lck<uuWBO^YoRpl$3^$$^==,,P8<pa*e4AlqiS_eHTIREjbZ+Ci4'UoAk'EVEY%/WYSP".HWe8bn
%Q>X[LV\Ee1']4rZfEp'++HaA&W2`^;Q!VE'bm`af_@,$%Cm4/WN+&VOf#a0ugrYPpY.l$J$kdTIGSQX_[gAOij`?HjAq[$+'D3o+
%-2W40g=i1(lnBr[AV.@s&bL0$88)#XZ;Xe44E)X/WIs!CWp\:15W$B/.os7=>ff0;]@QP3@0_APHlE>"L8oi9e>WQ0Tk.^QE@R,(
%L(9S>NGCpj[&cI-?;po2ks"%;iQ_$CpoZ=4$A0K1Mld7=Gd%6nR!o0&.jr,dZ?Lt49kf!<b^@`&YS5+`%-*$8`+m5-eK_&ng^c,/
%V#uil/8l&0P*9`#k[;:H+!!2o4bA,R_9^QBA4NpUh$8=g2P)Vi0Sb&3"rtXG]-X>3M/><[qZt2cdTgQIY`paA"+FB6,7L8B<Kc75
%q]XjAgbM*&gL1T(Ki-pfoR7:'2I!S7[#Gl,//W[e/pK2F-=miTqo`iX@W]4LpAs1<Y^(ihN+[dKE*/:E&OZ_S.N*rE`/S\=OO4-u
%;A1\g=u5qn<c6q@#D,$Z+7N"1lNuS]F,9!jR)>FdYkq8prW]*;ZeCg,G(u25_t\6$,?nYeQTu;P.ok9:OF=o&@Qcrj/=AeD.ZHgd
%U=hE,IV>*f:nna"DJIb?j`3*)"-)<O*4Ts.'PksMmK:02<8OPJDM]CI*ETYTL3=]4Q6SdY%,-J3'9:r_b@MMJ)V[Dt%=;tA7:Z3_
%p&Wp5:)M<Y9"aL;@1LpuD0@QHqdBrR2CE_SfO?gm\5sZfS5;;t#@+_LT.oc-=/[d,YejRs:6Hfu<K8pPrJa/L`<sf7hmJ<hJUtuS
%,SqQRgF'QCpnkC^'*]N)c]+c,WtMq?ZD@)?4']5Za-b%g8;'E)P!i1CcIHeH-"K<Th51"!mh*GN"s._cq:ZFt5(`"Q&8M`tS:pdZ
%d7car,`[jo)N)@=NGOJh8]!B(pW.g)2;A,&Yj[+Yd\=%ak7QNiilLE(.m7L.d:nEOY2Ng&@1;;:(O>:ra`<\1d=&ehXt)]B-8S!^
%1b^FM\^$%;]+fGVENXXmIW-oN7JS^,mOa'tc)+Za#+dp%M=(J[3Cr'7^*B5TD_HDcTW8>dZp@^,m\'geBH'BB6,[r<>PV.L`f2[2
%DKFu-p&Wp)'ZOc$-/od'RN63X=Y)\1J!!B?AamfOl?8;n59]$jRQ*f,R%]Q5;//#]7.pZ9n:!Ts^EQMZ3tDn+T[1S$:CI&m3F7:9
%9hi2gM'54VeZ(#+4ADRf1?(fAGNh<L]9M=n!tR0/</LK?qCORFF8d*:)ibD>OE:=T.rb"rg\Mt\"H@*!b8ml!fWM%05'*6QOsGr'
%9P/G7#Wlf?NRNr_VdP2#$>0:oTeRMAPW71YF=$d6kuPe[ef?$HaV*i6?&9MLb]Lf[&/n!-bm*'pS.IYhX/]XL%1HC_eu&/3/):GX
%pR7^0nDLh"f1*QL4q*A(G?*FlS0t7:1[mfC\6&;cd$moM&tp5jZY?-qh$8<<4B1nThhX!<`aL>QcYG!CSV9!Vbl5Ghm"+:"[uU%(
%WMfDi6T.HsQ0sETe$6K\VbB4K.*&E;324(6#s76g*#bYUL<^(;(OT1j]+dF#igL\0'"#X5Hrm<Y\.5W*@H$0%]uS<Gq1i>WWk-sb
%cY!<hr>Ph;otN0[p$_nL&%CHpbE%/Ni<KF5o,iJVq]Gje++O%Bs2U1Mr:R7Bs/4cQo]+-`rpU/so&KbGT3d!H`uk?R^]*JY5JI'[
%^\uX]#(hou#J^)Zhu/=[pZl2b+/q'M'E~>
%AI9_PrivateDataEnd
